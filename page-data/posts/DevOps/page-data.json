{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/DevOps","result":{"pageContext":{"currentCategory":"DevOps","categories":["All","CLOUD","DevOps","LINUX","DATA","Error-Report","NETWORK"],"edges":[{"node":{"id":"0c0f7578-bb81-557a-8d80-32a4858eeb47","excerpt":"머리말   이번 포스트로 이제 파이프라인에서 동작하는 전체적인 보안툴에 대한 포스트는 끝났습니다. 최종적으로는    SonarQube로 Build 될 이미지의 소스코드에 대한 전략적 정적분석을    Anchore로 빌드된 이미지에 대한 분석을   OWASP ZAP으로 배포 된 서비스에 대한 동적분석   위 세가지 보안 항복을 Jenkins를 이용해 자동화 하였습니다. 사용 할 툴을 다음과 같습니다.   Jenkins Sonarqube ✔ SonarQube ?? 위키백과 왈 소나큐브(SonarQube, 이전 이름: 소나/Sonar)는 20개 이상의 프로그래밍 언어에서 버그, 코드 스멜, 보안 취약점을 발견할 목적으로 정…","fields":{"slug":"/devops-sonarqube/"},"frontmatter":{"categories":"DevOps","title":"[DEVOPS] - SonarQube With Jenkins","date":"August 12, 2021"}},"next":{"fields":{"slug":"/devops-anchor/"}},"previous":{"fields":{"slug":"/date-spark/"}}},{"node":{"id":"db35f671-1882-5449-b83f-40eecad72930","excerpt":"머리말   지난 포스트에서 간단하게 전체적인 파이프라인에 대해서 포스트를 했습니다. 이번 포스트는 Harbor에 배포 될 Container Image 분석 오픈소스 Anchore를 도입했던 포스트를 작성했습니다. 사용 할 툴을 다음과 같습니다.   Jenkins Anchore ✔ Anchore ?? 정말 간단히 설명해서 Docker Image의 취약점을 스캔하는 스캐너라고 생각하면 됩니다. Anchore 오픈 소스 버전은 다음에서 참고할 수 있습니다. https://anchore.com/opensource/ 이미지 분석 컨테이너 이미지의 심층 검사를 수행하여 모든 OS의 패키지, 파일 및 소프트웨어 아티팩트 (Ruby…","fields":{"slug":"/devops-anchor/"},"frontmatter":{"categories":"DevOps","title":"[DEVOPS] - 이미지 분석 툴 Anchore With Jenkins","date":"August 11, 2021"}},"next":{"fields":{"slug":"/devops-harbor/"}},"previous":{"fields":{"slug":"/devops-sonarqube/"}}},{"node":{"id":"f1f3cd19-e979-5f14-987a-47d3f564c240","excerpt":"머리말   그동안 빌드된 이미지를 관리하거나 정적분석 할 때 Docker hub를 기반으로 구성했으나 이번 프로젝트에서는 어떻게 하면 보안에 조금 더 중점을 둘 수 있을까를 생각하다 Harbor를 사용하여 독립적인 저장소로 이미지를 관리하기로 결정하였습니다. 사용 할 툴을 다음과 같습니다.   Jenkins OWASP ZAP ✔ Harbor 설치 (Docker) Harbor 설치의 경우 이미 많은 분들이 더 쉽게 설명해놓으셔서 간단히 넘어가겠습니다.   img 우선 Harbor는 특정 OS에 맞는 docker, docker-compose가 요구됩니다 Centos 7을 기반으로 진행하였습니다. docker-compose…","fields":{"slug":"/devops-harbor/"},"frontmatter":{"categories":"DevOps","title":"[DEVOPS] - Private 이미지 저장소 Harbor 도입","date":"August 10, 2021"}},"next":{"fields":{"slug":"/devops-owaspzap/"}},"previous":{"fields":{"slug":"/devops-anchor/"}}},{"node":{"id":"08b7b481-d22d-5769-b198-a051e19e0c19","excerpt":"머리말   이번 포스트에서는 구축된 DevSecOps 파이프라인에서 보안쪽을 강화하기 위해서 OWASP ZAP을 도입한 도입기 포스트입니다. 보통 외부 서버로 두고 서비스의 Port나 IP등을 스캔하지만 저희는 k8s 클러스터에 직접 올려 pod들을 스캐닝 하려고 했습니다. 사용 할 툴을 다음과 같습니다.   Jenkins OWASP ZAP ✔ GCP의 LB IP를 고정 저는 gcloud-sdk를 이용하여 Cloud Shell에서 작업을 진행했습니다 아래와 같이 CLoud Shell에 원격 접속 후 GKE 클러스터에 대한 권한을 받아옵니다 그 후 아래 명령어로 외부 고정 IP를 생성해줍니다 이후에 배포 할 서비스의 메…","fields":{"slug":"/devops-owaspzap/"},"frontmatter":{"categories":"DevOps","title":"[DEVOPS] - Jenkins Pipeline에 OWASP ZAP 도입기","date":"August 09, 2021"}},"next":{"fields":{"slug":"/devops-jenkinspush/"}},"previous":{"fields":{"slug":"/devops-harbor/"}}},{"node":{"id":"b022c64e-b03d-5890-807a-f79d479433c2","excerpt":"머리말   이전 포스트에서 간단하게 이미지를 빌드한 뒤 ArgoCD와 SYNC를 맞춰 배포를 자동화한 파이프 라인을 완성했습니다. 이번 포스트에서는 Jenkins에서 해당 이미지를 빌드하는 부분에 대해서 포스트 했습니다. 사용 할 툴을 다음과 같습니다.   Jenkins maven github ArgoCD ✔ 전체 Jenkins 파이프라인 파이프라인 스크립트 파이프라인의 프로세스 소스코드를 Clone 해온 뒤 Build 테스트   Dependency-Check Analysis 로 코드 정적분석   Sonarqube and Quality gate 정적분석   위의 검사에서 에러가 없으면 Docker image build…","fields":{"slug":"/devops-jenkinspush/"},"frontmatter":{"categories":"DevOps","title":"[DEVOPS] - Jenkins로 Dvmn 앱 이미지 자동 빌드 및 푸시하기","date":"August 08, 2021"}},"next":{"fields":{"slug":"/devops-gcpfilestore/"}},"previous":{"fields":{"slug":"/devops-owaspzap/"}}},{"node":{"id":"801845e2-ac0a-5de8-bf0a-12fd8d8036e2","excerpt":"머리말   이번 포스트에서는 앱 구동을 위한 MYSQL 이중화입니다 이전 포스트에서 앱 배포를 완료했지만 MYSQL pod의 경우 볼륨의 문제로 하나밖에 뜨지 않아 DB 데이터를 어떻게 저장할지에 대한 고민이 있었습니다. 고민해본 결과 NFS를 만들어서 그쪽에 데이터를 저장해놓고 POD가 실행될때마다 NFS를 읽어오자! 라는 결론이 나왔습니다 그래서 NFS 서버를 구축하려고 하려는 찰나 GCP에서 API 서비스로 제공한다는 소식을 듣고 바로 사용해 보았습니다 사용 할 툴을 다음과 같습니다.   GCP FileStore k8s PV,PVC ArgoCD ✔ 발생 이슈 MYSQL Pod를 두개 이상 띄우려고 할때 아래와 같…","fields":{"slug":"/devops-gcpfilestore/"},"frontmatter":{"categories":"DevOps CLOUD","title":"[DEVOPS] - GCP의 FileStore (NFS) 를 PV로 사용해보자","date":"August 07, 2021"}},"next":{"fields":{"slug":"/devops-cicd2/"}},"previous":{"fields":{"slug":"/devops-jenkinspush/"}}},{"node":{"id":"bdbab45f-6ba1-56d5-9b14-88db8da9d77d","excerpt":"머리말   이전에 구성한 파이프라인의 전체적인 자동화는 아직 구성이 안됐지만 CI, CD 각각의 자동화는 마쳤습니다. 그렇기에 이번에는 실제 보안 취약점 검사를 위한 오픈소스 툴을 Rancher 클러스터 환경에 배포해봤습니다.!! 사용할 툴은 DVMN인데 기본적으로 PHP 배포판이 대부분이지만 저는 Jenkins에서 Junit등의 취약점 분석을 조금 더 쉽게 하기 위해서 JAVA 기반의 배포판으로 MSA를 만들어 배포했습니다. 사용 할 툴을 다음과 같습니다.   GITHUB ArgoCD Helm kompose ✔ DVWA MSA 생성 DVMN JAVA 링크 해당 주소에서 JAVA기반의 DVWA앱을 확인했습니다!! 그러…","fields":{"slug":"/devops-cicd2/"},"frontmatter":{"categories":"DevOps","title":"[DEVOPS] - 보안 취약점 검사를 위한 Dvmn 앱 자동 배포하기","date":"August 07, 2021"}},"next":{"fields":{"slug":"/gcp-cloudshell/"}},"previous":{"fields":{"slug":"/devops-gcpfilestore/"}}},{"node":{"id":"85410047-efe9-5c0d-aa1f-e10ed1571e2d","excerpt":"머리말   안녕하세요 NASA입니다!!. 이번 포스트에서는 Open Source인 Gitops기반의 Argo-CD 를 이용한 배포에 대해서 포스트했습니다 앞서 다룬 포스트에서 기본적인 환경구성은 모두 완료되었고 이제부터 진정한 파이프라인 구성입니다!! 사용 할 툴을 다음과 같습니다.   Rancher (GKE) Argo-cd ✔ 환경구성 환경구성의 경우 이전 포스트에서 모두 완료했습니다!! 다만 클러스터 내부에 직접 들어가 Argo-CD를 설치하는게 아닌 Rancher의 카탈로그를 사용해서 자동 Helm 배포를 진행합니다 ✔ Rancher Argo-CD Plugin을 설치 구축중인 파이프라인의 전제적인 Service …","fields":{"slug":"/devops-argocd/"},"frontmatter":{"categories":"DevOps","title":"[DEVOPS] - Argo-CD를 이용한 배포 자동화","date":"August 07, 2021"}},"next":{"fields":{"slug":"/devops-rancher-gke/"}},"previous":{"fields":{"slug":"/gcp-cloudshell/"}}},{"node":{"id":"3530a618-aa45-5512-8771-62a86a0ea7dc","excerpt":"머리말   안녕하세요 NASA입니다!!. 이번 포스트에서는 Open Source인 Rancher를 이용한 k8s 클러스터 구축에 대한 포스트입니다 이전 포스트와 다른점은 이전에는 이미 구성되어있는 클러스터를 사용했다면 이번 포스트에서는 GKE를 사용했다는 점입니다!! 사용 할 툴을 다음과 같습니다.   docker, Rancher (GKE) k8s ✔ 환경구성 환경구성은 다음과 같습니다. 스크린샷, 2020-10-13 17-18-15 Rancher : Rancher master가 띄워져있는 Cluster 관리 서버 Jenkins : 이전 포스트에서 설정한 CI 작동 서버 gke : GKE 클러스터 노드 GKE SERV…","fields":{"slug":"/devops-rancher-gke/"},"frontmatter":{"categories":"DevOps CLOUD","title":"[DEVOPS] - GKE Cluster를 Rancher에 연동하기","date":"August 06, 2021"}},"next":{"fields":{"slug":"/devops-rancher/"}},"previous":{"fields":{"slug":"/devops-argocd/"}}},{"node":{"id":"369278cb-c762-599f-ba00-0a2a53a49b54","excerpt":"머리말   안녕하세요 NASA입니다!!. 이번 포스트에서는 Open Source인 Rancher를 이용한 k8s 클러스터 구축에 대한 포스트입니다   사용 할 툴을 다음과 같습니다.   Rancher (GCP INSTANCE) k8s (GKE), ON-PRE로 구성된 클러스터 ARgoCD ✔ RANCHE 환경으로 서비스 구축을 해봅시다. Rancher는 Rancher Labs에서 개발한 오픈 소스컨테이너 오케스트레이션 플랫폼 Rancher 2.0(현재 버전)은 Kubernetes 기반으로 개발되었으며 기존 온프레미스 환경을 비롯한 멀티 클라우드 환경을 통합 관제할 수 있도록 지원합니다.  스크린샷, 2020-10-22…","fields":{"slug":"/devops-rancher/"},"frontmatter":{"categories":"DevOps","title":"[DEVOPS] - Rancher를 사용한 Kubernetes Cluster 구축","date":"August 05, 2021"}},"next":{"fields":{"slug":"/devops-cicd1/"}},"previous":{"fields":{"slug":"/devops-rancher-gke/"}}},{"node":{"id":"057af5e7-bd29-5bbc-86f2-61487fe7337f","excerpt":"머리말   안녕하세요 NASA입니다!!. 이번 포스트에서는 Open Source를 이용한 DevSecOps CI/CD PIPELINE 구축에 대한 포스트입니다. 다만 포스트의 양이 매우 많아 질 것 같아. CI, CD 별 그리고 툴 별로 포스트를 나눌 예정입니다. 이번 포스트에서는 Jenkins를 이용한 CI 구성 부분을 포스트 했습니다!.. 사용 할 툴을 다음과 같습니다.   gitlab Jenkins Docker, dockerhub ✔ 환경구성 우선 환경 구성은 아래와 같습니다\n캡처 jenkins : 젠킨스 서버의 역할을 하는 서버 (Docker in Docker) Rancher-master : Rancher 기반…","fields":{"slug":"/devops-cicd1/"},"frontmatter":{"categories":"DevOps","title":"[DEVOPS] - Jenkins를 이용한 CI 자동화 구축","date":"August 04, 2021"}},"next":{"fields":{"slug":"/azure-synapse/"}},"previous":{"fields":{"slug":"/devops-rancher/"}}},{"node":{"id":"fd1c3f20-62ff-5ee2-a922-ceae1bfe395d","excerpt":"이번 포스트는 이전 K8S 설치 및 구성 포스트에서 정상적으로 설치 뒤에 발견된 이슈에 대한 리포트 입니다. github, 영문 리포트 사이트에서 여러가지 글이 있지만 정확한 원인과 해결방법에 대한 댓글이 없어 리포트 합니다. ✔ 해결방법  이후에서만 발생하는 이슈입니다. 버전을 낮춰 설치를 진행, 혹은 버그가 릴리즈 될 때까지 기다리는 수 밖에 없을 것 같습니다.   저는 1.16 버전으로 설치 후 정상 구동을 확인 했습니다. 추가적으로 GCP같은 퍼블릭 클라우드의 환경에서만 발생하는건지 기존의 레거시 설치 환경에서도 발생하는 건지는 테스트가 필요합니다. ✌ 이슈 내용 에서 헬스체크 이슈 \n으로 기본 설치 이후 아래…","fields":{"slug":"/kubernetes-error01/"},"frontmatter":{"categories":"DevOps Error-Report","title":"[Kubernetes] - 1.17버전 이상 헬스 체크 에러 리포트","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubernetes-volume/"}},"previous":{"fields":{"slug":"/azure-104/"}}},{"node":{"id":"624b3182-5fe2-5d6a-9dad-741527689b4e","excerpt":"머리말    이번 포스트에서는 쿠버네틱스의 볼륨에 대해서 알아보자. ✔ 쿠버네티스의 볼륨 파드의 컨테이너는 이미지로부터 파일시스템을 제공받는다. 그러나 파드가 종료되면 파드 내의 은 더 이상 사용 할 수 없게 된다.   컨트롤러에 의해 새로운 파드가 생성이 되면 이미지로 부터 새로운 파일 시스템을 제공받는다. 즉 컨테이너는 기본적으로 데이터를 유지하지 않으며, 이런 형태를  라고 한다. 파드는 새로 생성된 데이터를 보존하기 위해 을 생성하고 이런 볼륨을 컨테이너에 해서 사용한다. 볼륨은 여러 파드에서 에 접근이 가능하다. 기본적인 볼륨의 은 파드의 과 같다. 파드가 생성되고 삭제됨에 따라 볼륨도 같이 생성되고 삭제된다…","fields":{"slug":"/kubernetes-volume/"},"frontmatter":{"categories":"DevOps","title":"[Kubernetes] - 쿠버네티스의 Volume","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubernetes-service/"}},"previous":{"fields":{"slug":"/kubernetes-error01/"}}},{"node":{"id":"6c1b0b6c-a003-5855-a2b1-30c61c4e5df0","excerpt":"머리말   이번 포스트에서는 쿠버네티스의 네트워크 및 내부 서비스들에 대해서 알아보겠습니다. ✔ Service 이전 포스트들에서 쿠버네티스 클러스터안에 컨트롤러들을 이용해서 POD를 정의했습니다.      POD 특성상 생성 및 정의 될때 지정되는 IP가 랜덤하고  또한 리스타트 때마다 IP가 변동됩니다.   위 두개의 이유로 POD는 로 호출이 어렵습니다. 또한 여러 POD에 같은 애플리케이션을 운용할 경우 이 POD 간의 로드밸런싱을 지원해줘야 하는데 이러한 기능들을 수행하는게  입니다.   간략한 서비스들의 기능을 요약해보면 아래 4가지 정도입니다. 서비스를 사용하게 되면 고정된 주소를 이용해서 접근이 가능해 집…","fields":{"slug":"/kubernetes-service/"},"frontmatter":{"categories":"DevOps","title":"[Kubernetes] - 쿠버네티스의 Service","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubernetes-controller/"}},"previous":{"fields":{"slug":"/kubernetes-volume/"}}},{"node":{"id":"059e8eef-76f8-5d37-9aac-1ad3fc2d4868","excerpt":"머리말   이번 포스트에서는 자동적으로 POD 및 시스템을 관리 할 수 있는 컨트롤러에 대해서 알아보겠습니다 ✔ 라이브니스 프로브 라이브니스 프로브 개념 사용자가 모든 오브젝트를 일일이 관리할 수는 없다. 관리하고자 하더라도 사용자의 사각지대에 있는 오브젝트를 실제 프로덕션 환경에서 관리하기 위해서는 수동 작업은 권장되지 않는다. 실제 환경에서는 자동적으로 정상적이고 안정적인 상태가 유지되어야 한다. 쿠버네티스가 이러한 요구를 충족시키기 위해서 사용하는 것이 이다. 라이브니스 프로브는 파드에 의해 컨테이너를 동작시키고 동작중인 컨테이너의 상태를 주기적으로 모니터링한다. 파드에서 오류가 발생하면 해당 컨테이너를 재시작시…","fields":{"slug":"/kubernetes-controller/"},"frontmatter":{"categories":"DevOps","title":"[Kubernetes] - 쿠버네티스의 컨트롤러","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubernetes-label/"}},"previous":{"fields":{"slug":"/kubernetes-service/"}}},{"node":{"id":"3e819d0c-cf4a-5cab-84f4-1a08c1b7532d","excerpt":"머리말   이전 포스트에서는 기본적인 POD의 정의 및 생성에 대해서 알아봤다 이번 포스트에서는 POD를 더 효율적으로 관리하기 위한 레이블과 셀렉터에 대해서 알아보자 ✔ 레이블 레이블 은 파드와 같은 오브젝트에 첨부된 키와 값의 쌍이다. 레이블은 오브젝트의 특성을 식별하는 데 사용되어 사용자에게 중요하지만, 코어 시스템에 직접적인 의미는 없다. 레이블로 오브젝트의 하위 집합을 선택하고, 구성하는데 사용할 수 있다. 레이블은 오브젝트를 생성할 때에 붙이거나 생성 이후에 붙이거나 언제든지 수정이 가능하다. 오브젝트마다 키와 값으로 레이블을 정의할 수 있다. 오브젝트의 키는 고유한 값이어야 한다. 레이블은 UI와 CLI에…","fields":{"slug":"/kubernetes-label/"},"frontmatter":{"categories":"DevOps","title":"[Kubernetes] - 쿠버네티스의 레이블 및 셀렉터","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubernetes-pod/"}},"previous":{"fields":{"slug":"/kubernetes-controller/"}}},{"node":{"id":"64fbddd3-aaf7-50d0-a98f-5a7dff2bb244","excerpt":"머리말   이제 기본적인 개념과 kubectl 명령어까지 모두 알아봤다!! 이번 포스트부터는 진짜 실습을 들어가보자!! 우선 컨포넌트 포스트에서 설명했던 것들부터 시작하겠습니다!! ✔ POD?! 은 쿠버네티스 APP의 기본 실행 단위인데 쉽게 말해 쿠버네티스 워크로드에서 관리할 수 있는 가장 작은 단위가 파드입니다. 또한 배포 시 배포의 단위가 되기도 합니다. 파드는 하나 이상의 ‘동작중인’ 컨테이너를 포함하고 있는 오브젝트이고 하나의 파드에는 하나의 컨테이너를 배치하는 것이 기본입니다. 쿠버네티스 클러스터 내에서 파드는 주로 두 가지 방법으로 사용되죠. 스크린샷, 2020-09-16 15-29-48 Pod 모델 종류…","fields":{"slug":"/kubernetes-pod/"},"frontmatter":{"categories":"DevOps","title":"[Kubernetes] - 쿠버네티스의 POD?","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubernetes-command/"}},"previous":{"fields":{"slug":"/kubernetes-label/"}}},{"node":{"id":"b1a77332-6f87-5631-8103-2ad76c5e959f","excerpt":"머리말   이제 실습전 알아야 할 이론적인 부분들은 모두 포스팅 했습니다. 이번 포스트 부터 이후 포스트까지는 실습에 대한 내용들을 다룰 것입니다.     ✔ kubectl 명령어 쿠버네티스는  이라는 CLI 명령어를 통해서 쿠버네티스 및 클러스터 관리, 디버그 및 트러블 슈팅들을 할 수 있습니다. 자세한 내용을 알고 싶으면 kubectl 치트 시트를 참고하세요 는 기본적으로 아래와 같은 형태로 커맨드 라인에 입력하여 사용할 수 있습니다.  : 자원에 실행하려는 동작 create : 생성 ge` : 정보 가져오기 describe : 자세한 상태 정보 delete : 삭제    : 자원 타입 pod : Pod servi…","fields":{"slug":"/kubernetes-command/"},"frontmatter":{"categories":"DevOps","title":"[Kubernetes] - 쿠버네티스의 명령어 정리","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubernetes-architecture/"}},"previous":{"fields":{"slug":"/kubernetes-pod/"}}},{"node":{"id":"85b868eb-f8db-5212-ac16-bf9c82a6dddc","excerpt":"머리말  이전 포스트에서 쿠버네티스의 기본적인 컴포넌트 개념에 대해서 정리 해보았습니다. 이번에는 실습에 들어가기 앞서 아키텍쳐의 개념을 잡고 들어가기위해서 조대협님의 블로그 글을 참고하여 제 식대로 다시 정리 해보았습니다.   참고  :  조대협님 블로그 ✔ 아키텍쳐 개념정리 이전 포스트에서 쿠버네티스에 대한 개념 이해가 끝났으면 이제 쿠버네티스가 실제로 어떤 구조로 구현이 되어 있는지 아키텍쳐를 살펴보도록 하자. 아키텍쳐를 이용하면 동작 원리를 이해할 수 있기 때문에 쿠버네티스의 사용법을 이해하는데 도움이 된다. (kubernetes의 아키텍쳐) 스크린샷, 2020-09-16 11-45-17 ✌ 마스터와 노드 쿠버…","fields":{"slug":"/kubernetes-architecture/"},"frontmatter":{"categories":"DevOps","title":"[Kubernetes] - 쿠버네티스의 아키텍쳐","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubernetes-componant/"}},"previous":{"fields":{"slug":"/kubernetes-command/"}}},{"node":{"id":"f7b5524d-5df4-5975-baf4-be92f59dc22a","excerpt":"머리말   이전 포스트에서 드디어 GCP 인스턴스 기반의 k8s 클러스터 환경을 구축했습니다. 이번 포스트에서는 이번에 간단하게 포스트해서 정리했지만 실제 실습을 들어가기전 전체적인 개념에 대해서 다시 한번 정리하고 실습에 들어가야 할 것 같아서 조대협님의 블로그 글을 참고하여 내 식대로 다시 정리해보았다.   참고  :  조대협님 블로그 ✔ 개념정리 오브젝트 쿠버네티스를 이해하기 위해 가장 중요한 부분이 이다. 가장 가 되는  를 하고 하는 추가적인 기능을 가진  이러한 오브젝트의 이외에 추가정보인 들로 구성이 된다고 보면 된다.  오브젝트 스펙 (Object Spec) 오브젝트들은 모두 오브젝트의 특성 (설정정보)…","fields":{"slug":"/kubernetes-componant/"},"frontmatter":{"categories":"DevOps","title":"[Kubernetes] - 쿠버네티스의 컴포넌트","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubernetes-error1/"}},"previous":{"fields":{"slug":"/kubernetes-architecture/"}}},{"node":{"id":"b10caab8-cb55-5a70-84d6-bbb3cda063ef","excerpt":"✔ 발생 에러 상황 : kubespray로  명령어 구동 중 “assertion: groups.etcd | length is not divisibleby 2” 에러 발생” kubespray로  명령어 진행 시  에러가 발생할 수 있습니다. 스크린샷, 2020-08-21 10-10-28 캡쳐 이미지를 보면 특정노드는 성공했는데 특정노드는 실패했습니다 ✌ 원인 해당 에러는 아래 이미지와 같이  파일에 지정한 가 인 경우에 발생합니다. 스크린샷, 2020-08-21 10-12-18 kubespray/roles/kubernetes/preinstall/tasks/0020-verify-settings.yml 코드 확인 스크린샷,…","fields":{"slug":"/kubernetes-error1/"},"frontmatter":{"categories":"DevOps Error-Report","title":"[Error Report] - length is not divisibleby 2","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubernetes-kubeadm/"}},"previous":{"fields":{"slug":"/kubernetes-componant/"}}},{"node":{"id":"02ef2350-d7b7-5949-8669-9c9f4ed8580e","excerpt":"머리말   이전 포스트에서는 kubespay 자동화 툴을 사용해서 K8S 클러스터를 구축 했었습니다. 이번 포스트에서는 kubeadm을 이용해서 K8S 클러스터를 구축하는 방법에 대해서 포스트했습니다.   ✔ 사전준비 사전 준비의 경우 kubespray와 동일하게 GCP VM Instance에서 구성했기 때문에 방법이 동일합니다. 사전 준비는 이전 포스트인 kubespray를 확인해주세요. ✌ 쿠버네티스  설치하기 kubeadm 본격적인 설치 과정입니다.\n은  과  을  때문에 직접 설치해야 합니다.   전체 Server에 아래 를 추가합니다.   CENSOS yum update 도커 설치 전 사전 세팅  도커 저장소…","fields":{"slug":"/kubernetes-kubeadm/"},"frontmatter":{"categories":"DevOps CLOUD","title":"[Kubernetes] - Kubernetes 환경구성 on GCP Using kubeadm","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubetnetes-kubespary/"}},"previous":{"fields":{"slug":"/kubernetes-error1/"}}},{"node":{"id":"22b18939-b966-58ca-8408-1ddb10464062","excerpt":"머리말   쿠버네티스 환경을 구성하는 방법은 여러가지가 존재합니다 서버를 준비하는 방법은 또한 여러 가지가 있겠지만 가장 쉽게 생각해볼 수 있는 건  와  를 이용한 로 구성하는 것 입니다. 하지만 이번 포스트에서는 GCP STUDY + Kubernetes STUDY 겸 GCP로 진행했습니다. 사실 GCP 무료 크레딧이 아까운 마음이 더 크긴 했습니다. ✔ 사전준비 쿠버네티스는 3개월 마다 새로운 버전이 릴리즈 되고 해당 버전은 9개월 동안 버그와 보안 이슈를 수정하는 패치가 이루어 집니다.   이번 포스트에 구성할 노드는 와 로 총 의 서버가 필요합니다. 노드의 최소 요구 사양은 다음과 같습니다. 항목 사양 CPU …","fields":{"slug":"/kubetnetes-kubespary/"},"frontmatter":{"categories":"DevOps CLOUD","title":"[Kubernetes] - Kubernetes 환경구성 on GCP Using KubeSpary","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubernetes01/"}},"previous":{"fields":{"slug":"/kubernetes-kubeadm/"}}},{"node":{"id":"5355c631-7fe6-5aa1-b88f-9fb739c067bf","excerpt":"머리말    쿠버네티스… 이름만 많이 들어보고 많이 사용하는 기술이라고만 들었다.  하지만 온프레미스 경험만 가지고 있는 나는 아무것도 알지 못한다.  아마도 포스트를 작성하면서 조금씩 익숙해질 것이라고 생각한다.  마지막 포스트를 쓸 때 쯤에는 초급정도의 스킬은 가지고 있었으면 싶다.    참고 블로그 : https://subicura.com/2019/05/19/kubernetes-basic-1.html ✔ 쿠버네티스란??  쿠버네티스는 컨테이너를 쉽고 빠르게 해주는 오픈소스 플랫폼입니다.   보통 k8s 또는 큐브 (kube) 라고 줄여서 부릅니다. 현재는 단순한 컨테이너 플랫폼이 아닌 , 을 지향하고 컨테이너로 …","fields":{"slug":"/kubernetes01/"},"frontmatter":{"categories":"DevOps","title":"[Kubernetes] - 쿠버네티스란?","date":"June 29, 2021"}},"next":{"fields":{"slug":"/linux-shellscript/"}},"previous":{"fields":{"slug":"/kubetnetes-kubespary/"}}},{"node":{"id":"91aeb602-995f-5d6f-bf10-8331113bcafe","excerpt":"머리말    이번 포스트에서는 Docker에서 조금도 간편화된 방법으로 이미지를 제작할 수 있는 Dockerfile에 대해서 포스팅합니다. ✔ DOCKERFILE 은 컨테이너를 만들고 해야하는 일련의 작업들을 미리 선언함으로써 매번 해당 작업을 하지않고도, 컨테이너 생성시 자동으로 등록된 작업이 실행된 후 컨테이너를 생성할 수 있는 파일입니다. Dockerfile은 어플리케이션 개발 외에도 도커 허브에 배포할때,이미지가 아닌, Dockerfile을 이용하여 배포할 수도 있습니다. Dockerfile은 COMMAND-VALUE 쌍으로 구성된 지시어로 이루어진 도커 이미지 설정 파일입니다. 베이스 이미지를 지정, 컨테이너…","fields":{"slug":"/docker-file/"},"frontmatter":{"categories":"DevOps","title":"[DOCKER] - Dockerfile","date":"June 27, 2021"}},"next":{"fields":{"slug":"/docker-volume/"}},"previous":{"fields":{"slug":"/linux-sed/"}}},{"node":{"id":"bb26cdb7-0ad3-53cc-9c61-d071c65fbd2b","excerpt":"머리말    이전 포스트에서는 도커 컨테이너의 전반적인 운영법에 대해서 포스팅 했었습니다.  이번 포스트에서는 볼륨을 이용해서 실제 도커의 데이터 관리 방법과 그와 관련된 명령어들을 포스트 했습니다. ✔ 도커 볼륨 기본적으로 컨테이너에 생성되는 모든 파일은 컨테이너 레이어에 저장됩니다. 이 데이터들은 컨테이너와 함께 삭제되는 런타임 데이터인데  이 데이터를 영구적으로 저장하려면 반드시 을 사용해야 합니다. 도커의 볼륨-마운트 구조    도커 볼륨을 사용 방법  초기 도커부터 사용했던 방식입니다. 호스트의 특정 디렉토리와 컨테이너의 디렉토리를 연결하는 방식입니다. bind mount는 쉽게 사용할 수 있지만 도커에 의해…","fields":{"slug":"/docker-volume/"},"frontmatter":{"categories":"DevOps","title":"[DOCKER] - VOLUMES","date":"June 26, 2021"}},"next":{"fields":{"slug":"/docker-net2/"}},"previous":{"fields":{"slug":"/docker-file/"}}},{"node":{"id":"19140e2a-39e6-528d-83b0-b371a0d9a02d","excerpt":"머리말    이전 포스트에서는 도커의 네트워크에 대해서 포스팅했습니다.  이번 포스트에서는 이전 포스트에서 포스팅한 네트워크의 종류가 아니라  실제 컨테이너에 사용자가 네트워크 대역대를 직접 설정할 수 있는 MACVLAN과 LINK에 대해서 포스팅합니다. ✔ MACVLAN MacVLan은 브릿지가 없습니다. 대신 서브 인터페이스라는 개념이 등장해서 사용합니다.   물리적인 NIC eth0은 존재하며 에서 여러 하위 인터페이스를 만듬으로써 여러개의 mac 주소를 가질 수 있도록 합니다. 그렇게 되면 생성된 하위 인터페이스들에 여러개의 컨테이너들이 연결되면서 VLAN을 구성할 수 있습니다.   즉 하나의 NIC를 가상화함…","fields":{"slug":"/docker-net2/"},"frontmatter":{"categories":"DevOps","title":"[DOCKER] - MACVLAN, LINK","date":"June 26, 2021"}},"next":{"fields":{"slug":"/docker-network/"}},"previous":{"fields":{"slug":"/docker-volume/"}}},{"node":{"id":"a5cac2cd-ed18-5dc7-8042-ae4cd3358d7b","excerpt":"머리말    이번 포스트에서는 컨테이너들의 서비스와 중요하게 연관되어있는 도커의 네트워크에 대해서 포스트 했습니다.   ✔ DOCKER - 네트워크 유형 도커에는 다양한 네트워크가 존재해 용도에 맞게 네트워크를 선택 할 수 있습니다.    기본으로 사용하는 네트워크는 ,,이 존재하고  명령어로 네트워크 목록을 확인 할 수 있습니다. ✌ BRIDGE NETWORK Bridge는 컨테이너가 사용하는 프라이빗 네트워크입니다. 같은 Bridge로 연결되어 있으면 컨테이너의 IP 주소로 통신할 수 있습니다. 외부로 통신 할 때에는  통신을 사용하며 외부에서 Bridge로 통신을 위해선 을 사용해야 합니다.   도커를 설치하면 …","fields":{"slug":"/docker-network/"},"frontmatter":{"categories":"DevOps","title":"[DOCKER] - Network","date":"June 26, 2021"}},"next":{"fields":{"slug":"/docker-image/"}},"previous":{"fields":{"slug":"/docker-net2/"}}},{"node":{"id":"59e72fe7-ba09-5687-9fb1-d0c5b71d1bba","excerpt":"머리말    이전 포스트에서는 도커의 설치방법에 대해서 간단하게 포스팅 했었습니다.  이번 포스트에서는 실제 도커의 컨테이너의 생성 관리 방법 및 명령어들을 포스트 했다. ✔ 도커 이미지 도커는 기본적으로 라고 하는 중앙 이미지 저장소에서 이미지를 내려받습니다. 도커 허브는 도커가 공식적으로 제공하고 있는 이미지 저장소로 쉽게 올리고 내려받을 수 있습니다.  Docker Hub 도커 허브는 도커에서 제공하는 기본 이미지 저장소로 ubuntu, centos, debian등의 베이스 이미지와 ruby, golang, java, python 등의 공식 이미지가 저장되어 있습니다. 일반 사용자들이 만든 이미지도 50만 개가 …","fields":{"slug":"/docker-image/"},"frontmatter":{"categories":"DevOps","title":"[DOCKER] - IMAGE","date":"June 26, 2021"}},"next":{"fields":{"slug":"/docker-container/"}},"previous":{"fields":{"slug":"/docker-network/"}}},{"node":{"id":"17ac3a0c-cbd6-554f-a341-f5738ed79af3","excerpt":"머리말   이전 포스트에서는 도커의 이론적이 내용에 대해서 간단하게 정리한 포스팅을 했었습니다. 이번 포스트에서는 이미지를 이용해서 실제 도커의 컨테이너 생성 관리 방법과 그와 관련된 명령어들을 포스트 했습니다. ✔ 도커 컨테이너 드디어 컨테이너를 실행해 보려고 합니다. 컨테이너의 위대함을 보기위해 여러개의 프로그램을 마구잡이로 띄워보겠습니다. 컨테이너를 실행하는 명령어는 다음과 같습니다. 다음은 자주 사용하는 옵션들입니다. Ubuntu OS 기반의 컨테이너를 생성해보겠습니다. 명령어를 사용하면 사용할 이미지가 저장되어 있는지 확인하고 없다면 다운로드를 한 후 컨테이너를 하고  합니다. 위 예제는  이미지를 다운받은 …","fields":{"slug":"/docker-container/"},"frontmatter":{"categories":"DevOps","title":"[DOCKER] - CONTAINER","date":"June 26, 2021"}},"next":{"fields":{"slug":"/docker/"}},"previous":{"fields":{"slug":"/docker-image/"}}},{"node":{"id":"86ebeb5f-f270-5f35-ac2b-da9d5887dfe4","excerpt":"머리말    데브옵스나, 인프라엔지니어들에겐 필수적으로 익혀야 하는 기술이지만 나는 이제야 처음 접하기 시작해서 남들보다 쪼금 늦은 것 같다.  약간의 실습만 해봤는데도 이렇게 편하게 할 수 있는 작업들을 나는 그동안 make && install 명령어를 낭비했던 것 같다.  이번 포스트에서는 도커란 무엇인지에 대해 설명한다.   ✔ 도커란 무엇인가?  도커는 의 (오픈소스) 가상화 플랫폼입니다. 라 하면 배에 실는 네모난 화물 수송용 박스를 생각할 수 있는데 각각의 컨테이너 안에는 옷, 신발, 전자제품, 술, 과일등 다양한 화물을 넣을 수 있고 규격화되어 컨테이너선이나 트레일러등 다양한 운송수단으로 쉽게 옮길 수 있…","fields":{"slug":"/docker/"},"frontmatter":{"categories":"DevOps","title":"[DOCKER] - DOCKER란?","date":"June 26, 2021"}},"next":{"fields":{"slug":"/docker-install/"}},"previous":{"fields":{"slug":"/docker-container/"}}},{"node":{"id":"42ce3601-f03b-5fec-b93c-308b868bf3a5","excerpt":"머리말    이전 포스트에서는 도커에 대해서, 도커와 VM과의 차이 에서 포스팅 했었다.  이번 포스트에서는 실제 도커의 설치방법 및 확인 방법등에 대해 간단하게 포스트 했다. ✔ 도커 설치 도커는 리눅스 컨테이너 기술이므로 macOS나 windows에 설치할 경우 가상머신에 설치가 됩니다. 리눅스 컨테이너 말고 윈도우즈 컨테이너라는 것도 존재하지만 이 포스트는 리눅스를 전제로 합니다.   Linux 리눅스에 도커를 설치하는 방법은 자동 설치 스크립트를 이용하는 것이 가장 쉽습니다. 다음 명령어를 입력하면 root 권한을 요구하고 잠시 기다리면 설치가 완료됩니다. 스크립트를 사용하는 방법 외에도 패키지 저장소에 연결하…","fields":{"slug":"/docker-install/"},"frontmatter":{"categories":"DevOps","title":"[DOCKER] - Install","date":"June 26, 2021"}},"next":{"fields":{"slug":"/gcp-semi/"}},"previous":{"fields":{"slug":"/docker/"}}}]}},"staticQueryHashes":["1073350324","2938748437"]}