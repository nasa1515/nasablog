{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/Kubernetes","result":{"pageContext":{"currentCategory":"Kubernetes","categories":["All","LINUX","AZURE","DATA","Kubernetes","GCP","DevOps","DOCKER","Error-Report","NETWORK","AWS"],"edges":[{"node":{"id":"fd1c3f20-62ff-5ee2-a922-ceae1bfe395d","excerpt":"이번 포스트는 이전 K8S 설치 및 구성 포스트에서 정상적으로 설치 뒤에 발견된 이슈에 대한 리포트 입니다. github, 영문 리포트 사이트에서 여러가지 글이 있지만 정확한 원인과 해결방법에 대한 댓글이 없어 리포트 합니다. ✔ 해결방법  이후에서만 발생하는 이슈입니다. 버전을 낮춰 설치를 진행, 혹은 버그가 릴리즈 될 때까지 기다리는 수 밖에 없을 것 같습니다.   저는 1.16 버전으로 설치 후 정상 구동을 확인 했습니다. 추가적으로 GCP같은 퍼블릭 클라우드의 환경에서만 발생하는건지 기존의 레거시 설치 환경에서도 발생하는 건지는 테스트가 필요합니다. ✌ 이슈 내용 에서 헬스체크 이슈 \n으로 기본 설치 이후 아래…","fields":{"slug":"/kubernetes-error01/"},"frontmatter":{"categories":"Kubernetes Error-Report","title":"[Kubernetes] - 1.17버전 이상 헬스 체크 에러 리포트","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubernetes-volume/"}},"previous":{"fields":{"slug":"/azure-104/"}}},{"node":{"id":"624b3182-5fe2-5d6a-9dad-741527689b4e","excerpt":"머리말    이번 포스트에서는 쿠버네틱스의 볼륨에 대해서 알아보자. ✔ 쿠버네티스의 볼륨 파드의 컨테이너는 이미지로부터 파일시스템을 제공받는다. 그러나 파드가 종료되면 파드 내의 은 더 이상 사용 할 수 없게 된다.   컨트롤러에 의해 새로운 파드가 생성이 되면 이미지로 부터 새로운 파일 시스템을 제공받는다. 즉 컨테이너는 기본적으로 데이터를 유지하지 않으며, 이런 형태를  라고 한다. 파드는 새로 생성된 데이터를 보존하기 위해 을 생성하고 이런 볼륨을 컨테이너에 해서 사용한다. 볼륨은 여러 파드에서 에 접근이 가능하다. 기본적인 볼륨의 은 파드의 과 같다. 파드가 생성되고 삭제됨에 따라 볼륨도 같이 생성되고 삭제된다…","fields":{"slug":"/kubernetes-volume/"},"frontmatter":{"categories":"Kubernetes","title":"[Kubernetes] - 쿠버네티스의 Volume","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubernetes-service/"}},"previous":{"fields":{"slug":"/kubernetes-error01/"}}},{"node":{"id":"6c1b0b6c-a003-5855-a2b1-30c61c4e5df0","excerpt":"머리말   이번 포스트에서는 쿠버네티스의 네트워크 및 내부 서비스들에 대해서 알아보겠습니다. ✔ Service 이전 포스트들에서 쿠버네티스 클러스터안에 컨트롤러들을 이용해서 POD를 정의했습니다.      POD 특성상 생성 및 정의 될때 지정되는 IP가 랜덤하고  또한 리스타트 때마다 IP가 변동됩니다.   위 두개의 이유로 POD는 로 호출이 어렵습니다. 또한 여러 POD에 같은 애플리케이션을 운용할 경우 이 POD 간의 로드밸런싱을 지원해줘야 하는데 이러한 기능들을 수행하는게  입니다.   간략한 서비스들의 기능을 요약해보면 아래 4가지 정도입니다. 서비스를 사용하게 되면 고정된 주소를 이용해서 접근이 가능해 집…","fields":{"slug":"/kubernetes-service/"},"frontmatter":{"categories":"Kubernetes","title":"[Kubernetes] - 쿠버네티스의 Service","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubernetes-controller/"}},"previous":{"fields":{"slug":"/kubernetes-volume/"}}},{"node":{"id":"059e8eef-76f8-5d37-9aac-1ad3fc2d4868","excerpt":"머리말   이번 포스트에서는 자동적으로 POD 및 시스템을 관리 할 수 있는 컨트롤러에 대해서 알아보겠습니다 ✔ 라이브니스 프로브 라이브니스 프로브 개념 사용자가 모든 오브젝트를 일일이 관리할 수는 없다. 관리하고자 하더라도 사용자의 사각지대에 있는 오브젝트를 실제 프로덕션 환경에서 관리하기 위해서는 수동 작업은 권장되지 않는다. 실제 환경에서는 자동적으로 정상적이고 안정적인 상태가 유지되어야 한다. 쿠버네티스가 이러한 요구를 충족시키기 위해서 사용하는 것이 이다. 라이브니스 프로브는 파드에 의해 컨테이너를 동작시키고 동작중인 컨테이너의 상태를 주기적으로 모니터링한다. 파드에서 오류가 발생하면 해당 컨테이너를 재시작시…","fields":{"slug":"/kubernetes-controller/"},"frontmatter":{"categories":"Kubernetes","title":"[Kubernetes] - 쿠버네티스의 컨트롤러","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubernetes-label/"}},"previous":{"fields":{"slug":"/kubernetes-service/"}}},{"node":{"id":"3e819d0c-cf4a-5cab-84f4-1a08c1b7532d","excerpt":"머리말   이전 포스트에서는 기본적인 POD의 정의 및 생성에 대해서 알아봤다 이번 포스트에서는 POD를 더 효율적으로 관리하기 위한 레이블과 셀렉터에 대해서 알아보자 ✔ 레이블 레이블 은 파드와 같은 오브젝트에 첨부된 키와 값의 쌍이다. 레이블은 오브젝트의 특성을 식별하는 데 사용되어 사용자에게 중요하지만, 코어 시스템에 직접적인 의미는 없다. 레이블로 오브젝트의 하위 집합을 선택하고, 구성하는데 사용할 수 있다. 레이블은 오브젝트를 생성할 때에 붙이거나 생성 이후에 붙이거나 언제든지 수정이 가능하다. 오브젝트마다 키와 값으로 레이블을 정의할 수 있다. 오브젝트의 키는 고유한 값이어야 한다. 레이블은 UI와 CLI에…","fields":{"slug":"/kubernetes-label/"},"frontmatter":{"categories":"Kubernetes","title":"[Kubernetes] - 쿠버네티스의 레이블 및 셀렉터","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubernetes-pod/"}},"previous":{"fields":{"slug":"/kubernetes-controller/"}}},{"node":{"id":"64fbddd3-aaf7-50d0-a98f-5a7dff2bb244","excerpt":"머리말   이제 기본적인 개념과 kubectl 명령어까지 모두 알아봤다!! 이번 포스트부터는 진짜 실습을 들어가보자!! 우선 컨포넌트 포스트에서 설명했던 것들부터 시작하겠습니다!! ✔ POD?! 은 쿠버네티스 APP의 기본 실행 단위인데 쉽게 말해 쿠버네티스 워크로드에서 관리할 수 있는 가장 작은 단위가 파드입니다. 또한 배포 시 배포의 단위가 되기도 합니다. 파드는 하나 이상의 ‘동작중인’ 컨테이너를 포함하고 있는 오브젝트이고 하나의 파드에는 하나의 컨테이너를 배치하는 것이 기본입니다. 쿠버네티스 클러스터 내에서 파드는 주로 두 가지 방법으로 사용되죠. 스크린샷, 2020-09-16 15-29-48 Pod 모델 종류…","fields":{"slug":"/kubernetes-pod/"},"frontmatter":{"categories":"Kubernetes","title":"[Kubernetes] - 쿠버네티스의 POD?","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubernetes-command/"}},"previous":{"fields":{"slug":"/kubernetes-label/"}}},{"node":{"id":"b1a77332-6f87-5631-8103-2ad76c5e959f","excerpt":"머리말   이제 실습전 알아야 할 이론적인 부분들은 모두 포스팅 했습니다. 이번 포스트 부터 이후 포스트까지는 실습에 대한 내용들을 다룰 것입니다.     ✔ kubectl 명령어 쿠버네티스는  이라는 CLI 명령어를 통해서 쿠버네티스 및 클러스터 관리, 디버그 및 트러블 슈팅들을 할 수 있습니다. 자세한 내용을 알고 싶으면 kubectl 치트 시트를 참고하세요 는 기본적으로 아래와 같은 형태로 커맨드 라인에 입력하여 사용할 수 있습니다.  : 자원에 실행하려는 동작 create : 생성 ge` : 정보 가져오기 describe : 자세한 상태 정보 delete : 삭제    : 자원 타입 pod : Pod servi…","fields":{"slug":"/kubernetes-command/"},"frontmatter":{"categories":"Kubernetes","title":"[Kubernetes] - 쿠버네티스의 명령어 정리","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubernetes-architecture/"}},"previous":{"fields":{"slug":"/kubernetes-pod/"}}},{"node":{"id":"85b868eb-f8db-5212-ac16-bf9c82a6dddc","excerpt":"머리말  이전 포스트에서 쿠버네티스의 기본적인 컴포넌트 개념에 대해서 정리 해보았습니다. 이번에는 실습에 들어가기 앞서 아키텍쳐의 개념을 잡고 들어가기위해서 조대협님의 블로그 글을 참고하여 제 식대로 다시 정리 해보았습니다.   참고  :  조대협님 블로그 ✔ 아키텍쳐 개념정리 이전 포스트에서 쿠버네티스에 대한 개념 이해가 끝났으면 이제 쿠버네티스가 실제로 어떤 구조로 구현이 되어 있는지 아키텍쳐를 살펴보도록 하자. 아키텍쳐를 이용하면 동작 원리를 이해할 수 있기 때문에 쿠버네티스의 사용법을 이해하는데 도움이 된다. (kubernetes의 아키텍쳐) 스크린샷, 2020-09-16 11-45-17 ✌ 마스터와 노드 쿠버…","fields":{"slug":"/kubernetes-architecture/"},"frontmatter":{"categories":"Kubernetes","title":"[Kubernetes] - 쿠버네티스의 아키텍쳐","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubernetes-componant/"}},"previous":{"fields":{"slug":"/kubernetes-command/"}}},{"node":{"id":"f7b5524d-5df4-5975-baf4-be92f59dc22a","excerpt":"머리말   이전 포스트에서 드디어 GCP 인스턴스 기반의 k8s 클러스터 환경을 구축했습니다. 이번 포스트에서는 이번에 간단하게 포스트해서 정리했지만 실제 실습을 들어가기전 전체적인 개념에 대해서 다시 한번 정리하고 실습에 들어가야 할 것 같아서 조대협님의 블로그 글을 참고하여 내 식대로 다시 정리해보았다.   참고  :  조대협님 블로그 ✔ 개념정리 오브젝트 쿠버네티스를 이해하기 위해 가장 중요한 부분이 이다. 가장 가 되는  를 하고 하는 추가적인 기능을 가진  이러한 오브젝트의 이외에 추가정보인 들로 구성이 된다고 보면 된다.  오브젝트 스펙 (Object Spec) 오브젝트들은 모두 오브젝트의 특성 (설정정보)…","fields":{"slug":"/kubernetes-componant/"},"frontmatter":{"categories":"Kubernetes","title":"[Kubernetes] - 쿠버네티스의 컴포넌트","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubernetes-error1/"}},"previous":{"fields":{"slug":"/kubernetes-architecture/"}}},{"node":{"id":"b10caab8-cb55-5a70-84d6-bbb3cda063ef","excerpt":"✔ 발생 에러 상황 : kubespray로  명령어 구동 중 “assertion: groups.etcd | length is not divisibleby 2” 에러 발생” kubespray로  명령어 진행 시  에러가 발생할 수 있습니다. 스크린샷, 2020-08-21 10-10-28 캡쳐 이미지를 보면 특정노드는 성공했는데 특정노드는 실패했습니다 ✌ 원인 해당 에러는 아래 이미지와 같이  파일에 지정한 가 인 경우에 발생합니다. 스크린샷, 2020-08-21 10-12-18 kubespray/roles/kubernetes/preinstall/tasks/0020-verify-settings.yml 코드 확인 스크린샷,…","fields":{"slug":"/kubernetes-error1/"},"frontmatter":{"categories":"Kubernetes Error-Report","title":"[Error Report] - length is not divisibleby 2","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubernetes-kubeadm/"}},"previous":{"fields":{"slug":"/kubernetes-componant/"}}},{"node":{"id":"02ef2350-d7b7-5949-8669-9c9f4ed8580e","excerpt":"머리말   이전 포스트에서는 kubespay 자동화 툴을 사용해서 K8S 클러스터를 구축 했었습니다. 이번 포스트에서는 kubeadm을 이용해서 K8S 클러스터를 구축하는 방법에 대해서 포스트했습니다.   ✔ 사전준비 사전 준비의 경우 kubespray와 동일하게 GCP VM Instance에서 구성했기 때문에 방법이 동일합니다. 사전 준비는 이전 포스트인 kubespray를 확인해주세요. ✌ 쿠버네티스  설치하기 kubeadm 본격적인 설치 과정입니다.\n은  과  을  때문에 직접 설치해야 합니다.   전체 Server에 아래 를 추가합니다.   CENSOS yum update 도커 설치 전 사전 세팅  도커 저장소…","fields":{"slug":"/kubernetes-kubeadm/"},"frontmatter":{"categories":"Kubernetes GCP","title":"[Kubernetes] - Kubernetes 환경구성 on GCP Using kubeadm","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubetnetes-kubespary/"}},"previous":{"fields":{"slug":"/kubernetes-error1/"}}},{"node":{"id":"22b18939-b966-58ca-8408-1ddb10464062","excerpt":"머리말   쿠버네티스 환경을 구성하는 방법은 여러가지가 존재합니다 서버를 준비하는 방법은 또한 여러 가지가 있겠지만 가장 쉽게 생각해볼 수 있는 건  와  를 이용한 로 구성하는 것 입니다. 하지만 이번 포스트에서는 GCP STUDY + Kubernetes STUDY 겸 GCP로 진행했습니다. 사실 GCP 무료 크레딧이 아까운 마음이 더 크긴 했습니다. ✔ 사전준비 쿠버네티스는 3개월 마다 새로운 버전이 릴리즈 되고 해당 버전은 9개월 동안 버그와 보안 이슈를 수정하는 패치가 이루어 집니다.   이번 포스트에 구성할 노드는 와 로 총 의 서버가 필요합니다. 노드의 최소 요구 사양은 다음과 같습니다. 항목 사양 CPU …","fields":{"slug":"/kubetnetes-kubespary/"},"frontmatter":{"categories":"Kubernetes GCP","title":"[Kubernetes] - Kubernetes 환경구성 on GCP Using KubeSpary","date":"June 29, 2021"}},"next":{"fields":{"slug":"/kubernetes01/"}},"previous":{"fields":{"slug":"/kubernetes-kubeadm/"}}},{"node":{"id":"5355c631-7fe6-5aa1-b88f-9fb739c067bf","excerpt":"머리말    쿠버네티스… 이름만 많이 들어보고 많이 사용하는 기술이라고만 들었다.  하지만 온프레미스 경험만 가지고 있는 나는 아무것도 알지 못한다.  아마도 포스트를 작성하면서 조금씩 익숙해질 것이라고 생각한다.  마지막 포스트를 쓸 때 쯤에는 초급정도의 스킬은 가지고 있었으면 싶다.    참고 블로그 : https://subicura.com/2019/05/19/kubernetes-basic-1.html ✔ 쿠버네티스란??  쿠버네티스는 컨테이너를 쉽고 빠르게 해주는 오픈소스 플랫폼입니다.   보통 k8s 또는 큐브 (kube) 라고 줄여서 부릅니다. 현재는 단순한 컨테이너 플랫폼이 아닌 , 을 지향하고 컨테이너로 …","fields":{"slug":"/kubernetes01/"},"frontmatter":{"categories":"Kubernetes","title":"[Kubernetes] - 쿠버네티스란?","date":"June 29, 2021"}},"next":{"fields":{"slug":"/linux-shellscript/"}},"previous":{"fields":{"slug":"/kubetnetes-kubespary/"}}}]}},"staticQueryHashes":["1073350324","2938748437"]}