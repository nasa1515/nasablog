{"componentChunkName":"component---src-templates-blog-template-js","path":"/gcp-semi/","result":{"data":{"cur":{"id":"2c6aaf2e-afa2-5601-8840-df15a9f171b6","html":"<p>머리말  </p>\n<p> GCP를 공부하기 위해 모인 사람들로 구성해서 간단한 토이 프로젝트를 진행해보았다.<br>\n리눅스를 처음 공부하듯 GCP에서도 웹페이지를 띄우는 프로젝트를 우선 진행해보았다.  </p>\n<hr>\n<h2 id=\"-gcp를-사용한-웹-사이트-구축-토이-프로젝트\" style=\"position:relative;\"><a href=\"#-gcp%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%9B%B9-%EC%82%AC%EC%9D%B4%ED%8A%B8-%EA%B5%AC%EC%B6%95-%ED%86%A0%EC%9D%B4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\" gcp를 사용한 웹 사이트 구축 토이 프로젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ GCP를 사용한 웹 사이트 구축 토이 프로젝트</h2>\n<p>사용기술 [GCP]</p>\n<ul>\n<li>인스턴스</li>\n<li>SQL (VPC)</li>\n<li>로드밸런싱</li>\n<li>오토스케일링</li>\n<li>HTTP/APACHE/MYSQL/Wordpress</li>\n<li>DNS </li>\n</ul>\n<br/>\n<h3 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h3>\n<p>  오토스케일링은 클라우드 환경의 가장 기본적 요소들 중에 하나입니다.<br>\n트래픽 집중에 따라 서버, 스토리지 등의 자원이 자동으로 확장하면서  안정적인 서비스를 유지 할 수 있습니다.<br>\n서버의 개수가 늘어나는 것을 <code class=\"language-text\">스케일 아웃 (scale out)</code>  줄어드는 것을 <code class=\"language-text\">스케일 인 (scale in)</code>이라고 한다.<br>\n오토스케일링을 통해 트래픽에 따라 서버의 대수 조절을 자동화, 효율적으로 웹서버를 운영할 수 있는 프로젝트를 진행해보았습니다.  </p>\n<br/>\n<h3 id=\"architecture\" style=\"position:relative;\"><a href=\"#architecture\" aria-label=\"architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Architecture</h3>\n<p>  오토스케일링이 가능한 웹서버를 구축하기 위해서 다음과 같이 구성했습니다.<br>\n먼저, 외부의 요청을 받을 글로벌 로드 밸런서를 구축했고 웹서버가 설치된 인스턴스 그룹이 필요합니다.<br>\n실제로 서비스 할 VM 인스턴스는 인스턴스 그룹의 설정 정보 (CPU 사용량 등 모니터링 메트릭)에 따라<br>\n인스턴스 템플릿을 통해 자동으로 생성이 되거나 삭제가 됩니다.  </p>\n<p>  프로젝트 서비스 아키텍처</p>\n<p>  <img src=\"https://user-images.githubusercontent.com/64260883/89745329-0ccc2b00-daee-11ea-9c38-212150528a9b.png\" alt=\"아키\"></p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># Client : 웹서버에 접속하는 유저들  </span>\n<span class=\"token preprocessor property\"># DNS : 특정 LB의 주소로 DNS를 구축해 로드밸런싱 될 수 있도록 구성  </span>\n<span class=\"token preprocessor property\"># LB : 특정 웹서버의 CPU 사용량이 일정 수준을 넘어가면 오토스케일링 진행.  </span>\n<span class=\"token preprocessor property\"># VPN : 특정 호스트만 관리자 웹서버에 접속하기 위한 보안 설정</span></code></pre></div>\n<hr>\n<h2 id=\"-서버-구축-순서\" style=\"position:relative;\"><a href=\"#-%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95-%EC%88%9C%EC%84%9C\" aria-label=\" 서버 구축 순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✌ 서버 구축 순서</h2>\n<ol>\n<li>인스턴스 템플릿을 만들기 위해 VM 인스턴스를 생성합니다.  </li>\n<li>생성된 VM 인스턴스에 웹서버를 설치합니다.  </li>\n<li>웹서버에 GCP SQL을 이용해 DB를 공유시킵니다.  </li>\n<li>Wordpress 설정을 진행합니다.</li>\n<li>웹서버가 설치된 인스턴스를 스냅샷으로 만듭니다.</li>\n<li>생성된 스냅샷을 가지고 이미지를 만듭니다.</li>\n<li>이미지를 가지고 인스턴스 템플릿을 생성합니다.</li>\n<li>인스턴스 템플릿으로 인스턴스 그룹을 생성합니다.</li>\n<li>로드 밸런서를 적용해 웹서버에 들어오는 트래픽을 부하분산 시킵니다.</li>\n<li>DNS 서버를 위한 인스턴스를 하나 생성합니다.</li>\n<li>DNS 를 위한 방화벽 설정 을 추가합니다.</li>\n</ol>\n<hr>\n<h2 id=\"-서버-구축\" style=\"position:relative;\"><a href=\"#-%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95\" aria-label=\" 서버 구축 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👏 서버 구축</h2>\n<ol>\n<li>\n<p>VM Instance 생성  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89241265-5a9dea80-d639-11ea-8daf-15a819085531.png\" alt=\"스크린샷, 2020-08-04 10-00-11\"></p>\n<p>GCP 콘솔에서 [Compute Engine]에서 [VM 인스턴스]를 선택 후 [인스턴스 만들기]를 클릭해서 인스턴스를 생성합니다.<br>\nVM 인스턴스는 아래와 같은 조건으로 생성합니다.      </p>\n<ul>\n<li>CLOUD SQL API를 이용할 것이기 때문에 API 허용 설정을 해줍니다.  </li>\n<li>VPC를 통해서 직접 DB를 연결 할 것이기 때문에 외부IP를 고정으로 예약합니다.  </li>\n<li>나머지 값들은 기본으로 둡니다.</li>\n</ul>\n</li>\n</ol>\n<br/>\n<ol start=\"2\">\n<li>\n<p>WEB SERVER 구성  </p>\n<p>[LAMP 구성Permalink]</p>\n<ul>\n<li>Wordpress를 위한 Apache, MySQL(MariaDB), PHP를 설치합니다</li>\n</ul>\n<br/>\n</li>\n</ol>\n<h3 id=\"apache-설치\" style=\"position:relative;\"><a href=\"#apache-%EC%84%A4%EC%B9%98\" aria-label=\"apache 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apache 설치</h3>\n<p>  [아래 명령으로 업데이트 및 httpd 설치, 설정을 진행합니다]</p>\n<p>   <img src=\"https://user-images.githubusercontent.com/64260883/89242215-f7618780-d63b-11ea-8c85-aa504d02ffff.png\" alt=\"스크린샷, 2020-08-04 10-19-08\"></p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">yum update <span class=\"token operator\">-</span>y\nyum install <span class=\"token operator\">-</span>y httpd\nsystemctl start httpd\nsystemctl enable httpd\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>http <span class=\"token operator\">--</span>permanent\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token operator\">/</span>tcp <span class=\"token operator\">--</span>pernmanent</code></pre></div>\n<br/>\n<hr>\n<h2 id=\"-db-구축\" style=\"position:relative;\"><a href=\"#-db-%EA%B5%AC%EC%B6%95\" aria-label=\" db 구축 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🙌 DB 구축</h2>\n<p>  [VM 인스턴스에 MariaDB를 설치합니다]</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># yum install mariadb mariadb-server</span></code></pre></div>\n<ul>\n<li>\n<p>API 설정</p>\n<p>[GCP의 SQL을 Web Server 인스턴스에 연동해 구성할 것입니다] 대쉬보드의 [API 및 서비스] - 라이브러리 탭에서<br>\n<code class=\"language-text\">CLOUD SQL ADMIN API</code>를 설치합니다.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89242651-03017e00-d63d-11ea-972b-52f85721a5c2.png\" alt=\"스크린샷, 2020-08-04 10-25-09\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>CLOUD SQL 생성  </p>\n<p>[MySQL, 리전을 인스턴스와 동일한 SQL 인스턴스를 생성]  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89243033-e580e400-d63d-11ea-8ec0-be652ec77ae5.png\" alt=\"스크린샷, 2020-08-04 10-33-03\"></p>\n<br/>\n<p>[VPC로 인스턴트에 DB를 직접 연결 할 것이라 IP를 추가해줍니다]  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89242922-a6529300-d63d-11ea-9b6d-8550cda05f52.png\" alt=\"스크린샷, 2020-08-04 10-31-18\"></p>\n<br/>\n<p>[인스턴트에서 연결 후 사용할 DB를 생성해줍니다.]  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89245204-49f27200-d643-11ea-96d2-9c3dd9a33b90.png\" alt=\"스크린샷, 2020-08-04 11-11-39\"></p>\n<ul>\n<li>\n<p>구성 정보</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span><span class=\"token class-name\">DB</span> Name <span class=\"token punctuation\">:</span> nasa1415<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token class-name\">DB</span> IP <span class=\"token punctuation\">:</span> <span class=\"token number\">34.64</span><span class=\"token number\">.187</span><span class=\"token number\">.52</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token class-name\">WEB</span> SERVER <span class=\"token punctuation\">:</span> <span class=\"token number\">35.216</span><span class=\"token number\">.67</span><span class=\"token number\">.219</span> <span class=\"token punctuation\">(</span>CENTOS <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>Region <span class=\"token punctuation\">:</span> seoul<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"php-설치\" style=\"position:relative;\"><a href=\"#php-%EC%84%A4%EC%B9%98\" aria-label=\"php 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PHP 설치</h3>\n<p>[다음 명령으로 PHP를 설치합니다]</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">yum install epel<span class=\"token operator\">-</span>release\nrpm <span class=\"token operator\">-</span><span class=\"token class-name\">Uvh</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>mirror<span class=\"token punctuation\">.</span>webtatic<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>yum<span class=\"token operator\">/</span>el7<span class=\"token operator\">/</span>webtatic<span class=\"token operator\">-</span>release<span class=\"token punctuation\">.</span>rpm\nyum install mod_php72w php72w<span class=\"token operator\">-</span>cli\nyum install php72w<span class=\"token operator\">-</span>bcmath php72w<span class=\"token operator\">-</span>gd php72w<span class=\"token operator\">-</span>mbstring php72w<span class=\"token operator\">-</span>mysqlnd php72w<span class=\"token operator\">-</span>pear php72w<span class=\"token operator\">-</span>xml php72w<span class=\"token operator\">-</span>xmlrpc php\nphp <span class=\"token operator\">-</span>v</code></pre></div>\n<br/>\n<p>[PHP가 7.2 버전으로 설치되었는지 확인합니다.]  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89245659-427f9880-d644-11ea-91ee-439eff531fd2.png\" alt=\"스크린샷, 2020-08-04 11-18-39\"></p>\n<hr>\n<h3 id=\"wordpress-설치\" style=\"position:relative;\"><a href=\"#wordpress-%EC%84%A4%EC%B9%98\" aria-label=\"wordpress 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wordpress 설치</h3>\n<p>[다음 명령으로 Wordpress를 설치합니다]  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89245906-e23d2680-d644-11ea-8509-173f27f49792.png\" alt=\"스크린샷, 2020-08-04 11-23-04\"></p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">yum install <span class=\"token operator\">-</span>y wget\nwget <span class=\"token string\">\"http://wordpress.org/latest.tar.gz\"</span>\ntar <span class=\"token operator\">-</span>xvzf latest<span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">.</span>gz <span class=\"token operator\">-</span>C <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>www<span class=\"token operator\">/</span>html\nchown <span class=\"token operator\">-</span><span class=\"token class-name\">R</span> apache<span class=\"token punctuation\">:</span> <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>www<span class=\"token operator\">/</span>html<span class=\"token operator\">/</span>wordpress</code></pre></div>\n<br/>\n<p>웹페이지 설정 - DB 연동  </p>\n<p>지정 DB NAME], [GCP SQL IP] 등을 입력 해 연동.</p>\n<p>  <img src=\"https://user-images.githubusercontent.com/64260883/89596888-73a1d800-d893-11ea-99c6-a3b914465be1.png\" alt=\"aaa\"></p>\n<br/>\n<p>[연동 위해 인스턴트의 SELINUX 설정이 필요합니다]<br>\n[본 포스트에서는 종료하고 진행하였음]  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89598140-055f1480-d897-11ea-9bef-0308dd5ef437.png\" alt=\"sel\"></p>\n<br/>\n<p>[웹 설정 완료 후 홈페이지가 정상 동작 확인]\n<img src=\"https://user-images.githubusercontent.com/64260883/89598279-61c23400-d897-11ea-839f-d184557dfec8.png\" alt=\"aaaaaa\"></p>\n<br/>\n<p>[홈페이지 동작 table이 생성, DB 정상 연동 확인]  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89598402-af3ea100-d897-11ea-9ffe-ca9986c66165.png\" alt=\"addddddddddddddddddd\"></p>\n<hr>\n<h2 id=\"-dns-구성\" style=\"position:relative;\"><a href=\"#-dns-%EA%B5%AC%EC%84%B1\" aria-label=\" dns 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>😃 DNS 구성</h2>\n<p>  실제 도메인을 구매하지 못해 내부 통신으로 DNS를 구축, 웹사이트에 매칭 시켜주도록 설정하였음.  </p>\n<ul>\n<li>\n<p>[인스턴스 만들기]를 클릭해서 인스턴스를 생성합니다.   </p>\n<p>WEBServer와 동일하게 구성하였음.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89745943-ca0c5200-daf1-11ea-8ac0-29a9f9fb7826.png\" alt=\"dbs\"></p>\n<br/>\n<p>GCP 기반의 서버이다 보니 <code class=\"language-text\">DNS 네트워크를 내부로 고정</code>  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89746273-cb3e7e80-daf3-11ea-8bc8-5c5d7fb80f46.png\" alt=\"ip\"></p>\n</li>\n</ul>\n<hr>\n<h3 id=\"dns-server-구축\" style=\"position:relative;\"><a href=\"#dns-server-%EA%B5%AC%EC%B6%95\" aria-label=\"dns server 구축 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DNS SERVER 구축</h3>\n<ul>\n<li>\n<p>기본적인 DNS 파일 설치 및 환경구성을 위한 명령.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">yum <span class=\"token operator\">-</span>y install bind\nsetenforce <span class=\"token number\">0</span>\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>dns  <span class=\"token operator\">--</span>permanent \nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token operator\">/</span>tcp <span class=\"token operator\">--</span>permanent \nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>reload </code></pre></div>\n</li>\n</ul>\n  <br/>\n<ul>\n<li>\n<p>네트워크 환경 변경</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">내부 IP로만 통신 할 예정이라 STATIC하게 설정 변경<span class=\"token punctuation\">.</span>\nnmcli connection modify eth0 ipv4<span class=\"token punctuation\">.</span>method manual \nnmcli connection modify eth0 ipv4<span class=\"token punctuation\">.</span>addresses <span class=\"token number\">10.178</span><span class=\"token number\">.0</span><span class=\"token number\">.16</span><span class=\"token operator\">/</span><span class=\"token number\">32</span>\nnmcli connection modify eth0 ipv4<span class=\"token punctuation\">.</span>gateway <span class=\"token number\">10.178</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>\nnmcli connection modify eth0 ipv4<span class=\"token punctuation\">.</span>method manual \nnmcli connection modify eth0 ipv4<span class=\"token punctuation\">.</span>dns <span class=\"token number\">10.178</span><span class=\"token number\">.0</span><span class=\"token number\">.16</span></code></pre></div>\n</li>\n<li>\n<p>ZONE 파일 내용 확인<br>\n[로드밸런서 아이피를 삽입]  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89758291-68b0a700-db22-11ea-99e6-6276c529d9c2.png\" alt=\"aaaaaaaaa\"></p>\n<br/>\n</li>\n<li>\n<p>정상적으로 내부 도메인 통신이 되는지 확인.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89758746-787cbb00-db23-11ea-964c-26cccecb2df4.png\" alt=\"ㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜ\"></p>\n<br/>\n</li>\n<li>\n<p>GCP는 외부 연결이 가능하게 방화벽 설정.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89759290-cba33d80-db24-11ea-9a3f-0b07e3b11269.png\" alt=\"스크린샷, 2020-08-10 16-16-02\"></p>\n</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"🤞-오토스케일링-구축\" style=\"position:relative;\"><a href=\"#%F0%9F%A4%9E-%EC%98%A4%ED%86%A0%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81-%EA%B5%AC%EC%B6%95\" aria-label=\"🤞 오토스케일링 구축 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤞 오토스케일링 구축</h2>\n<ul>\n<li>\n<p>웹서버 종료 후 스냅샷 생성  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89753240-6f372280-db12-11ea-8d33-bf01ef7fe653.png\" alt=\"snap\"></p>\n<br/>\n</li>\n<li>\n<p>스냅샷으로 이미지 생성  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89753351-e8cf1080-db12-11ea-9706-dd36393456c9.png\" alt=\"ima\"></p>\n<br/>\n</li>\n<li>\n<p>이미지로 인스턴트 템플릿 생성<br>\n[인스턴트 생성과 같지만 생성한 이미지 선택.]  </p>\n<p>  <img src=\"https://user-images.githubusercontent.com/64260883/89753520-96422400-db13-11ea-82f4-f1f9eea4246e.png\" alt=\"aaaaaa\"></p>\n<br/>\n</li>\n<li>\n<p>인스턴트 템플릿으로 그룹 생성<br>\n[인스턴트 템플릿 선택 후 자동확장 모드 설정]<br>\n[자동 확장 모드 - 오토스케일링 기능]\n[측정 항목 - 오토스케일링 범위]  </p>\n<p>  <img src=\"https://user-images.githubusercontent.com/64260883/89754132-ac50e400-db15-11ea-9a0f-1009707f93aa.png\" alt=\"aqweqqweqweqw\">  </p>\n  <br/>\n<p>[대기 시간 등 세부 설정 또한 가능하다.]  </p>\n<p>  <img src=\"https://user-images.githubusercontent.com/64260883/89755145-5a11c200-db19-11ea-9794-22558669ce85.png\" alt=\"ㅁ123123123123\"></p>\n  <br/>\n<p>[추가적으로 자동복구 상태 확인을 생성한다.]  </p>\n<p>  <img src=\"https://user-images.githubusercontent.com/64260883/89755224-9fce8a80-db19-11ea-8a99-062438ea049d.png\" alt=\"1111111111111111\"></p>\n  <br/>\n<p>[정상적으로 그룹이 생성되었다면 아래와 같이 그룹 별 인스턴트가 생성]  </p>\n<p>  <img src=\"https://user-images.githubusercontent.com/64260883/89755723-5da64880-db1b-11ea-87a6-38d3cf9afde4.png\" alt=\"44444444444\"></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"-로드밸런서-구축\" style=\"position:relative;\"><a href=\"#-%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%84%9C-%EA%B5%AC%EC%B6%95\" aria-label=\" 로드밸런서 구축 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👌 로드밸런서 구축</h2>\n<ul>\n<li>\n<p>로드밸런서 생성<br>\n<code class=\"language-text\">[네트워크 서비스 - 부하분산 - 만들기]</code><br>\n<code class=\"language-text\">[웹서버의 트래픽을 부하분산을 위해 http 선택]</code>  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89755826-b544b400-db1b-11ea-9643-1e5a4a37df9a.png\" alt=\"5555555555555\">  </p>\n<br/>\n</li>\n<li>\n<p>백앤드 서비스 생성  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89755992-356b1980-db1c-11ea-8cf4-ba58d148c84a.png\" alt=\"bbab\"></p>\n<br/>\n<p>[추가적을 상태확인에서 아까 만든 상태확인을 사용한다]  </p>\n<p>  <img src=\"https://user-images.githubusercontent.com/64260883/89756099-7bc07880-db1c-11ea-9c87-a7df902e6fee.png\" alt=\"xxxxxxxxxxxx\"></p>\n<br/>\n</li>\n<li>\n<p>프론트앤드 서비스 생성  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89756153-af030780-db1c-11ea-99b6-f86d61bccb06.png\" alt=\"vvvvvvvvvvvvv\"></p>\n<br/>\n</li>\n<li>\n<p>오토 스케일링 정상 동작 확인<br>\n<code class=\"language-text\">[스트레스 스크립트로 CPU과부화를 주었을 경우 동작 확인]</code>  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89756237-de197900-db1c-11ea-8a9c-fa6189cbead7.png\" alt=\"999999999999\"></p>\n<br/>\n</li>\n<li>\n<p>생성된 로드밸런서를 설정 및 IP를 확인한다<br>\n<code class=\"language-text\">[로드밸러서 IP를 사용해 DNS 부하분산을 위한.]</code>  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89756384-48321e00-db1d-11ea-98b2-80e0d496bc5f.png\" alt=\"ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ\"></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"서비스-동작-확인\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%8F%99%EC%9E%91-%ED%99%95%EC%9D%B8\" aria-label=\"서비스 동작 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>😉서비스 동작 확인</h2>\n<ul>\n<li>\n<p>웹사이트 정상 동작 확인<br>\n[임의로 워드프레스 기반으로 만든 웹페이지가 정상 동작]<br>\n[DNS의 경우 내부로 통신을 했기에 <code class=\"language-text\">DNS 공인IP를 외부서버에 추가</code>해줘야함]  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89759020-343dea80-db24-11ea-8a5e-63d4719a11af.png\" alt=\"스크린샷, 2020-08-10 16-11-44\"></p>\n<br/>\n</li>\n<li>\n<p>웹사이트 정상 동작 확인  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89759139-7404d200-db24-11ea-8bbf-1723e70f4521.png\" alt=\"스크린샷, 2020-08-10 16-13-33\"></p>\n<br/>\n</li>\n<li>\n<p>VPN 설정 후 정상 동작 확인  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89759221-a44c7080-db24-11ea-90f6-812e3ec63ec7.png\" alt=\"스크린샷, 2020-08-10 16-14-51\"></p>\n</li>\n<li>\n<p>로드밸런싱 동작 확인  </p>\n<p>[로드밸런싱 설정 전 트래픽]  </p>\n<p>  <img src=\"https://user-images.githubusercontent.com/64260883/89761607-b846a100-db29-11ea-9a06-c104b4efccc4.png\" alt=\"스크린샷, 2020-08-10 16-51-16\"></p>\n<p>[로드밸런싱 설정 후 트래픽]  </p>\n<p>  <img src=\"https://user-images.githubusercontent.com/64260883/89761632-c72d5380-db29-11ea-9a5c-409d182ac80b.png\" alt=\"스크린샷, 2020-08-10 16-51-42\">  </p>\n</li>\n</ul>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-gcp%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%9B%B9-%EC%82%AC%EC%9D%B4%ED%8A%B8-%EA%B5%AC%EC%B6%95-%ED%86%A0%EC%9D%B4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\">✔ GCP를 사용한 웹 사이트 구축 토이 프로젝트</a></p>\n<ul>\n<li><a href=\"#%EA%B0%9C%EC%9A%94\">개요</a></li>\n<li><a href=\"#architecture\">Architecture</a></li>\n</ul>\n</li>\n<li><a href=\"#-%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95-%EC%88%9C%EC%84%9C\">✌ 서버 구축 순서</a></li>\n<li>\n<p><a href=\"#-%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95\">👏 서버 구축</a></p>\n<ul>\n<li><a href=\"#apache-%EC%84%A4%EC%B9%98\">Apache 설치</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-db-%EA%B5%AC%EC%B6%95\">🙌 DB 구축</a></p>\n<ul>\n<li><a href=\"#php-%EC%84%A4%EC%B9%98\">PHP 설치</a></li>\n<li><a href=\"#wordpress-%EC%84%A4%EC%B9%98\">Wordpress 설치</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-dns-%EA%B5%AC%EC%84%B1\">😃 DNS 구성</a></p>\n<ul>\n<li><a href=\"#dns-server-%EA%B5%AC%EC%B6%95\">DNS SERVER 구축</a></li>\n</ul>\n</li>\n<li><a href=\"#%F0%9F%A4%9E-%EC%98%A4%ED%86%A0%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81-%EA%B5%AC%EC%B6%95\">🤞 오토스케일링 구축</a></li>\n<li><a href=\"#-%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%84%9C-%EA%B5%AC%EC%B6%95\">👌 로드밸런서 구축</a></li>\n<li><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%8F%99%EC%9E%91-%ED%99%95%EC%9D%B8\">😉서비스 동작 확인</a></li>\n</ul>\n</div>","excerpt":"머리말    GCP를 공부하기 위해 모인 사람들로 구성해서 간단한 토이 프로젝트를 진행해보았다.  리눅스를 처음 공부하듯 GCP에서도 웹페이지를 띄우는 프로젝트를 우선 진행해보았다.   ✔ GCP를 사용한 웹 사이트 구축 토이 프로젝트 사용기술 GCP 인스턴스 SQL (VPC) 로드밸런싱 오토스케일링 HTTP/APACHE/MYSQL/Wordpress DNS  개요   오토스케일링은 클라우드 환경의 가장 기본적 요소들 중에 하나입니다.   트래픽 집중에 따라 서버, 스토리지 등의 자원이 자동으로 확장하면서  안정적인 서비스를 유지 할 수 있습니다.   서버의 개수가 늘어나는 것을   줄어드는 것을 이라고 한다.   오토…","frontmatter":{"date":"June 25, 2021","title":"[GCP] - wordpress 생성해보기","categories":"GCP","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/gcp-semi/"}},"next":{"id":"b2d897ea-0b3a-513b-94ba-e1357a3a976b","html":"<p>머리말  </p>\n<p>GCP를 공부를 시작하면서 기존의 IDC 지식들이 너무 과거의 것이라는 것을 알 수 있었다.<br>\n새로운 것들을 받아드리는 것이 빠르지 못하면 뒤쳐질 수 있다는 걸 깨달은 포스트이다.</p>\n<hr>\n<h2 id=\"-gcp-sqlbucket-이란-\" style=\"position:relative;\"><a href=\"#-gcp-sqlbucket-%EC%9D%B4%EB%9E%80-\" aria-label=\" gcp sqlbucket 이란  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ “GCP SQL/BUCKET” 이란 ?</h2>\n<ul>\n<li>GCP SQL<br>\n평소에 서버내에서 설치/구성해서 사용해왔었던 MYSQL/MARIA 등을 구글 플랫폼 자체에서 활용/적용 할 수 있는 기능.<br>\n즉 원격으로 사용 할 수 있는 RDB 라고 생각하면 된다.  </li>\n</ul>\n<br/>\n<ul>\n<li>GCP BUCKET<br>\n보통 스토리지는 서버/PC에 다이렉트하게 붙여서 이용해왔다. NFS/ISCSI 등으로 원격지에서 접속이 가능한 기능도 있지만<br>\nGCP에서는 BUCKET이라는 형태의 스토리지로 다이렉트하게도, 원격스럽게도 연결 할 수 있는 스토리지 기능을 제공한다.  </li>\n</ul>\n<hr>\n<h2 id=\"-gcp-api-설치\" style=\"position:relative;\"><a href=\"#-gcp-api-%EC%84%A4%EC%B9%98\" aria-label=\" gcp api 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✌ GCP API 설치</h2>\n<ul>\n<li>CLOUD API 설치<br>\nAPI의 경우 GCP내에서 제공하는 API로 따로 설정이 필요없이 다운로드 받아서 손쉽게 서비스들을 이용 할 수 있다.</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>API 및 서비스 - 라이브러리 탭으로 이동하여 API를 설치합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89507826-04cb6d00-d808-11ea-944d-5804796afe1b.png\" alt=\"ap\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>설치 후 구동을 시켜주고 정상 구동 중인지 확인.</p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89508151-760b2000-d808-11ea-8f77-3fb4e97f4000.png\" alt=\"adddddd\"></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"-gcp-sql-생성-및-vpc-연결\" style=\"position:relative;\"><a href=\"#-gcp-sql-%EC%83%9D%EC%84%B1-%EB%B0%8F-vpc-%EC%97%B0%EA%B2%B0\" aria-label=\" gcp sql 생성 및 vpc 연결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍 GCP SQL 생성 및 VPC 연결</h2>\n<p>웹페이지로 가서 SQL을 생성해보겠습니다.</p>\n<ul>\n<li>\n<p>“저장소 - SQL” 을 클릭합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89395022-c0789800-d747-11ea-9407-bd20664c288f.png\" alt=\"99\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p><code class=\"language-text\">\"인스턴스 만들기\"</code> 선택 후 DB를 생성합니다. DB 종류의 경우 MYSQL,POSTGRE 등 선택이 가능합니다.<br>\n<code class=\"language-text\">\"구성 옵션 표시\"</code> 탭에서 세부적인 설정도 가능합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89395485-57ddeb00-d748-11ea-8e06-ccea22afba62.png\" alt=\"4343\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>생성이 완료된 SQL는 웹에서 유저나, DB생성이 가능하다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89395401-3bda4980-d748-11ea-855c-21e9bd055e33.png\" alt=\"232\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>인스턴스와 직접적인 연결을 원한다면 인스턴트의 공인 IP를 SQL의 공개 네트워크에 추가해주면 <code class=\"language-text\">VPC로 연결</code>이 가능합니다.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89395730-adb29300-d748-11ea-840a-adc8e80c6fa6.png\" alt=\"44444\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>실제 인스턴스와 VPC로 TEST 해 본 결과 다음과 같이 정상구동 확인.  </p>\n<p>DB IP : \t34.64.187.52\n<img src=\"https://user-images.githubusercontent.com/64260883/89396359-6c6eb300-d749-11ea-8dbe-dc481fb7ecec.png\" alt=\"443332\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>인스턴트 내에서 연결 시 정상적으로 접속이 됨을 확인</p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89396657-ca02ff80-d749-11ea-84f2-68df5cb47b2d.png\" alt=\"db\"></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"-gcp-proxy로-db-연결\" style=\"position:relative;\"><a href=\"#-gcp-proxy%EB%A1%9C-db-%EC%97%B0%EA%B2%B0\" aria-label=\" gcp proxy로 db 연결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👏 GCP Proxy로 DB 연결</h2>\n<p>사전 준비 사항  </p>\n<ol>\n<li>새로운 인스턴스 생성 (Centos, API 허용, HTTP 허용)\n<img src=\"https://user-images.githubusercontent.com/64260883/89511268-a5239080-d80c-11ea-8b22-9b3e6340e6e6.png\" alt=\"VM\"></li>\n</ol>\n<br/>\n<ol start=\"2\">\n<li>\n<p>새로운 SQL DB 생성 (VPC IP 제외)\n<img src=\"https://user-images.githubusercontent.com/64260883/89511271-a654bd80-d80c-11ea-8496-9ac51f8b8e6a.png\" alt=\"DBBBB\"></p>\n<br/>\n<ul>\n<li>\n<p>프록시 연결을 위한 프록시 툴 다운</p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89512680-858d6780-d80e-11ea-9f46-c461c80f3112.png\" alt=\"capthe\"></p>\n<br/>\n<p>새로 생성된 Vm에는 Wget Tool이 설치가 안되어있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># yum install wget</span></code></pre></div>\n<br/>\n<p>구글에서 제공하는 해당 주소에서 툴 다운</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy</span></code></pre></div>\n<br/>\n<p>다운로드 받은 툴을 실행 가능하도록 실행 권한 설정, 프록시를 실행 가능하도록 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># chmod +x cloud_sql_proxy  </span></code></pre></div>\n</li>\n</ul>\n</li>\n</ol>\n<br/>\n<ol start=\"3\">\n<li>\n<p>서비스 계정 생성 (필수 아님)</p>\n<p>  프록시를 사용하여 연결할 때는 프록시가 Google Cloud Platform으로 인증해야 합니다.<br>\nCloud SDK 사용자 인증 정보를 사용하거나, 생성한 서비스 계정의 로컬 키 파일 경로를 프록시에 제공 가능한데 (프로덕션 인스턴스의 경우 권장됨)\nCloud SDK 사용자 인증 정보를 사용하는 경우에는 이 단계를 건너뛸 수 있습니다.</p>\n<p>  필요한 권한이 있는 서비스 계정을 만들려면 resourcemanager.projects.setIamPolicy 권한이 있어야 합니다.<br>\n권한 설정은 [프로젝트 소유자, 프로젝트 IAM 관리자, 조직 관리자] 역할에 포함되어 설정 할 수 있습니다.</p>\n<p>  서비스 계정을 사용하여 프록시 사용자 인증 정보를 제공하는 경우 충분한 권한을 부여해야 합니다.<br>\n세분화된 Identity Access and Management(IAM) 역할을 사용하여 Cloud SQL 권한을 관리하는 경우<br>\n서비스 계정에 cloudsql.instances.connect 권한이 있는 역할을 부여해야 합니다.<br>\n이 권한이 포함된 사전 정의된 Cloud SQL의 역할은 아래 세가지 입니다.</p>\n<ul>\n<li>Cloud SQL 클라이언트 - 보통 특정 계정에 해당 권한 설정 후 사용</li>\n<li>Cloud SQL 편집자</li>\n<li>Cloud SQL 관리자</li>\n</ul>\n<p>  하지만 현재 실습은 관리자 계정으로 진행하기 때문에 서비스 계정은 따로 만들어서 진행하지 않겠습니다.</p>\n</li>\n</ol>\n<br/>\n<ol start=\"4\">\n<li>\n<p>인스턴스 - DB 연결    </p>\n<ul>\n<li>\n<p>인스턴스 세부정보 페이지에서 인스턴스 연결 이름을 복사합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89513324-604d2900-d80f-11ea-9244-ff0c131a6b32.png\" alt=\"23232323322\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>프록시를 시작/연결<br>\n일반 실행 시 Ready for new connections 로그로 정상을 확인. 그 후 상태 확인을 위해 백그라운드로 실행시켰습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89514017-44965280-d810-11ea-813f-e3a3d5c8d709.png\" alt=\"88888888\">  </p>\n<br/>\n<p>사용할 수 있는 프록시 호출 문자열은 다음과 같습니다.</p>\n<p>Cloud SDK 인증 사용: ./cloud<em>sql</em>proxy -instances=&#x3C;인스턴스 연결이름>=tcp:3306</p>\n<p>지정된 포트는 로컬 데이터베이스 서버 등에서 이미 사용하지 않는 포트여야 합니다.<br>\n서비스 계정 사용 및 명시적으로 인스턴스 연결 이름 포함 (프로덕션 환경에 권장)</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># ./cloud_sql_proxy -instances=&lt;인스턴스 연결이름>=tcp:3306 \\</span>\n<span class=\"token operator\">-</span>credential_file<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>PATH_TO_KEY_FILE<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span></code></pre></div>\n<p>서비스 계정을 사용하여 프록시를 인증하는 경우 서비스 계정을 만들 때 생성된 비공개 키 파일의 클라이언트 머신 내 위치를 기록해 둡니다.</p>\n<br/>\n</li>\n<li>\n<p>연결 및 확인  </p>\n<p> DB는 루프백으로 직접 연결되며 해당 명령어로 접속이 가능합니다.<br>\n임의로 GUI에서 생성한 nasaproxy db가 정상적으로 보임을 확인.</p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89514736-2f6df380-d811-11ea-8b3e-1087afd7ae58.png\" alt=\"dbmasda\"></p>\n</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"🤣-gcp-bucket생성\" style=\"position:relative;\"><a href=\"#%F0%9F%A4%A3-gcp-bucket%EC%83%9D%EC%84%B1\" aria-label=\"🤣 gcp bucket생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤣 GCP BUCKET생성</h2>\n<p>웹페이지로 가서 BUCKET을 생성해보겠습니다.</p>\n<ul>\n<li>“저장소 - STORAGE - 버킷생성”을 클릭합니다.\n<img src=\"https://user-images.githubusercontent.com/64260883/89480838-586e9400-d7d1-11ea-9a79-60bb56656cce.png\" alt=\"bb\"></li>\n</ul>\n<br/>\n<ul>\n<li><code class=\"language-text\">버킷이름</code>, <code class=\"language-text\">리전</code>, <code class=\"language-text\">엑세스 방식</code>등 커스텀하게 설정 후 생성합니다.\n<img src=\"https://user-images.githubusercontent.com/64260883/89483582-61fafa80-d7d7-11ea-96fb-f385852519da.png\" alt=\"adas\"></li>\n</ul>\n<br/>\n<ul>\n<li>생성된 버킷을 확인 합니다.\n<img src=\"https://user-images.githubusercontent.com/64260883/89483705-a9818680-d7d7-11ea-95b9-d73a4de72c5e.png\" alt=\"ㅁㄴㅁㅁㅁㅁ\"></li>\n</ul>\n<br/>\n<ul>\n<li>연결 테스트를 위해서 <code class=\"language-text\">NASA1415</code>라는 폴더를 하나 생성했습니다.\n<img src=\"https://user-images.githubusercontent.com/64260883/89484368-5ad4ec00-d7d9-11ea-8bd1-2725aaec72d4.png\" alt=\"aaaa\"></li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>인스턴스에 접속해서 해당 버킷에 데이터를 전송합니다.<br>\n(인스턴스의 bktest라는 파일에 버킷에 업로드해서 테스트)  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89487231-e9e50280-d7df-11ea-8ead-b3f73903b65e.png\" alt=\"asda\"></p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># gsutil cp bktest gs://nasabucket</span><span class=\"token comment\">//NASA1415/</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>CLI 명령어로 버킷을 생성 </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89487449-6f68b280-d7e0-11ea-8640-e465edb9e137.png\" alt=\"12112121\"></p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># gsutil mb -b on -l asia-northeast3 gs://nasa1415-bucket2/</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>gsutil 명령어를 통해서 버킷을 컨트롤 할 수 있다</p>\n<p>gsutil을 사용하기 위해선 컴포넌트만 설치하면 사용 준비가 끝납니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># gcloud components install gsutil</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p>gsutil 명령어 모음</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">$ gsutil <span class=\"token builtin\">list</span>                           <span class=\"token comment\"># 나의 버킷 리스트 보기  </span>\n$ gsutil ls <span class=\"token operator\">-</span>r gs<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>버킷이름             <span class=\"token comment\"># 버킷 안에 들어있는 파일 확인  </span>\n$ gsutil du <span class=\"token operator\">-</span>s gs<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>버킷이름             <span class=\"token comment\"># 버킷 용량 확인  </span>\n$ gsutil mb gs<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>버킷이름                <span class=\"token comment\"># 버킷 생성</span>\n$ gsutil rb gs<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>버킷이름                <span class=\"token comment\"># 버킷 삭제</span>\n$ gsutil cp 로컬 파일 위치 gs<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>버킷이름   <span class=\"token comment\"># 로컬 -> 버킷 복사</span>\n$ gsutil cp gs<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>버킷이름 로컬 파일 위치   <span class=\"token comment\"># 버킷 -> 로컬 복사</span>\n$ gsutil mv 로컬 파일 위치 gs<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>버킷이름   <span class=\"token comment\"># 로컬 -> 버킷 이동</span>\n$ gsutil mv gs<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>버킷이름 로컬 파일 위치   <span class=\"token comment\"># 버킷 -> 로컬 이동</span>\n$ gsutil rm gs<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>버킷이름<span class=\"token operator\">/</span>파일이름        <span class=\"token comment\"># 파일 삭제</span>\n$ gsutil ls <span class=\"token operator\">-</span>L gs<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>버킷이름<span class=\"token operator\">/</span>파일이름     <span class=\"token comment\"># 파일 정보 보기</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>버킷관련 명령어</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">$ gsutil <span class=\"token operator\">-</span>m acl ch <span class=\"token punctuation\">[</span>해당 명령어 관련 설정<span class=\"token punctuation\">]</span>      <span class=\"token comment\"># Access Control List 변경</span>\n$ gsutil <span class=\"token operator\">-</span>m acl <span class=\"token builtin\">set</span> <span class=\"token punctuation\">[</span>해당 명령어 관련 설정<span class=\"token punctuation\">]</span>     <span class=\"token comment\"># Access Control List 세팅</span>\n$ gsutil <span class=\"token operator\">-</span>m cp <span class=\"token punctuation\">[</span>해당 명령어 관련 설정<span class=\"token punctuation\">]</span>          <span class=\"token comment\"># 복사</span>\n$ gsutil <span class=\"token operator\">-</span>m mv <span class=\"token punctuation\">[</span>해당 명령어 관련 설정<span class=\"token punctuation\">]</span>          <span class=\"token comment\"># 이동</span>\n$ gsutil <span class=\"token operator\">-</span>m rm <span class=\"token punctuation\">[</span>해당 명령어 관련 설정<span class=\"token punctuation\">]</span>          <span class=\"token comment\"># 삭제</span>\n$ gsutil <span class=\"token operator\">-</span>m rsync <span class=\"token punctuation\">[</span>해당 명령어 관련 설정<span class=\"token punctuation\">]</span>       <span class=\"token comment\"># 원본과 버킷 사이에 동기화</span>\n$ gsutil <span class=\"token operator\">-</span>m setmeta <span class=\"token punctuation\">[</span>해당 명령어 관련 설정<span class=\"token punctuation\">]</span>     <span class=\"token comment\"># 메타데이터 셋</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-gcp-sqlbucket-%EC%9D%B4%EB%9E%80-\">✔ “GCP SQL/BUCKET” 이란 ?</a></li>\n<li><a href=\"#-gcp-api-%EC%84%A4%EC%B9%98\">✌ GCP API 설치</a></li>\n<li><a href=\"#-gcp-sql-%EC%83%9D%EC%84%B1-%EB%B0%8F-vpc-%EC%97%B0%EA%B2%B0\">👍 GCP SQL 생성 및 VPC 연결</a></li>\n<li><a href=\"#-gcp-proxy%EB%A1%9C-db-%EC%97%B0%EA%B2%B0\">👏 GCP Proxy로 DB 연결</a></li>\n<li><a href=\"#%F0%9F%A4%A3-gcp-bucket%EC%83%9D%EC%84%B1\">🤣 GCP BUCKET생성</a></li>\n</ul>\n</div>","frontmatter":{"date":"June 25, 2021","title":"[GCP] - SQL/BUCKET 생성","categories":"GCP","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/gcp-02/"}},"prev":{"id":"42ce3601-f03b-5fec-b93c-308b868bf3a5","html":"<p>머리말  </p>\n<p> 이전 포스트에서는 도커에 대해서, 도커와 VM과의 차이 에서 포스팅 했었다.<br>\n이번 포스트에서는 실제 도커의 설치방법 및 확인 방법등에 대해 간단하게 포스트 했다.</p>\n<hr>\n<h2 id=\"-도커-설치\" style=\"position:relative;\"><a href=\"#-%EB%8F%84%EC%BB%A4-%EC%84%A4%EC%B9%98\" aria-label=\" 도커 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ 도커 설치</h2>\n<p>도커는 리눅스 컨테이너 기술이므로 macOS나 windows에 설치할 경우 가상머신에 설치가 됩니다.<br>\n리눅스 컨테이너 말고 윈도우즈 컨테이너라는 것도 존재하지만 이 포스트는 리눅스를 전제로 합니다.  </p>\n<ul>\n<li>\n<p>Linux<br>\n리눅스에 도커를 설치하는 방법은 자동 설치 스크립트를 이용하는 것이 가장 쉽습니다.<br>\n다음 명령어를 입력하면 root 권한을 요구하고 잠시 기다리면 설치가 완료됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">curl <span class=\"token operator\">-</span><span class=\"token class-name\">fsSL</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">.</span>docker<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span> <span class=\"token operator\">|</span> sudo sh</code></pre></div>\n</li>\n</ul>\n<hr>\n<p>스크립트를 사용하는 방법 외에도 패키지 저장소에 연결하여 설치도 가능합니다.  </p>\n<ul>\n<li>\n<p>패키지 저장소 연결</p>\n<ul>\n<li>사전 패키지 설치  </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># sudo yum install -y yum-utils \\</span>\n<span class=\"token operator\">></span> device<span class=\"token operator\">-</span>mapper<span class=\"token operator\">-</span>persistent<span class=\"token operator\">-</span>data \\\n<span class=\"token operator\">></span> lvm2</code></pre></div>\n<br/>\n<ul>\n<li>Yum 저장소 설정\n<code class=\"language-text\">yum-config-manager</code>로 docker-ce 패키지 저장소에 연결한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># sudo yum-coinfig-manager \\</span>\n<span class=\"token operator\">></span> <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>repo \\\n<span class=\"token operator\">></span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>download<span class=\"token punctuation\">.</span>docker<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>linux<span class=\"token operator\">/</span>centos<span class=\"token operator\">/</span>docker<span class=\"token operator\">-</span>ce<span class=\"token punctuation\">.</span>repo</code></pre></div>\n<br/>\n<ul>\n<li>docker-ce 설치</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># sudo yum install -y docker-ce docker-ce-cli containerd.io</span></code></pre></div>\n<br/>\n<ul>\n<li>서비스 실행 및 활성화</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># sudo systemctl start docker</span>\n<span class=\"token preprocessor property\"># sudo systemctl enable docker</span></code></pre></div>\n<br/>\n<ul>\n<li>sudo 없이 DOCKER 사용하기</li>\n</ul>\n<p><code class=\"language-text\">docker`는 기본적으로</code>root<code class=\"language-text\"></code>권한이 필요합니다.<br>\nroot가 아닌 사용자가 sudo없이 사용하려면 해당 사용자를 docker그룹에 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">sudo usermod <span class=\"token operator\">-</span>aG docker $USER # 현재 접속중인 사용자에게 권한주기\nsudo usermod <span class=\"token operator\">-</span>aG docker your<span class=\"token operator\">-</span>user # your<span class=\"token operator\">-</span>user 사용자에게 권한주기</code></pre></div>\n<p>사용자가 로그인 중이라면 다시 로그인 후 권한이 적용됩니다.</p>\n<br/>\n<ul>\n<li>DOCKER VERSION 확인\ndocker 설치 완료 후 설정이 끝났으면 version을 확인해본다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker <span class=\"token class-name\">version</span>\nClient<span class=\"token punctuation\">:</span> Docker Engine <span class=\"token operator\">-</span> <span class=\"token class-name\">Community</span>\nVersion<span class=\"token punctuation\">:</span>           <span class=\"token number\">19.03</span><span class=\"token number\">.12</span>\n<span class=\"token class-name\">API</span> version<span class=\"token punctuation\">:</span>       <span class=\"token number\">1.40</span>\n<span class=\"token class-name\">Go</span> version<span class=\"token punctuation\">:</span>        go1<span class=\"token punctuation\">.</span><span class=\"token number\">13.10</span>\n<span class=\"token class-name\">Git</span> commit<span class=\"token punctuation\">:</span>        48a66213fe\nBuilt<span class=\"token punctuation\">:</span>             Mon Jun <span class=\"token number\">22</span> <span class=\"token number\">15</span><span class=\"token punctuation\">:</span><span class=\"token number\">45</span><span class=\"token punctuation\">:</span><span class=\"token number\">36</span> <span class=\"token number\">2020</span>\nOS<span class=\"token operator\">/</span>Arch<span class=\"token punctuation\">:</span>           linux<span class=\"token operator\">/</span><span class=\"token class-name\">amd64</span>\nExperimental<span class=\"token punctuation\">:</span>      <span class=\"token class-name\">false</span>\n\nServer<span class=\"token punctuation\">:</span> Docker Engine <span class=\"token operator\">-</span> <span class=\"token class-name\">Community</span>\nEngine<span class=\"token punctuation\">:</span>\nVersion<span class=\"token punctuation\">:</span>          <span class=\"token number\">19.03</span><span class=\"token number\">.12</span>\n<span class=\"token class-name\">API</span> version<span class=\"token punctuation\">:</span>      <span class=\"token number\">1.40</span> <span class=\"token punctuation\">(</span>minimum version <span class=\"token number\">1.12</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Go</span> version<span class=\"token punctuation\">:</span>       go1<span class=\"token punctuation\">.</span><span class=\"token number\">13.10</span>\n<span class=\"token class-name\">Git</span> commit<span class=\"token punctuation\">:</span>       48a66213fe\nBuilt<span class=\"token punctuation\">:</span>            Mon Jun <span class=\"token number\">22</span> <span class=\"token number\">15</span><span class=\"token punctuation\">:</span><span class=\"token number\">44</span><span class=\"token punctuation\">:</span><span class=\"token number\">07</span> <span class=\"token number\">2020</span>\nOS<span class=\"token operator\">/</span>Arch<span class=\"token punctuation\">:</span>          linux<span class=\"token operator\">/</span><span class=\"token class-name\">amd64</span>\nExperimental<span class=\"token punctuation\">:</span>     <span class=\"token class-name\">false</span>\ncontainerd<span class=\"token punctuation\">:</span>\nVersion<span class=\"token punctuation\">:</span>          <span class=\"token number\">1.2</span><span class=\"token number\">.13</span>\nGitCommit<span class=\"token punctuation\">:</span>        7ad184331fa3e55e52b890ea95e65ba581ae3429\nrunc<span class=\"token punctuation\">:</span>\nVersion<span class=\"token punctuation\">:</span>          <span class=\"token number\">1.0</span><span class=\"token number\">.0</span><span class=\"token operator\">-</span><span class=\"token class-name\">rc10</span>\nGitCommit<span class=\"token punctuation\">:</span>        dc9208a3303feef5b3839f4323d9beb36df0a9dd\ndocker<span class=\"token operator\">-</span>init<span class=\"token punctuation\">:</span>\nVersion<span class=\"token punctuation\">:</span>          <span class=\"token number\">0.18</span><span class=\"token number\">.0</span>\nGitCommit<span class=\"token punctuation\">:</span>        fec3683</code></pre></div>\n<p><code class=\"language-text\">Client</code>와 <code class=\"language-text\">Server</code>정보가 정상적으로 출력되었다면 설치가 완료된 것 입니다.</p>\n<p>Server 정보가 정상적으로 나오지 않고<br>\n<code class=\"language-text\">Error response from daemon: Bad response from Docker engine</code> 메시지가 출력되는 경우는<br>\n보통 docker daemon이 정상적으로 실행되지 않았거나 sudo를 입력하지 않은 경우입니다.</p>\n<ul>\n<li>간단한 컨테이너 구동 테스트<br>\n어떤 언어를 배우더라도 가장 처음해보는 실습은 HELLO WORLD 메세지 출력일 것이다.<br>\n이번 포스트에서도 설치 기념으로 <code class=\"language-text\">Hello World</code> 컨테이너를 실행해본다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">student@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run hello<span class=\"token operator\">-</span>world\nUnable to find image 'hello<span class=\"token operator\">-</span>world<span class=\"token punctuation\">:</span>latest' <span class=\"token class-name\">locally</span>\nlatest<span class=\"token punctuation\">:</span> Pulling <span class=\"token keyword\">from</span> library<span class=\"token operator\">/</span>hello<span class=\"token operator\">-</span>world\n0e03bdcc26d7<span class=\"token punctuation\">:</span> Pull <span class=\"token class-name\">complete</span> \nDigest<span class=\"token punctuation\">:</span> sha256<span class=\"token punctuation\">:</span>7f0a9f93b4aa3022c3a4c147a449bf11e0941a1fd0bf4a8e6c9408b2600777c5\nStatus<span class=\"token punctuation\">:</span> Downloaded newer image <span class=\"token keyword\">for</span> hello<span class=\"token operator\">-</span>world<span class=\"token punctuation\">:</span>latest\n\nHello <span class=\"token keyword\">from</span> Docker<span class=\"token operator\">!</span>\nThis message shows that your installation appears to be working correctly<span class=\"token punctuation\">.</span>\n\nTo generate <span class=\"token keyword\">this</span> message<span class=\"token punctuation\">,</span> Docker took the <span class=\"token class-name\">following</span> steps<span class=\"token punctuation\">:</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">.</span> The Docker client contacted the Docker daemon<span class=\"token punctuation\">.</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span> The Docker daemon pulled the <span class=\"token string\">\"hello-world\"</span> image <span class=\"token keyword\">from</span> the Docker Hub<span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">(</span>amd64<span class=\"token punctuation\">)</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span> The Docker daemon created a <span class=\"token keyword\">new</span> container <span class=\"token keyword\">from</span> that image which runs the\n    executable that produces the output you are currently reading<span class=\"token punctuation\">.</span>\n<span class=\"token number\">4</span><span class=\"token punctuation\">.</span> The Docker daemon streamed that output to the <span class=\"token class-name\">Docker</span> client<span class=\"token punctuation\">,</span> which sent it\n    to your terminal<span class=\"token punctuation\">.</span>\n\nTo <span class=\"token keyword\">try</span> something <span class=\"token class-name\">more</span> ambitious<span class=\"token punctuation\">,</span> you can run an Ubuntu <span class=\"token class-name\">container</span> with<span class=\"token punctuation\">:</span>\n$ docker run <span class=\"token operator\">-</span>it ubuntu bash\n\n<span class=\"token class-name\">Share</span> images<span class=\"token punctuation\">,</span> <span class=\"token class-name\">automate</span> workflows<span class=\"token punctuation\">,</span> <span class=\"token keyword\">and</span> more with a free <span class=\"token class-name\">Docker</span> ID<span class=\"token punctuation\">:</span>\nhttps<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>hub<span class=\"token punctuation\">.</span>docker<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>\n\nFor more examples <span class=\"token keyword\">and</span> ideas<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">visit</span><span class=\"token punctuation\">:</span>\nhttps<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>docs<span class=\"token punctuation\">.</span>docker<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span><span class=\"token keyword\">get</span><span class=\"token operator\">-</span>started<span class=\"token operator\">/</span></code></pre></div>\n</li>\n<li>\n<p>주의사항</p>\n<p>도커가 지원되는 kernel 버전은 <code class=\"language-text\">3.10.x</code> 이상입니다.<br>\nubuntu 14.04 이상을 사용하면 큰 문제가 없고 kernel의 버전이 낮을 경우 제대로 동작을 안하거나 문제가 생길 수 있습니다.<br>\n가급적 최신버전으로 업데이트 해주세요. ubuntu나 centos가 아닌 경우는 다른 방법이 필요합니다.<br>\n다른 OS를 기반으로 DOCKER를 설치하기 위해선 아래 메뉴얼을 확인해보세요.<br>\n<a href=\"https://docs.docker.com/engine/install/\">https://docs.docker.com/engine/install/</a></p>\n</li>\n</ul>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-%EB%8F%84%EC%BB%A4-%EC%84%A4%EC%B9%98\">✔ 도커 설치</a></li>\n</ul>\n</div>","frontmatter":{"date":"June 26, 2021","title":"[DOCKER] - Install","categories":"DOCKER","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/docker-install/"}},"site":{"siteMetadata":{"siteUrl":"https://nasa1515.com","comments":{"utterances":{"repo":"nasa1515/nasablog"}}}}},"pageContext":{"slug":"/gcp-semi/","nextSlug":"/gcp-02/","prevSlug":"/docker-install/"}},"staticQueryHashes":["1073350324","2938748437"]}