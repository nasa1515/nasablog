{"componentChunkName":"component---src-templates-blog-template-js","path":"/docker-volume/","result":{"data":{"cur":{"id":"bb26cdb7-0ad3-53cc-9c61-d071c65fbd2b","html":"<p>머리말  </p>\n<p> 이전 포스트에서는 도커 컨테이너의 전반적인 운영법에 대해서 포스팅 했었습니다.<br>\n이번 포스트에서는 볼륨을 이용해서 실제 도커의 데이터 관리 방법과 그와 관련된 명령어들을 포스트 했습니다.</p>\n<hr>\n<h2 id=\"-도커-볼륨\" style=\"position:relative;\"><a href=\"#-%EB%8F%84%EC%BB%A4-%EB%B3%BC%EB%A5%A8\" aria-label=\" 도커 볼륨 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ 도커 볼륨</h2>\n<p>기본적으로 컨테이너에 생성되는 모든 파일은 컨테이너 레이어에 저장됩니다.<br>\n이 데이터들은 컨테이너와 함께 삭제되는 런타임 데이터인데 <code class=\"language-text\">(휘발성)</code><br>\n이 데이터를 영구적으로 저장하려면 반드시 <code class=\"language-text\">볼륨</code>을 사용해야 합니다.</p>\n<ul>\n<li>\n<p>도커의 볼륨-마운트 구조  </p>\n<p><img src=\"https://t1.daumcdn.net/cfile/tistory/99839A4A5DC803CC28\"></p>\n<br/>\n</li>\n</ul>\n<h3 id=\"도커-볼륨을-사용-방법\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EC%BB%A4-%EB%B3%BC%EB%A5%A8%EC%9D%84-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-label=\"도커 볼륨을 사용 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도커 볼륨을 사용 방법</h3>\n<ol>\n<li>\n<p><code class=\"language-text\">Bind Mount</code><br>\n초기 도커부터 사용했던 방식입니다.<br>\n호스트의 특정 디렉토리와 컨테이너의 디렉토리를 연결하는 방식입니다.<br>\nbind mount는 쉽게 사용할 수 있지만 도커에 의해 관리되지 않기 때문에 따로 기록 해놓지 않으면 관리하기가 어렵습니다  </p>\n<ul>\n<li>\n<p>Bind Mount 사용 사례</p>\n<ul>\n<li>호스트와 컨테이너가 /etc/resolv.conf 와 같은 설정 파일을 공유할 때</li>\n<li>호스트와 컨테이너가 개발환경 사이에서 소스 코드나 빌드 아티팩트를 공유할 때</li>\n<li>호스트의 파일 또는 디렉토리 구조가 컨테이너의 BIND MOUNT와 일치하도록 보장된 경우</li>\n</ul>\n</li>\n<li>\n<p>도커의 호스트 볼륨 디렉토리에 마운트 하는 로직\n<img src=\"https://t1.daumcdn.net/cfile/tistory/99FA9B3B5B88FAF119\"></p>\n<ul>\n<li>이 방법은 container의 데이터를 호스트에 유지할 때 사용할 수 있음</li>\n<li>하지만 Volume이 /var/lib/docker/volumes/에 생기며 이름이 docker에서 자동으로 생성한 hash값을 사용</li>\n<li>container가 삭제되면 데이터를 찾기 힘들기 때문에 추천하지 않음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker run <span class=\"token operator\">-</span>it <span class=\"token operator\">-</span>v <span class=\"token operator\">/</span>data centos <span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>bash\n$ docker run <span class=\"token operator\">-</span>it <span class=\"token operator\">-</span>v <span class=\"token punctuation\">(</span>컨테이너의 volume 디렉토리<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>이미지<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>bash</code></pre></div>\n</li>\n<li>\n<p>이를 통해 컨테이너를 생성 시</p>\n<ul>\n<li>/var/lib/docker/volumes에 hash값을 가지는 디렉토리가 생성되고,<br>\n_data 디렉토리 안에 컨테이너의 /data 디렉토리가 매핑</li>\n<li>즉, 컨테이너에서 /data 디렉토리에 파일을 생성/삭제/변경 등의 작업을 하게되면,<br>\n호스트의 /var/lib/docker/volumes/xxxx 디렉토리에 같은 내용이 있음</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<br/>\n<hr>\n<h3 id=\"도커의-득정-디렉토리와-마운트-하는-로직\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EC%BB%A4%EC%9D%98-%EB%93%9D%EC%A0%95-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC%EC%99%80-%EB%A7%88%EC%9A%B4%ED%8A%B8-%ED%95%98%EB%8A%94-%EB%A1%9C%EC%A7%81\" aria-label=\"도커의 득정 디렉토리와 마운트 하는 로직 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도커의 득정 디렉토리와 마운트 하는 로직</h3>\n<p><img src=\"https://t1.daumcdn.net/cfile/tistory/995CFD335B88FACB13\"></p>\n<ul>\n<li>이 방법을 사용하면 호스트의 특정 디렉토리(or 파일)을 container와 매핑</li>\n<li>Volume의 위치를 사용자가 정할 수 있으므로 데이터를 찾기 쉬움</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker run <span class=\"token operator\">-</span>it <span class=\"token operator\">-</span>v <span class=\"token operator\">/</span>root<span class=\"token operator\">/</span>data<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>data centos <span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>bash\n$ docker run <span class=\"token operator\">-</span>it <span class=\"token operator\">-</span>v <span class=\"token punctuation\">(</span>호스트 디렉토리<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>컨테이너의 volume 디렉토리<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>이미지<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>bash</code></pre></div>\n<ul>\n<li>\n<p>위의 명령어는 호스트의 /root/data 디렉토리를<br>\ncontainer의 volume 디렉토리로 사용할 수 있도록 한다.  </p>\n<ul>\n<li>호스트에서 /root/data 디렉토리에 파일을 생성하게 된다면, container에서도 파일이 존재하고 사용할 수 있습니다.  </li>\n<li>반대의 경우(container에서 파일을 생성)에도 호스트에서 파일이 존재합니다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ol start=\"2\">\n<li>\n<p><code class=\"language-text\">VOLUME</code><br>\n도커에 의해 관리되는 스토리지입니다.<br>\ndocker 명령어를 사용하여 생성할 수 있고 한번에 삭제도 가능하고.<br>\n볼륨은 BIND MOUNT와 다르게 다양한 드라이버를 지원하고 있습니다.  </p>\n<ul>\n<li>\n<p>VOLUME 사용 사례</p>\n<ul>\n<li>다수의 실행 중인 컨테이너 사이에 데이터를 공유할 때</li>\n<li>컨테이너에서 호스트 구성을 분리할 때</li>\n<li>컨테이너 데이터를 원격의 호스트 또는 클라우드 업체에 저장할 때</li>\n<li>다른 호스트로 데이터를 백업하거나 복원할 때</li>\n</ul>\n<p><img src=\"https://t1.daumcdn.net/cfile/tistory/9942AE3F5B88FB0C0E\"></p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker run <span class=\"token operator\">-</span>it <span class=\"token operator\">--</span>name container1 <span class=\"token operator\">-</span>v <span class=\"token operator\">/</span>root<span class=\"token operator\">/</span>data<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>data centos <span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>bash\n$ docker run <span class=\"token operator\">-</span>it <span class=\"token operator\">--</span>name container2 <span class=\"token operator\">-</span>v <span class=\"token operator\">/</span>root<span class=\"token operator\">/</span>data<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>data centos <span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>bash</code></pre></div>\n<ul>\n<li>container1의 /data 디렉토리와 container2의 /data 디렉토리를 호스트의 /root/data 디렉토리와 매핑 함으로써</li>\n<li>각 각의 container에서 호스트의 디렉토리(파일)을 공유 가능</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>추가적인 도커(Docker) Volume 사용법 <code class=\"language-text\">(파일 하나를 컨테이너에 연결)</code></p>\n<ul>\n<li>디렉토리 뿐만 아니라 호스트의 파일 하나도 container와 매핑이 가능하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker run <span class=\"token operator\">-</span>it <span class=\"token operator\">-</span>v <span class=\"token operator\">/</span>root<span class=\"token operator\">/</span>test<span class=\"token punctuation\">.</span>txt<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>root<span class=\"token operator\">/</span>test<span class=\"token punctuation\">.</span>txt centos <span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>bash\n$ docker run <span class=\"token operator\">-</span>it <span class=\"token operator\">-</span>v <span class=\"token punctuation\">(</span>호스트 파일<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>컨테이너의 파일<span class=\"token punctuation\">)</span> centos <span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>bash</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<br/>\n<hr>\n<h2 id=\"🤞-bind-mount-사용\" style=\"position:relative;\"><a href=\"#%F0%9F%A4%9E-bind-mount-%EC%82%AC%EC%9A%A9\" aria-label=\"🤞 bind mount 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤞 BIND MOUNT 사용</h2>\n<ul>\n<li>\n<p>BIND MOUNT를 사용하기 위해 먼저 디렉토리와 파일을 생성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ mkdir <span class=\"token operator\">~</span><span class=\"token operator\">/</span>nasa1515<span class=\"token punctuation\">;</span> touch <span class=\"token operator\">~</span><span class=\"token operator\">/</span>nasa1515<span class=\"token operator\">/</span>nasatest<span class=\"token punctuation\">.</span>txt\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ ls <span class=\"token operator\">-</span>l <span class=\"token operator\">~</span><span class=\"token operator\">/</span>nasa1515<span class=\"token operator\">/</span>\n합계 <span class=\"token number\">0</span>\n<span class=\"token operator\">-</span>rw<span class=\"token operator\">-</span>r<span class=\"token operator\">--</span>r<span class=\"token operator\">--</span> <span class=\"token number\">1</span> student student <span class=\"token number\">0</span>  <span class=\"token number\">8</span>월 <span class=\"token number\">17</span> <span class=\"token number\">15</span><span class=\"token punctuation\">:</span><span class=\"token number\">55</span> nasatest<span class=\"token punctuation\">.</span>txt   </code></pre></div>\n<br/>\n</li>\n<li>\n<p>실행 중인 컨테이너에는 Bind Mount를 연결할 수 없고, 반드시 컨테이너를 실행하거나, 생성하면서 연결해야합니다.<br>\n<code class=\"language-text\">[-v]</code> 옵션을 사용하여 컨테이너와 연결할 수 있습니다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run <span class=\"token operator\">-</span>itd <span class=\"token operator\">--</span>name bind <span class=\"token operator\">-</span>v <span class=\"token operator\">~</span><span class=\"token operator\">/</span>nasa1515<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>tmp<span class=\"token operator\">/</span><span class=\"token class-name\">mount</span> centos<span class=\"token punctuation\">:</span>latest\n81949e2f5ea976f3dbd1f48c517a94298295054ed8d099fae86809dccf2efa18\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ \nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ \nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker exec bind ls <span class=\"token operator\">/</span>tmp<span class=\"token operator\">/</span>mount\nnasatest<span class=\"token punctuation\">.</span>txt\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ </code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"volume-사용\" style=\"position:relative;\"><a href=\"#volume-%EC%82%AC%EC%9A%A9\" aria-label=\"volume 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍VOLUME 사용</h2>\n<ul>\n<li>\n<p>볼륨은  <code class=\"language-text\">docker volume</code> 명령으로 생성할 수 있습니다.<br>\n해당 볼륨들은 <code class=\"language-text\">/var/lib/docker/volumes</code>에 저장됩니다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker volume create <span class=\"token operator\">--</span><span class=\"token class-name\">help</span>\n\nUsage<span class=\"token punctuation\">:</span> docker volume create <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">VOLUME</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">nasa-volume</code>을 생성해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">student@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker volume create nasa<span class=\"token operator\">-</span>volume\nnasa<span class=\"token operator\">-</span>volume</code></pre></div>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">docker volume ls</code> 명령어로 호스트의 볼륨 리스트를 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">student@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker volume ls <span class=\"token operator\">|</span> grep nasa\nDRIVER              VOLUME NAME\nlocal               nasa<span class=\"token operator\">-</span>volume</code></pre></div>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">docker inspect</code> 명령어로 볼륨이 연결되어있는 호스트의 정보를 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">student@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker inspect nasa<span class=\"token operator\">-</span>volume\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"CreatedAt\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2020-08-17T16:38:04+09:00\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Driver\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"local\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Labels\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Mountpoint\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/var/lib/docker/volumes/nasa-volume/_data\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"nasa-volume\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Options\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Scope\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"local\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p>BIND MOUNT와 마찬가지로 도커 볼륨도 컨테이너를 실행하거나 생성하면서 연결해야함<br>\n<code class=\"language-text\">nasa-vol-centos</code>라는 이름의 컨테이너에 연결해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">student@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run <span class=\"token operator\">-</span>itd <span class=\"token operator\">--</span>name nasa<span class=\"token operator\">-</span>vol<span class=\"token operator\">-</span>centos <span class=\"token operator\">-</span>v nasa<span class=\"token operator\">-</span>volume<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>tmp<span class=\"token operator\">/</span><span class=\"token class-name\">volume</span> centos<span class=\"token punctuation\">:</span>latest\nc701b353eab422ee6ff88d81ddc67d8afff7f9cee2d90327fa034f4e2d2f42bc</code></pre></div>\n<p>현재 볼륨에는 데이터가 없기때문에 컨테이너를 확인해도 아무것도 없을 것입니다.  </p>\n<br/>\n</li>\n<li>\n<p>httpd 컨테이너를 볼륨에 연결하여 파일을 연동해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">student@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run <span class=\"token operator\">-</span>d <span class=\"token operator\">--</span>name nasa<span class=\"token operator\">-</span>web <span class=\"token operator\">-</span>v nasa<span class=\"token operator\">-</span>volume<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>apache2<span class=\"token operator\">/</span>htdocs<span class=\"token punctuation\">:</span><span class=\"token class-name\">ro</span> httpd<span class=\"token punctuation\">:</span>latest\nUnable to find image 'httpd<span class=\"token punctuation\">:</span>latest' <span class=\"token class-name\">locally</span>\nlatest<span class=\"token punctuation\">:</span> Pulling <span class=\"token keyword\">from</span> library<span class=\"token operator\">/</span><span class=\"token class-name\">httpd</span>\nbf5952930446<span class=\"token punctuation\">:</span> Already exists \n3d3fecf6569b<span class=\"token punctuation\">:</span> Pull <span class=\"token class-name\">complete</span> \nb5fc3125d912<span class=\"token punctuation\">:</span> Pull complete \n679d69c01e90<span class=\"token punctuation\">:</span> Pull complete \n76291586768e<span class=\"token punctuation\">:</span> Pull <span class=\"token class-name\">complete</span> \nDigest<span class=\"token punctuation\">:</span> sha256<span class=\"token punctuation\">:</span>3cbdff4bc16681541885ccf1524a532afa28d2a6578ab7c2d5154a7abc182379\nStatus<span class=\"token punctuation\">:</span> Downloaded newer image <span class=\"token keyword\">for</span> httpd<span class=\"token punctuation\">:</span>latest\nd9c599d077832ff83f51695ad09f6c14446e2d61d7418c50f4645973714e9b03</code></pre></div>\n<p><code class=\"language-text\">httpd:latest</code> 이미지로 생성된 컨테이너는 <code class=\"language-text\">/usr/local/apache2/htdocs</code>디렉토리에 index.html 파일이 존재합니다.<br>\n볼륨이 성공적으로 연결되었습니다면 처음 생성한 컨테이너에서도 index.html 파일이 보여야한다.  </p>\n<br/>\n</li>\n<li>\n<p>볼륨 공유 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">student@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker exec nasa<span class=\"token operator\">-</span>vol<span class=\"token operator\">-</span>centos cat <span class=\"token operator\">/</span>tmp<span class=\"token operator\">/</span>volume<span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>html\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>It works<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></code></pre></div>\n<p>볼륨이 성공적으로 연결되어 해당 컨테이너에서도 확인이 가능합니다.</p>\n</li>\n</ul>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EB%8F%84%EC%BB%A4-%EB%B3%BC%EB%A5%A8\">✔ 도커 볼륨</a></p>\n<ul>\n<li><a href=\"#%EB%8F%84%EC%BB%A4-%EB%B3%BC%EB%A5%A8%EC%9D%84-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\">도커 볼륨을 사용 방법</a></li>\n<li><a href=\"#%EB%8F%84%EC%BB%A4%EC%9D%98-%EB%93%9D%EC%A0%95-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC%EC%99%80-%EB%A7%88%EC%9A%B4%ED%8A%B8-%ED%95%98%EB%8A%94-%EB%A1%9C%EC%A7%81\">도커의 득정 디렉토리와 마운트 하는 로직</a></li>\n</ul>\n</li>\n<li><a href=\"#%F0%9F%A4%9E-bind-mount-%EC%82%AC%EC%9A%A9\">🤞 BIND MOUNT 사용</a></li>\n<li><a href=\"#volume-%EC%82%AC%EC%9A%A9\">👍VOLUME 사용</a></li>\n</ul>\n</div>","excerpt":"머리말    이전 포스트에서는 도커 컨테이너의 전반적인 운영법에 대해서 포스팅 했었습니다.  이번 포스트에서는 볼륨을 이용해서 실제 도커의 데이터 관리 방법과 그와 관련된 명령어들을 포스트 했습니다. ✔ 도커 볼륨 기본적으로 컨테이너에 생성되는 모든 파일은 컨테이너 레이어에 저장됩니다. 이 데이터들은 컨테이너와 함께 삭제되는 런타임 데이터인데  이 데이터를 영구적으로 저장하려면 반드시 을 사용해야 합니다. 도커의 볼륨-마운트 구조    도커 볼륨을 사용 방법  초기 도커부터 사용했던 방식입니다. 호스트의 특정 디렉토리와 컨테이너의 디렉토리를 연결하는 방식입니다. bind mount는 쉽게 사용할 수 있지만 도커에 의해…","frontmatter":{"date":"June 26, 2021","title":"[DOCKER] - VOLUMES","categories":"DOCKER","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/docker-volume/"}},"next":{"id":"19140e2a-39e6-528d-83b0-b371a0d9a02d","html":"<p>머리말  </p>\n<p> 이전 포스트에서는 도커의 네트워크에 대해서 포스팅했습니다.<br>\n이번 포스트에서는 이전 포스트에서 포스팅한 네트워크의 종류가 아니라<br>\n실제 컨테이너에 사용자가 네트워크 대역대를 직접 설정할 수 있는 MACVLAN과 LINK에 대해서 포스팅합니다.</p>\n<hr>\n<h2 id=\"-macvlan\" style=\"position:relative;\"><a href=\"#-macvlan\" aria-label=\" macvlan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ MACVLAN</h2>\n<ul>\n<li>MacVLan은 브릿지가 없습니다. 대신 서브 인터페이스라는 개념이 등장해서 사용합니다.  </li>\n<li>물리적인 NIC eth0은 존재하며 <code class=\"language-text\">eh0</code>에서 여러 하위 인터페이스를 만듬으로써 여러개의 mac 주소를 가질 수 있도록 합니다.<br>\n그렇게 되면 생성된 하위 인터페이스들에 여러개의 컨테이너들이 연결되면서 VLAN을 구성할 수 있습니다.  </li>\n<li>즉 하나의 NIC를 가상화함으로써 여러개의 MAC주소를 생성하는 것이라고 할 수 있습니다</li>\n</ul>\n<br/>\n<h3 id=\"macvlan-driver-구조\" style=\"position:relative;\"><a href=\"#macvlan-driver-%EA%B5%AC%EC%A1%B0\" aria-label=\"macvlan driver 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MACVLAN Driver 구조</h3>\n<p><img src=\"https://lh3.googleusercontent.com/k6U4fO2FWI-lA5f_G7bO1w88OtgIki7azKcXbdpcCClhW79M4cRBOgIWYX3KhYKLRYpyE40lqX41MWj4m_6mLuUPbahQFh76CYQwU9lde7jqPmc4ClZwZJ_YF8XNJvOVF9eBRCyu\">  </p>\n<ul>\n<li>macvlan은 부모 인터페이스(parent)와 서브 인터페이스(slave)로 나눈다.    </li>\n<li>부모 인터페이스는 가상화될 주체, 즉 실제 물리적인 NIC인 eth0이 됩니다.  </li>\n<li>거기서 생성된 서브 인터페이스들은 mac0, mac1, mac2가 됩니다.  </li>\n<li>macvlan으로 생성된 인터페이스를 지칭할 때는 mac0@eth0과 같이 표현합니다. <code class=\"language-text\">(mac0은 서브 인터페이스, eth0이 부모 인터페이스)</code></li>\n</ul>\n<br/>\n<h3 id=\"macvlan-구동-방식\" style=\"position:relative;\"><a href=\"#macvlan-%EA%B5%AC%EB%8F%99-%EB%B0%A9%EC%8B%9D\" aria-label=\"macvlan 구동 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MACVLAN 구동 방식</h3>\n<ul>\n<li>호스트(eth0)와는 통신이 안되지만 다른 서브 인터페이스간 통신은 되는 방식  </li>\n<li>호스트와 통신이 안되는 것은 원래 macvlan에서 안되는 것이고<br>\n다른 서브 인터페이스간의 통신이 되는 것은 bridge 등 들과 차이를 가진다</li>\n<li>macvlan 방식은 부모 인터페이스에 간단한 브릿지를 두어서<br>\n다른 서브 인터페이스로 향하는 트래픽을 밖으로 내보내지 않고 바로 전달하는 방식이다<br>\n(내부 컨테이너끼리 통신을 하는 경우)  </li>\n<li>모든 서브 인터페이스의 맥 주소를 알고 있는 상태이므로<br>\n브릿지에서 Mac Learning(맥 추가) 작업도 필요없고 루핑을 방지하기 위한 STP알고리즘도 필요 없다.</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"-macvlan-설정\" style=\"position:relative;\"><a href=\"#-macvlan-%EC%84%A4%EC%A0%95\" aria-label=\" macvlan 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✌ MACVLAN 설정</h2>\n<ul>\n<li>\n<p>LINUX NIC의 promisc 모드를 활성화<br>\nMacVlan을 사용하기 위해서는 <code class=\"language-text\">Promiscuous mode</code>를 활성화 해야 합니다.</p>\n<ul>\n<li>LINUX에서는 하나의 NIC에 하나의 MAC 주소를 학습하도록 구성되어있습니다.  </li>\n<li>MacVlan을 사용할 경우 서브 인터페이스 하단의 MAC을 다중으로 ARP TABLE에서 확인 가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ ip a <span class=\"token operator\">|</span> grep wlp3s0\n<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> wlp3s0<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>BROADCAST<span class=\"token punctuation\">,</span>MULTICAST<span class=\"token punctuation\">,</span>UP<span class=\"token punctuation\">,</span>LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">1500</span> qdisc mq state UP <span class=\"token keyword\">group</span> <span class=\"token keyword\">default</span> qlen <span class=\"token number\">1000</span>\ninet <span class=\"token number\">192.168</span><span class=\"token number\">.100</span><span class=\"token number\">.9</span><span class=\"token operator\">/</span><span class=\"token number\">24</span> brd <span class=\"token number\">192.168</span><span class=\"token number\">.100</span><span class=\"token number\">.255</span> scope <span class=\"token keyword\">global</span> <span class=\"token keyword\">dynamic</span> noprefixroute wlp3s0\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ sudo ip link <span class=\"token keyword\">set</span> wlp3s0 promisc <span class=\"token keyword\">on</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p>NIC에 PROMISC가 추가된 것을 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ ip a <span class=\"token operator\">|</span> grep wlp3s0\n<span class=\"token number\">3</span><span class=\"token punctuation\">:</span> wlp3s0<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>BROADCAST<span class=\"token punctuation\">,</span>MULTICAST<span class=\"token punctuation\">,</span>PROMISC<span class=\"token punctuation\">,</span>UP<span class=\"token punctuation\">,</span>LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">1500</span> qdisc mq state UP <span class=\"token keyword\">group</span> <span class=\"token keyword\">default</span> qlen <span class=\"token number\">1000</span>\n    inet <span class=\"token number\">192.168</span><span class=\"token number\">.100</span><span class=\"token number\">.9</span><span class=\"token operator\">/</span><span class=\"token number\">24</span> brd <span class=\"token number\">192.168</span><span class=\"token number\">.100</span><span class=\"token number\">.255</span> scope <span class=\"token keyword\">global</span> <span class=\"token keyword\">dynamic</span> noprefixroute wlp3s0</code></pre></div>\n<br/>\n</li>\n<li>\n<p>MacVlan 네트워크 생성<br>\n부모 인터페이스 카드를 지정하여 새로운 MacVlan 네트워크를 생성합니다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker network create <span class=\"token operator\">-</span>d macvlan <span class=\"token operator\">--</span>subnet<span class=\"token operator\">=</span><span class=\"token number\">192.168</span><span class=\"token number\">.57</span><span class=\"token number\">.0</span><span class=\"token operator\">/</span><span class=\"token number\">24</span> <span class=\"token operator\">--</span>gateway<span class=\"token operator\">=</span><span class=\"token number\">192.168</span><span class=\"token number\">.57</span><span class=\"token number\">.1</span> <span class=\"token operator\">--</span>ip<span class=\"token operator\">-</span>range<span class=\"token operator\">=</span><span class=\"token number\">192.168</span><span class=\"token number\">.57</span><span class=\"token number\">.0</span><span class=\"token operator\">/</span><span class=\"token number\">24</span> <span class=\"token operator\">-</span><span class=\"token class-name\">o</span> parent<span class=\"token operator\">=</span>wlp3s0 macvlan1 \n14ae59d5fa0446094d77fe0233270d0c68643636181991f5f9c6333b0d2792df\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ \nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker network ls\nNETWORK ID          NAME                DRIVER              SCOPE\nc4031fa4ad4b        bridge              bridge              local\n29d9e0411d39        host                host                local\n14ae59d5fa04        macvlan1            macvlan             local\nddad85781d7f        nasanet             bridge              local\n054fbf919b85        none                <span class=\"token keyword\">null</span>                local</code></pre></div>\n<p><code class=\"language-text\">wlp3s0</code>을 사용해 <code class=\"language-text\">macvlan1</code>을 생성한 것을 확인 할 수 있습니다.</p>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">macvlan1</code>을 사용하는 컨테이너 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run <span class=\"token operator\">-</span>itd <span class=\"token operator\">--</span>name mac<span class=\"token operator\">-</span>nasa <span class=\"token operator\">--</span>network <span class=\"token class-name\">macvlan1</span> centos<span class=\"token punctuation\">:</span>latest\nb63a1b3bc91faea7893991e1ed4407e23fd179d82ec8456925bd22740da21833\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n<span class=\"token class-name\">b63a1b3bc91f</span>        centos<span class=\"token punctuation\">:</span>latest       <span class=\"token string\">\"/bin/bash\"</span>         <span class=\"token number\">21</span> seconds ago      Up <span class=\"token number\">20</span> seconds                           mac<span class=\"token operator\">-</span>nasa</code></pre></div>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">mac-nasa</code> 컨테이너의 네트워크 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker exec mac<span class=\"token operator\">-</span>nasa ip a\n<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> lo<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>LOOPBACK<span class=\"token punctuation\">,</span>UP<span class=\"token punctuation\">,</span>LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">65536</span> qdisc noqueue state UNKNOWN <span class=\"token keyword\">group</span> <span class=\"token keyword\">default</span> qlen <span class=\"token number\">1000</span>\n    link<span class=\"token operator\">/</span>loopback <span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span> brd <span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span>\n    inet <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">/</span><span class=\"token number\">8</span> scope host lo\n    valid_lft forever preferred_lft forever\n<span class=\"token number\">41</span><span class=\"token punctuation\">:</span> eth0@if3<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>BROADCAST<span class=\"token punctuation\">,</span>MULTICAST<span class=\"token punctuation\">,</span>UP<span class=\"token punctuation\">,</span>LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">1500</span> qdisc noqueue state UP <span class=\"token keyword\">group</span> <span class=\"token keyword\">default</span> \n    link<span class=\"token operator\">/</span>ether <span class=\"token number\">02</span><span class=\"token punctuation\">:</span><span class=\"token number\">42</span><span class=\"token punctuation\">:</span>c0<span class=\"token punctuation\">:</span>a8<span class=\"token punctuation\">:</span><span class=\"token number\">39</span><span class=\"token punctuation\">:</span><span class=\"token number\">02</span> <span class=\"token class-name\">brd</span> ff<span class=\"token punctuation\">:</span>ff<span class=\"token punctuation\">:</span>ff<span class=\"token punctuation\">:</span>ff<span class=\"token punctuation\">:</span>ff<span class=\"token punctuation\">:</span>ff link<span class=\"token operator\">-</span>netnsid <span class=\"token number\">0</span>\n    inet <span class=\"token number\">192.168</span><span class=\"token number\">.57</span><span class=\"token number\">.2</span><span class=\"token operator\">/</span><span class=\"token number\">24</span> brd <span class=\"token number\">192.168</span><span class=\"token number\">.57</span><span class=\"token number\">.255</span> scope <span class=\"token keyword\">global</span> eth0\n    valid_lft forever preferred_lft forever</code></pre></div>\n<br/>\n</li>\n<li>\n<p>추가적으로 <code class=\"language-text\">mac-nasa2</code>라는 컨테이너를 동일하게 생성하였음</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run <span class=\"token operator\">-</span>itd <span class=\"token operator\">--</span>name mac<span class=\"token operator\">-</span>nasa2 <span class=\"token operator\">--</span>network <span class=\"token class-name\">macvlan1</span> centos<span class=\"token punctuation\">:</span>latest\n528f559bfdca2a7fb5ea47a259cfba69f7efdc9368e94f4ebe86ac7302b77168\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ \nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker exec mac<span class=\"token operator\">-</span>nasa2 ip a\n<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> lo<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>LOOPBACK<span class=\"token punctuation\">,</span>UP<span class=\"token punctuation\">,</span>LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">65536</span> qdisc noqueue state UNKNOWN <span class=\"token keyword\">group</span> <span class=\"token keyword\">default</span> qlen <span class=\"token number\">1000</span>\n    link<span class=\"token operator\">/</span>loopback <span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span> brd <span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span>\n    inet <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">/</span><span class=\"token number\">8</span> scope host lo\n    valid_lft forever preferred_lft forever\n<span class=\"token number\">42</span><span class=\"token punctuation\">:</span> eth0@if3<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>BROADCAST<span class=\"token punctuation\">,</span>MULTICAST<span class=\"token punctuation\">,</span>UP<span class=\"token punctuation\">,</span>LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">1500</span> qdisc noqueue state UP <span class=\"token keyword\">group</span> <span class=\"token keyword\">default</span> \n    link<span class=\"token operator\">/</span>ether <span class=\"token number\">02</span><span class=\"token punctuation\">:</span><span class=\"token number\">42</span><span class=\"token punctuation\">:</span>c0<span class=\"token punctuation\">:</span>a8<span class=\"token punctuation\">:</span><span class=\"token number\">39</span><span class=\"token punctuation\">:</span><span class=\"token number\">03</span> <span class=\"token class-name\">brd</span> ff<span class=\"token punctuation\">:</span>ff<span class=\"token punctuation\">:</span>ff<span class=\"token punctuation\">:</span>ff<span class=\"token punctuation\">:</span>ff<span class=\"token punctuation\">:</span>ff link<span class=\"token operator\">-</span>netnsid <span class=\"token number\">0</span>\n    inet <span class=\"token number\">192.168</span><span class=\"token number\">.57</span><span class=\"token number\">.3</span><span class=\"token operator\">/</span><span class=\"token number\">24</span> brd <span class=\"token number\">192.168</span><span class=\"token number\">.57</span><span class=\"token number\">.255</span> scope <span class=\"token keyword\">global</span> eth0\n    valid_lft forever preferred_lft forever</code></pre></div>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">mac-nasa</code> &#x3C;-> <code class=\"language-text\">mac-nasa2</code> 의 통신이 정상적임을 확인합니다.<br>\nMacVlan 네트워킹 기반의 통신이 정상적인 것을 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker exec mac<span class=\"token operator\">-</span>nasa ping <span class=\"token operator\">-</span>c5 <span class=\"token number\">192.168</span><span class=\"token number\">.57</span><span class=\"token number\">.3</span>\nPING <span class=\"token number\">192.168</span><span class=\"token number\">.57</span><span class=\"token number\">.3</span> <span class=\"token punctuation\">(</span><span class=\"token number\">192.168</span><span class=\"token number\">.57</span><span class=\"token number\">.3</span><span class=\"token punctuation\">)</span> <span class=\"token function\">56</span><span class=\"token punctuation\">(</span><span class=\"token number\">84</span><span class=\"token punctuation\">)</span> bytes of data<span class=\"token punctuation\">.</span>\n<span class=\"token number\">64</span> bytes <span class=\"token keyword\">from</span> <span class=\"token number\">192.168</span><span class=\"token number\">.57</span><span class=\"token number\">.3</span><span class=\"token punctuation\">:</span> icmp_seq<span class=\"token operator\">=</span><span class=\"token number\">1</span> ttl<span class=\"token operator\">=</span><span class=\"token number\">64</span> time<span class=\"token operator\">=</span><span class=\"token number\">0.051</span> ms\n<span class=\"token number\">64</span> bytes <span class=\"token keyword\">from</span> <span class=\"token number\">192.168</span><span class=\"token number\">.57</span><span class=\"token number\">.3</span><span class=\"token punctuation\">:</span> icmp_seq<span class=\"token operator\">=</span><span class=\"token number\">2</span> ttl<span class=\"token operator\">=</span><span class=\"token number\">64</span> time<span class=\"token operator\">=</span><span class=\"token number\">0.096</span> ms\n<span class=\"token number\">64</span> bytes <span class=\"token keyword\">from</span> <span class=\"token number\">192.168</span><span class=\"token number\">.57</span><span class=\"token number\">.3</span><span class=\"token punctuation\">:</span> icmp_seq<span class=\"token operator\">=</span><span class=\"token number\">3</span> ttl<span class=\"token operator\">=</span><span class=\"token number\">64</span> time<span class=\"token operator\">=</span><span class=\"token number\">0.089</span> ms\n<span class=\"token number\">64</span> bytes <span class=\"token keyword\">from</span> <span class=\"token number\">192.168</span><span class=\"token number\">.57</span><span class=\"token number\">.3</span><span class=\"token punctuation\">:</span> icmp_seq<span class=\"token operator\">=</span><span class=\"token number\">4</span> ttl<span class=\"token operator\">=</span><span class=\"token number\">64</span> time<span class=\"token operator\">=</span><span class=\"token number\">0.085</span> ms\n<span class=\"token number\">64</span> bytes <span class=\"token keyword\">from</span> <span class=\"token number\">192.168</span><span class=\"token number\">.57</span><span class=\"token number\">.3</span><span class=\"token punctuation\">:</span> icmp_seq<span class=\"token operator\">=</span><span class=\"token number\">5</span> ttl<span class=\"token operator\">=</span><span class=\"token number\">64</span> time<span class=\"token operator\">=</span><span class=\"token number\">0.086</span> ms\n\n<span class=\"token operator\">--</span><span class=\"token operator\">-</span> <span class=\"token number\">192.168</span><span class=\"token number\">.57</span><span class=\"token number\">.3</span> ping statistics <span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token number\">5</span> <span class=\"token class-name\">packets</span> transmitted<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> received<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token class-name\">packet</span> loss<span class=\"token punctuation\">,</span> time 38ms\nrtt min<span class=\"token operator\">/</span>avg<span class=\"token operator\">/</span>max<span class=\"token operator\">/</span>mdev <span class=\"token operator\">=</span> <span class=\"token number\">0.051</span><span class=\"token operator\">/</span><span class=\"token number\">0.081</span><span class=\"token operator\">/</span><span class=\"token number\">0.096</span><span class=\"token operator\">/</span><span class=\"token number\">0.017</span> ms</code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"🤞-link\" style=\"position:relative;\"><a href=\"#%F0%9F%A4%9E-link\" aria-label=\"🤞 link permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤞 LINK</h2>\n<ul>\n<li>컨테이너끼리 서로 통신하기 위해선 기본적으로 <code class=\"language-text\">bridge</code>를 사용합니다.</li>\n<li>하지만 web 서버 역할의 컨테이너와 DB 서버 역할의 컨테이너가 있습니다고 가정해보고,<br>\n만약, 이 두 container 사이를 연동해야 합니다고 하면 LINK를 사용해야 합니다.</li>\n</ul>\n<br/>\n<h3 id=\"link를-쓰는-정확한-이유\" style=\"position:relative;\"><a href=\"#link%EB%A5%BC-%EC%93%B0%EB%8A%94-%EC%A0%95%ED%99%95%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"link를 쓰는 정확한 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LINK를 쓰는 정확한 이유</h3>\n<p>동일 host 상에 배포된 container는 사실 Private IP 를 이용해 통신이 가능합니다. </p>\n<ul>\n<li>\n<p>아래 두개의 컨테이너를 생성해놓았습니다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n<span class=\"token class-name\">aa342876ff52</span>        centos<span class=\"token punctuation\">:</span>latest       <span class=\"token string\">\"/bin/bash\"</span>         <span class=\"token number\">25</span> seconds ago      Up <span class=\"token number\">23</span> seconds                           nasa2\n32d0528aa4e4        centos<span class=\"token punctuation\">:</span>latest       <span class=\"token string\">\"/bin/bash\"</span>         <span class=\"token number\">27</span> seconds ago      Up <span class=\"token number\">26</span> seconds                           nasa1\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ \nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker inspect nasa2 <span class=\"token operator\">|</span> grep <span class=\"token operator\">-</span>i IPA\n            <span class=\"token string\">\"SecondaryIPAddresses\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"IPAddress\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"172.17.0.3\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"IPAMConfig\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"IPAddress\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"172.17.0.3\"</span><span class=\"token punctuation\">,</span>\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker inspect nasa1 <span class=\"token operator\">|</span> grep <span class=\"token operator\">-</span>i IPA\n            <span class=\"token string\">\"SecondaryIPAddresses\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"IPAddress\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"172.17.0.2\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"IPAMConfig\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"IPAddress\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"172.17.0.2\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>각각 <code class=\"language-text\">172.17.0.2</code> , <code class=\"language-text\">172.17.0.3</code> Private IP를 가지고 있습니다</p>\n<br/>\n</li>\n<li>\n<p>두 컨테이너의 핑 테스트 결과 정상적입니다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker exec nasa1 ping <span class=\"token operator\">-</span>c3 <span class=\"token number\">172.17</span><span class=\"token number\">.0</span><span class=\"token number\">.3</span>\nPING <span class=\"token number\">172.17</span><span class=\"token number\">.0</span><span class=\"token number\">.3</span> <span class=\"token punctuation\">(</span><span class=\"token number\">172.17</span><span class=\"token number\">.0</span><span class=\"token number\">.3</span><span class=\"token punctuation\">)</span> <span class=\"token function\">56</span><span class=\"token punctuation\">(</span><span class=\"token number\">84</span><span class=\"token punctuation\">)</span> bytes of data<span class=\"token punctuation\">.</span>\n<span class=\"token number\">64</span> bytes <span class=\"token keyword\">from</span> <span class=\"token number\">172.17</span><span class=\"token number\">.0</span><span class=\"token number\">.3</span><span class=\"token punctuation\">:</span> icmp_seq<span class=\"token operator\">=</span><span class=\"token number\">1</span> ttl<span class=\"token operator\">=</span><span class=\"token number\">64</span> time<span class=\"token operator\">=</span><span class=\"token number\">0.134</span> ms\n<span class=\"token number\">64</span> bytes <span class=\"token keyword\">from</span> <span class=\"token number\">172.17</span><span class=\"token number\">.0</span><span class=\"token number\">.3</span><span class=\"token punctuation\">:</span> icmp_seq<span class=\"token operator\">=</span><span class=\"token number\">2</span> ttl<span class=\"token operator\">=</span><span class=\"token number\">64</span> time<span class=\"token operator\">=</span><span class=\"token number\">0.105</span> ms\n<span class=\"token number\">64</span> bytes <span class=\"token keyword\">from</span> <span class=\"token number\">172.17</span><span class=\"token number\">.0</span><span class=\"token number\">.3</span><span class=\"token punctuation\">:</span> icmp_seq<span class=\"token operator\">=</span><span class=\"token number\">3</span> ttl<span class=\"token operator\">=</span><span class=\"token number\">64</span> time<span class=\"token operator\">=</span><span class=\"token number\">0.089</span> ms\n\n<span class=\"token operator\">--</span><span class=\"token operator\">-</span> <span class=\"token number\">172.17</span><span class=\"token number\">.0</span><span class=\"token number\">.3</span> ping statistics <span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token number\">3</span> <span class=\"token class-name\">packets</span> transmitted<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> received<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token class-name\">packet</span> loss<span class=\"token punctuation\">,</span> time 43ms\nrtt min<span class=\"token operator\">/</span>avg<span class=\"token operator\">/</span>max<span class=\"token operator\">/</span>mdev <span class=\"token operator\">=</span> <span class=\"token number\">0.089</span><span class=\"token operator\">/</span><span class=\"token number\">0.109</span><span class=\"token operator\">/</span><span class=\"token number\">0.134</span><span class=\"token operator\">/</span><span class=\"token number\">0.020</span> ms</code></pre></div>\n</li>\n</ul>\n<p>위의 실습 같이 컨테이너는 이미 서로간의 통신이 가능한데 굳이 LINK를 써야 하는 이유는 무엇일까?  </p>\n<p>이는 컨테이너 사이의 IP 기반 연동의 문제점 때문입니다<br>\nContainer 의 IP 는 유동적인 성격을 띄고 있기 때문에 언제든 변할 수 있습니다.<br>\nContainer 는 일종의 <code class=\"language-text\">Process</code> 이므로, 언제든 생성/소멸 될 수 있기에<br>\n만약 컨테이너가 중지 되었다가 시작하면, Process가 다시 새롭게 생성되는 것과 같습니다<br>\n즉, 이때 컨테이너에게 부여되는 <code class=\"language-text\">Private IP</code>는 변할 수 있습니다는 것입니다.<br>\n그래서 컨테이너의 연동을 위한 방법으로 IP 기반의 연동은 권고되지 않습니다.<br>\n따라서 연동으로 권고 되고 있는 방법이 바로 LINK 기능인 것입니다.</p>\n<br/>\n<hr>\n<h2 id=\"-link-설정\" style=\"position:relative;\"><a href=\"#-link-%EC%84%A4%EC%A0%95\" aria-label=\" link 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍 LINK 설정</h2>\n<p>link를 이용한 컨테이너 연동</p>\n<ul>\n<li>\n<p>링크를 사용하기 위해 <code class=\"language-text\">httpd</code> 기반의 컨테이너를 하나 생성했습니다다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run <span class=\"token operator\">-</span>itd <span class=\"token operator\">--</span>name web<span class=\"token operator\">-</span><span class=\"token class-name\">nasa</span> httpd<span class=\"token punctuation\">:</span>latest\n7881267cb8e1abc34ba13fe4783759ea1ca285ca5e01de56d252206f0bbd0e5b\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ \nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker ps <span class=\"token operator\">|</span> grep web<span class=\"token operator\">-</span>nasa\n7881267cb8e1        httpd<span class=\"token punctuation\">:</span>latest        <span class=\"token string\">\"httpd-foreground\"</span>   <span class=\"token number\">11</span> seconds ago      Up <span class=\"token number\">10</span> seconds       <span class=\"token number\">80</span><span class=\"token operator\">/</span>tcp              web<span class=\"token operator\">-</span>nasa</code></pre></div>\n<br/>\n</li>\n<li>\n<p>링크를 사용해서 <code class=\"language-text\">centos</code> 기반의 컨테이너를 하나 생성했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run <span class=\"token operator\">-</span>itd <span class=\"token operator\">--</span>name  link<span class=\"token operator\">-</span>nasa <span class=\"token operator\">--</span>link web<span class=\"token operator\">-</span><span class=\"token class-name\">nasa</span> centos<span class=\"token punctuation\">:</span>latest\n9e8f15588f0fcd8920720af6446adfa59f21cd1c15c057518b874b89b077db4d\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ \nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker ps <span class=\"token operator\">|</span> grep link\n9e8f15588f0f        centos<span class=\"token punctuation\">:</span>latest       <span class=\"token string\">\"/bin/bash\"</span>          <span class=\"token number\">6</span> seconds ago       Up <span class=\"token number\">5</span> seconds                            link<span class=\"token operator\">-</span>nasa</code></pre></div>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">curl</code> 명령을 이용해 두 컨테이너의 통신이 정상임을 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker exec link<span class=\"token operator\">-</span>nasa curl web<span class=\"token operator\">-</span>nasa\n<span class=\"token operator\">%</span> Total    <span class=\"token operator\">%</span> Received <span class=\"token operator\">%</span> Xferd  Average Speed   Time    Time     Time  Current\n                                Dload  Upload   Total   Spent    Left  Speed\n<span class=\"token number\">100</span>    <span class=\"token number\">45</span>  <span class=\"token number\">100</span>    <span class=\"token number\">45</span>    <span class=\"token number\">0</span>     <span class=\"token number\">0</span>  <span class=\"token number\">45000</span>      <span class=\"token number\">0</span> <span class=\"token operator\">--</span><span class=\"token punctuation\">:</span><span class=\"token operator\">--</span><span class=\"token punctuation\">:</span><span class=\"token operator\">--</span> <span class=\"token operator\">--</span><span class=\"token punctuation\">:</span><span class=\"token operator\">--</span><span class=\"token punctuation\">:</span><span class=\"token operator\">--</span> <span class=\"token operator\">--</span><span class=\"token punctuation\">:</span><span class=\"token operator\">--</span><span class=\"token punctuation\">:</span><span class=\"token operator\">--</span> <span class=\"token number\">45000</span>\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>It works<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></code></pre></div>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">link-nasa</code> 서버가 <code class=\"language-text\">web-nasa</code>라는 이름으로 통신할 수 있는 이유는</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker exec link<span class=\"token operator\">-</span>nasa cat <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>hosts\n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>\tlocalhost\n<span class=\"token punctuation\">::</span><span class=\"token number\">1</span>\tlocalhost ip6<span class=\"token operator\">-</span>localhost ip6<span class=\"token operator\">-</span><span class=\"token class-name\">loopback</span>\nfe00<span class=\"token punctuation\">::</span><span class=\"token number\">0</span>\tip6<span class=\"token operator\">-</span><span class=\"token class-name\">localnet</span>\nff00<span class=\"token punctuation\">::</span><span class=\"token number\">0</span>\tip6<span class=\"token operator\">-</span><span class=\"token class-name\">mcastprefix</span>\nff02<span class=\"token punctuation\">::</span><span class=\"token number\">1</span>\tip6<span class=\"token operator\">-</span><span class=\"token class-name\">allnodes</span>\nff02<span class=\"token punctuation\">::</span><span class=\"token number\">2</span>\tip6<span class=\"token operator\">-</span>allrouters\n<span class=\"token number\">172.17</span><span class=\"token number\">.0</span><span class=\"token number\">.2</span>\tweb<span class=\"token operator\">-</span>nasa 7881267cb8e1\n<span class=\"token number\">172.17</span><span class=\"token number\">.0</span><span class=\"token number\">.3</span>\t9e8f15588f0f</code></pre></div>\n<p>다음과 같이 <code class=\"language-text\">/etc/hosts</code> 파일에 별칭이 정의되어 있기 때문이다.</p>\n<br/>\n</li>\n<li>\n<p>추가적으로 특정 <code class=\"language-text\">별칭</code>으로 정의하여 컨테이너의 <code class=\"language-text\">링크</code>를 만들 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run <span class=\"token operator\">-</span>itd <span class=\"token operator\">--</span>name link<span class=\"token operator\">-</span><span class=\"token keyword\">alias</span> <span class=\"token operator\">--</span>link web<span class=\"token operator\">-</span>nasa<span class=\"token punctuation\">:</span><span class=\"token class-name\">nasa1515</span> centos<span class=\"token punctuation\">:</span>latest\nee50a1bd8ce3ac947c04cec526f3f5b7950e5ecd67fa99e211cc0b155def7fb7\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ \nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker ps <span class=\"token operator\">|</span> grep link<span class=\"token operator\">-</span><span class=\"token keyword\">alias</span>\n<span class=\"token class-name\">ee50a1bd8ce3</span>        centos<span class=\"token punctuation\">:</span>latest       <span class=\"token string\">\"/bin/bash\"</span>          <span class=\"token number\">9</span> seconds ago       Up <span class=\"token number\">8</span> seconds                            link<span class=\"token operator\">-</span><span class=\"token keyword\">alias</span>\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ \n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker exec link<span class=\"token operator\">-</span><span class=\"token keyword\">alias</span> curl nasa1515\n<span class=\"token operator\">%</span> Total    <span class=\"token operator\">%</span> Received <span class=\"token operator\">%</span> Xferd  Average Speed   Time    Time     Time  Current\n                                Dload  Upload   Total   Spent    Left  Speed\n<span class=\"token number\">100</span>    <span class=\"token number\">45</span>  <span class=\"token number\">100</span>    <span class=\"token number\">45</span>    <span class=\"token number\">0</span>     <span class=\"token number\">0</span>  <span class=\"token number\">45000</span>      <span class=\"token number\">0</span> <span class=\"token operator\">--</span><span class=\"token punctuation\">:</span><span class=\"token operator\">--</span><span class=\"token punctuation\">:</span><span class=\"token operator\">--</span> <span class=\"token operator\">--</span><span class=\"token punctuation\">:</span><span class=\"token operator\">--</span><span class=\"token punctuation\">:</span><span class=\"token operator\">--</span> <span class=\"token operator\">--</span><span class=\"token punctuation\">:</span><span class=\"token operator\">--</span><span class=\"token punctuation\">:</span><span class=\"token operator\">--</span> <span class=\"token number\">45000</span>\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>It works<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span>\n\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker exec link<span class=\"token operator\">-</span><span class=\"token keyword\">alias</span> cat <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>hosts\n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>\tlocalhost\n<span class=\"token punctuation\">::</span><span class=\"token number\">1</span>\tlocalhost ip6<span class=\"token operator\">-</span>localhost ip6<span class=\"token operator\">-</span><span class=\"token class-name\">loopback</span>\nfe00<span class=\"token punctuation\">::</span><span class=\"token number\">0</span>\tip6<span class=\"token operator\">-</span><span class=\"token class-name\">localnet</span>\nff00<span class=\"token punctuation\">::</span><span class=\"token number\">0</span>\tip6<span class=\"token operator\">-</span><span class=\"token class-name\">mcastprefix</span>\nff02<span class=\"token punctuation\">::</span><span class=\"token number\">1</span>\tip6<span class=\"token operator\">-</span><span class=\"token class-name\">allnodes</span>\nff02<span class=\"token punctuation\">::</span><span class=\"token number\">2</span>\tip6<span class=\"token operator\">-</span>allrouters\n<span class=\"token number\">172.17</span><span class=\"token number\">.0</span><span class=\"token number\">.2</span>\tnasa1515 7881267cb8e1 web<span class=\"token operator\">-</span>nasa\n<span class=\"token number\">172.17</span><span class=\"token number\">.0</span><span class=\"token number\">.4</span>\tee50a1bd8ce3</code></pre></div>\n<p>위와 같이 <code class=\"language-text\">link-alias</code>라는 이름의 컨테이너를 생성할때<br>\n<code class=\"language-text\">web-nasa</code>서버의 별칭을 <code class=\"language-text\">nasa1515</code>로 설정해주었을때 정상적으로 동작함을 확인 할 수 있습니다.<br>\n링크를 걸 경우 자동적으로 hosts에 등록이 됩니다.</p>\n</li>\n</ul>\n<br/>\n<hr>\n<h3 id=\"link-방식의-한계\" style=\"position:relative;\"><a href=\"#link-%EB%B0%A9%EC%8B%9D%EC%9D%98-%ED%95%9C%EA%B3%84\" aria-label=\"link 방식의 한계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LINK 방식의 한계</h3>\n<p>동적 IP에 따른 이슈를 피하기 위해선 LINK 기능을 이용해야 합니다.<br>\n하지만 LINK 방식만으로는 여전히 한계가 있습니다.   </p>\n<p>동일 docker host 에 존재하는 컨테이너들 사이에서만 유효하다.<br>\n(만약 다수의 docker host를 운영할 경우에 타 host에 상주하는 컨테이너 사이에는 link 옵션 이용이 불가하다.)</p>\n<p>이유는 컨테이너의 hosts 파일의 관리를 docker host가 직접 수행하기 때문이다. </p>\n<p>이러한 이슈를 해결하고 싶은 경우에는<br>\ndocker swarm 같은 orchestration 툴을 도입하거나 dynamic DNS 를 구축해 사용해야 합니다</p>\n<br/>\n<hr>\n<h2 id=\"-port-forwarding\" style=\"position:relative;\"><a href=\"#-port-forwarding\" aria-label=\" port forwarding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎉 PORT FORWARDING</h2>\n<ul>\n<li>Container Port 외부 expose(Port Forwarding)<br>\n브릿지 네트워크를 사용하는 컨테이너를 생성하면 기본적으로 외부와 통신이 불가능한 상태로 생성됩니다.<br>\n따라서 외부와 통신을 위해서는 <code class=\"language-text\">Port Forwarding</code>이 필요하다. 방법은 container 를 생성할때 <code class=\"language-text\">-p option</code>을 이용하면 됩니다. </li>\n<li>\n<p><code class=\"language-text\">pf-nasa-web</code>이라는 컨테이너의 80포트를 포드포워딩하여 생성해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run <span class=\"token operator\">-</span>itd <span class=\"token operator\">--</span>name pf<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>web <span class=\"token operator\">-</span>p <span class=\"token number\">8080</span><span class=\"token punctuation\">:</span><span class=\"token number\">80</span> httpd<span class=\"token punctuation\">:</span>latest\n2411f635aaef7a70caa0a09ee14289c48de71187ef375dda84d29219c5b56737\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ \nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker ps <span class=\"token operator\">-</span>a <span class=\"token operator\">|</span> grep pf\n2411f635aaef        httpd<span class=\"token punctuation\">:</span>latest        <span class=\"token string\">\"httpd-foreground\"</span>   <span class=\"token number\">7</span> seconds ago       Up <span class=\"token number\">6</span> seconds                <span class=\"token number\">0.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token punctuation\">:</span><span class=\"token number\">8080</span><span class=\"token operator\">-></span><span class=\"token number\">80</span><span class=\"token operator\">/</span>tcp   pf<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>web</code></pre></div>\n<p>호스트의 8080포트에 접속했을때 80포트로 접속할 수 있도록 포트포워딩이 됨을 확인할 수 있습니다</p>\n<br/>\n</li>\n<li>\n<p>HOST 서버의 8080포트로 <code class=\"language-text\">curl</code> 명령을 사용하면 정상적으로 받아온다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ <span class=\"token class-name\">curl</span> localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span>\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>It works<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></code></pre></div>\n<br/>\n</li>\n<li>\n<p>HOST 서버의 8080포트의 연결을 확인해보면 <code class=\"language-text\">docker-proxy</code>라는 이름의 프로세스로 매칭되어있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ sudo netstat <span class=\"token operator\">-</span>anp <span class=\"token operator\">|</span> grep <span class=\"token number\">8080</span>\ntcp6       <span class=\"token number\">0</span>      <span class=\"token number\">0</span> <span class=\"token punctuation\">::</span><span class=\"token punctuation\">:</span><span class=\"token number\">8080</span>                 <span class=\"token punctuation\">::</span><span class=\"token punctuation\">:</span><span class=\"token operator\">*</span>                    LISTEN      <span class=\"token number\">13380</span><span class=\"token operator\">/</span>docker<span class=\"token operator\">-</span>proxy</code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"🤳-docker-proxy\" style=\"position:relative;\"><a href=\"#%F0%9F%A4%B3-docker-proxy\" aria-label=\"🤳 docker proxy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤳 Docker-Proxy</h2>\n<p> 위에서 확인한 것처럼 포트포워딩을 하게되면 <code class=\"language-text\">docker-proxy</code>라는 프로세스가 매칭됩니다.<br>\n이 프로세스의 목적은 그 이름처럼 docker host 로 들어온 요청을 container 로 넘기는 것 뿐입니다.<br>\ndocker-proxy 는 kernel이 아닌 userland 에서 수행되기 때문에 kernel 과 상관없이 host가 받은 패킷을 그대로 container의 port로 넘겨줍니다. </p>\n<br/>\n<ul>\n<li>\n<p>container 를 시작할때 port를 외부로 노출하도록 설정하게 되면,<br>\ndocker host에는 docker-proxy 라는 프로세스가 생성되게 됩니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ ps <span class=\"token operator\">-</span>ef <span class=\"token operator\">|</span> grep docker<span class=\"token operator\">-</span>proxy\nroot     <span class=\"token number\">13380</span>  <span class=\"token number\">1985</span>  <span class=\"token number\">0</span> <span class=\"token number\">12</span><span class=\"token punctuation\">:</span><span class=\"token number\">03</span> <span class=\"token punctuation\">?</span>        <span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span> <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>docker<span class=\"token operator\">-</span>proxy <span class=\"token operator\">-</span>proto tcp <span class=\"token operator\">-</span>host<span class=\"token operator\">-</span>ip <span class=\"token number\">0.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span> <span class=\"token operator\">-</span>host<span class=\"token operator\">-</span>port <span class=\"token number\">8080</span> <span class=\"token operator\">-</span>container<span class=\"token operator\">-</span>ip <span class=\"token number\">172.17</span><span class=\"token number\">.0</span><span class=\"token number\">.2</span> <span class=\"token operator\">-</span>container<span class=\"token operator\">-</span>port <span class=\"token number\">80</span>\nstudent  <span class=\"token number\">13856</span> <span class=\"token number\">26014</span>  <span class=\"token number\">0</span> <span class=\"token number\">12</span><span class=\"token punctuation\">:</span><span class=\"token number\">13</span> pts<span class=\"token operator\">/</span><span class=\"token number\">2</span>    <span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span> grep docker<span class=\"token operator\">-</span>proxy</code></pre></div>\n<ul>\n<li>proxy 프로세스는 container의 port를 노출하도록 설정한 수 만큼 추가로 프로세스가 생성됩니다 (run process per port).  </li>\n<li>만약 하나의 Port를 오픈하는 두개의 Container를 생성합니다면 docker-proxy는 두개가 생성됩니다.  </li>\n<li>또한, 한개의 container 에 두개의 port 에 대해 외부로 노출하도록 설정합니다면, 마찬가지로 docker-proxy 프로세스는 <code class=\"language-text\">두개</code>가 생성됩니다.</li>\n</ul>\n<br/>\n</li>\n<li>\n<p>docker-proxy 를 사용하는 이유  </p>\n<p> <code class=\"language-text\">docker-proxy</code>가 존재하는 가장 큰 이유는<br>\ndocker host가 iptables 의 NAT를 사용하지 못하는 상황에 대한 처리이다.<br>\n만약 정책상의 이유로 docker host의 iptables 나 ip_forward 를 enable 하지 못하는 경우에는<br>\ndocker-proxy 프로세스가 패킷을 포워딩하는 역할을 대신하게 됩니다. </p>\n<p>그래서 실제로 docker host로 요청이 들어온 패킷이 container 로 전달되는 것은<br>\ndocker-proxy 와 무관하게 docker host의 iptables 에 의해 동작됩니다. </p>\n<p> 즉, docker-proxy 프로세스를 kill 해도 외부에서 들어오는 요청이<br>\ncontainer로 전달되는데 문제가 없다는 의미입니다.</p>\n</li>\n</ul>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-macvlan\">✔ MACVLAN</a></p>\n<ul>\n<li><a href=\"#macvlan-driver-%EA%B5%AC%EC%A1%B0\">MACVLAN Driver 구조</a></li>\n<li><a href=\"#macvlan-%EA%B5%AC%EB%8F%99-%EB%B0%A9%EC%8B%9D\">MACVLAN 구동 방식</a></li>\n</ul>\n</li>\n<li><a href=\"#-macvlan-%EC%84%A4%EC%A0%95\">✌ MACVLAN 설정</a></li>\n<li>\n<p><a href=\"#%F0%9F%A4%9E-link\">🤞 LINK</a></p>\n<ul>\n<li><a href=\"#link%EB%A5%BC-%EC%93%B0%EB%8A%94-%EC%A0%95%ED%99%95%ED%95%9C-%EC%9D%B4%EC%9C%A0\">LINK를 쓰는 정확한 이유</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-link-%EC%84%A4%EC%A0%95\">👍 LINK 설정</a></p>\n<ul>\n<li><a href=\"#link-%EB%B0%A9%EC%8B%9D%EC%9D%98-%ED%95%9C%EA%B3%84\">LINK 방식의 한계</a></li>\n</ul>\n</li>\n<li><a href=\"#-port-forwarding\">🎉 PORT FORWARDING</a></li>\n<li><a href=\"#%F0%9F%A4%B3-docker-proxy\">🤳 Docker-Proxy</a></li>\n</ul>\n</div>","frontmatter":{"date":"June 26, 2021","title":"[DOCKER] - MACVLAN, LINK","categories":"DOCKER","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/docker-net2/"}},"prev":{"id":"91aeb602-995f-5d6f-bf10-8331113bcafe","html":"<p>머리말  </p>\n<p> 이번 포스트에서는 Docker에서 조금도 간편화된 방법으로 이미지를 제작할 수 있는 Dockerfile에 대해서 포스팅합니다.</p>\n<hr>\n<h2 id=\"-dockerfile\" style=\"position:relative;\"><a href=\"#-dockerfile\" aria-label=\" dockerfile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ DOCKERFILE</h2>\n<p><code class=\"language-text\">Dockerfile</code>은 컨테이너를 만들고 해야하는 일련의 작업들을 미리 선언함으로써 매번 해당 작업을 하지않고도,<br>\n컨테이너 생성시 자동으로 등록된 작업이 실행된 후 컨테이너를 생성할 수 있는 파일입니다.</p>\n<p>Dockerfile은 어플리케이션 개발 외에도 도커 허브에 배포할때,이미지가 아닌, Dockerfile을 이용하여 배포할 수도 있습니다.</p>\n<ul>\n<li>Dockerfile은 COMMAND-VALUE 쌍으로 구성된 지시어로 이루어진 도커 이미지 설정 파일입니다.</li>\n<li>베이스 이미지를 지정, 컨테이너에서 실행되는 명령을 정의, 환경 변수 설정 등 컨테이너에서 실행되는 데몬을 지정할 수 있습니다.</li>\n<li>Dockerfile에서 파일 시스템에 변경 요청하는 지시어는 베이스 이미지 레이어의 상위 레이어가 생성되어 변경사항이 적용됩니다.</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"-docker-file-지시어\" style=\"position:relative;\"><a href=\"#-docker-file-%EC%A7%80%EC%8B%9C%EC%96%B4\" aria-label=\" docker file 지시어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✌ DOCKER FILE 지시어</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">FROM</code><br>\nFROM 지시어로 베이스 이미지를 지정하여 레이어를 생성합니다.</p>\n<p>지정된 이미지가 도커 호스트로 자동으로 <code class=\"language-text\">pull down</code> 됩니다.<br>\n도커 호스트 또는 Docker Registry(DockerHub, Private Docker Registry, ..)에 있는 이미지만 지정이 가능합니다.</p>\n<p><code class=\"language-text\">FROM</code>지시어는 세가지 형식으로 사용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">FROM IMAGE\n\n<span class=\"token class-name\">FROM</span> IMAGE<span class=\"token punctuation\">:</span>TAG\n\nFROM IMAGE@DIGEST</code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<ul>\n<li>\n<p><code class=\"language-text\">RUN</code><br>\n베이스 이미지를 기반으로 패키지를 설치하거나 환경을 구성할 때 사용합니다.</p>\n<p>두가지 사용 형식이 있지만, 결과적으로 보면 큰 차이는 없습니다.</p>\n<ul>\n<li>쉘 명령<br>\n/bin/sh -c 으로 실행하는 것과 동일하게 작동합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">RUN yum <span class=\"token operator\">-</span>y install httpd</code></pre></div>\n<p>자동으로 /bin/sh -c yum -y install httpd 로 변환됩니다.</p>\n<ul>\n<li>Exec 명령<br>\n쉘을 거치지 않고 바로 실행합니다.<br>\n따라서 환경 변수를 입력할 수 없고, JSON 형식으로 입력해야만 합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">RUN <span class=\"token punctuation\">[</span> <span class=\"token string\">\"/bin/bash\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yum -y install httpd\"</span> <span class=\"token punctuation\">]</span>   </code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<ul>\n<li>\n<p><code class=\"language-text\">CMD</code><br>\n빌드한 이미지로부터 컨테이너가 실행될 때 특정 프로세스나 데몬을 실행하기 위해 사용됩니다.</p>\n<p>CMD 지시어를 여러번 사용할 경우, 마지막 지시어만 적용되므로 한번만 사용해야 합니다.</p>\n<p>RUN과 마찬가지로 쉘 명령과 Exec 명령 두가지 형식으로 사용할 수 있습니다.</p>\n<ul>\n<li>쉘 명령  </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">FROM centos\nRUN yum <span class=\"token operator\">-</span>y install httpd\nCMD <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>sbin<span class=\"token operator\">/</span>httpd <span class=\"token operator\">-</span>D FOREGROUND</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker build <span class=\"token operator\">-</span><span class=\"token class-name\">t</span> centos<span class=\"token punctuation\">:</span>cmd <span class=\"token punctuation\">.</span>\n$ docker inspect centos<span class=\"token operator\">-</span>web<span class=\"token punctuation\">:</span>cmd\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token string\">\"ContainerConfig\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Cmd\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"#(nop) \"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"CMD [\\\"/bin/sh\\\" \\\"-c\\\" \\\"/usr/sbin/httpd -D FOREGROUND\\\"]\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Entrypoint\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Config\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Cmd\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"/usr/sbin/httpd -D FOREGROUND\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Entrypoint\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>만일 docker run 시 명령어를 지정하면 CMD는 무시되고 지정된 명령어가 수행됩니다.</p>\n</li>\n</ul>\n<br/>\n<hr>\n<ul>\n<li>\n<p><code class=\"language-text\">ENTRYPOINT</code><br>\n빌드한 이미지로부터 컨테이너가 실행될 때 특정 프로세스나 데몬을 실행하기 위해 사용됩니다.</p>\n<p>docker run 명령을 실행할 때 실행되므로 CMD 지시어보다 우선순위가 높습니다. </p>\n<p>RUN 지시어와 동일하게 쉘 명령과 Exec  명령 두가지 형식으로 사용할 수 있습니다.</p>\n<ul>\n<li>쉘 명령  </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>Dockerfile\n\n<span class=\"token class-name\">FROM</span> centos<span class=\"token punctuation\">:</span>latest\nRUN yum <span class=\"token operator\">-</span>y install httpd\nENTRYPOINT <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>sbin<span class=\"token operator\">/</span>httpd <span class=\"token operator\">-</span>D FOREGROUND</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker build <span class=\"token operator\">-</span><span class=\"token class-name\">t</span> centos<span class=\"token punctuation\">:</span>entrypoint <span class=\"token punctuation\">.</span>\n\n$ docker inspect centos<span class=\"token operator\">-</span>web<span class=\"token punctuation\">:</span>entrypoint\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token string\">\"ContainerConfig\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Cmd\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"#(nop) \"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"ENTRYPOINT [\\\"/bin/sh\\\" \\\"-c\\\" \\\"/usr/sbin/httpd -D FOREGROUND\\\"]\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Entrypoint\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"/usr/sbin/httpd -D FOREGROUND\"</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Config\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Cmd\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Entrypoint\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"/usr/sbin/httpd -D FOREGROUND\"</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p><code class=\"language-text\">Entrypoint</code> 설정이 추가된 것을 확인할 수 있습니다. </p>\n<p>CMD 지시어와는 달리 docker run 시 지정한 명령어는 무시되고 ENTRYPOINT 지시어가 실행됩니다.<br>\n쉘로 접속하려면 docker exec 명령을 사용해야 합니다.</p>\n<p>mysql 이미지의 경우 ENTRYPOINT docker-entrypoint.sh 지시어가 포함되어있습니다.<br>\n이 스크립트에서 특정 환경변수를 검사하여 컨테이너를 실행합니다.</p>\n</li>\n</ul>\n<br/>\n<hr>\n<ul>\n<li>\n<p><code class=\"language-text\">ONBUILD</code><br>\n베이스 이미지를 생성할 때 사용하는 지시어로서,<br>\n이미지를 빌드한 후 해당 이미지를 기반으로 다른 이미지를 빌드할 때 적용되는 지시어다.</p>\n<p>ONBUILD 명령어가 적용된 이미지로 컨테이너를 생성해도 컨테이너는 해당 명령어를 실행하지 않습니다.<br>\n해당 이미지를 베이스 이미지로 해서 다른 이미지를 빌드할때 명령어가 실행됩니다.</p>\n<p><code class=\"language-text\">ONBUILD ADD</code> 명령어는 도커 호스트의 파일을 컨테이너의 특정 디렉토리에 적용할 때 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">FROM centos\nRUN yum <span class=\"token operator\">-</span>y install httpd\nONBUILD ADD index<span class=\"token punctuation\">.</span>html <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>www<span class=\"token operator\">/</span>html\nCMD <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>sbin<span class=\"token operator\">/</span>httpd <span class=\"token operator\">-</span>D FOREGROUND</code></pre></div>\n</li>\n<li>\n<p>이미지를 빌드합니다.<br>\nFROM 지시어로 생성된 centos 레이어와 RUN 지시어로 생성된 레이어 두개만 나타납니다.<br>\nONBUILD로 지정된 ADD index.html /var/www/html 명령은 실행되지 않고<br>\nOnBuild 필드로 업데이트 된 것을 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker build <span class=\"token operator\">-</span><span class=\"token class-name\">t</span> centos<span class=\"token punctuation\">:</span>pre<span class=\"token operator\">-</span>onbuild <span class=\"token punctuation\">.</span>\n\n$ docker inspect centos<span class=\"token operator\">-</span>web<span class=\"token punctuation\">:</span>pre<span class=\"token operator\">-</span>onbuild\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token string\">\"ContainerConfig\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Cmd\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"#(nop) \"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"CMD [\\\"/bin/sh\\\" \\\"-c\\\" \\\"/usr/sbin/httpd -D FOREGROUND\\\"]\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"OnBuild\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"ADD index.html /var/www/html\"</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Config\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Cmd\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"/usr/sbin/httpd -D FOREGROUND\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"OnBuild\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"ADD index.html /var/www/html\"</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"RootFS\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"layers\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Layers\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"sha256:d69483a6face4499acb974449d1303591fcbb5cdce5420f36f8a6607bda11854\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"sha256:f58e0e778d84a914c02385be57b7f0247b181f37b299579dd4d2e2fac9d9fa07\"</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p>OnBuild가 적용된 이미지를 기반으로 또 다른 이미지를 생성합니다.<br>\n이번엔 ADD 명령어가 수행되어야 하므로 도커 호스트에 index.html 파일이 존재하여야 합니다.<br>\nOnBuild 필드가 null로 생성되고, ADD index.html /var/www/html 지시어가 적용된 레이어가 추가되었기 때문에<br>\n총 3개의 레이어가 나타나게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\">FROM</span> centos<span class=\"token punctuation\">:</span>pre<span class=\"token operator\">-</span>onbuild\nRUN echo Test\nCMD <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>sbin<span class=\"token operator\">/</span>httpd <span class=\"token operator\">-</span>D FOREGROUND</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker build <span class=\"token operator\">-</span>t centos<span class=\"token operator\">-</span>web<span class=\"token punctuation\">:</span>onbuild <span class=\"token punctuation\">.</span>\n\n$ docker inspect centos<span class=\"token operator\">-</span>web<span class=\"token punctuation\">:</span>onbuild\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token string\">\"ContainerConfig\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Cmd\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"#(nop) \"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"CMD [\\\"/bin/sh\\\" \\\"-c\\\" \\\"/usr/sbin/httpd -D FOREGROUND\\\"]\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"OnBuild\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Config\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Cmd\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"/usr/sbin/httpd -D FOREGROUND\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"OnBuild\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"RootFS\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"layers\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Layers\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"sha256:d69483a6face4499acb974449d1303591fcbb5cdce5420f36f8a6607bda11854\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"sha256:f58e0e778d84a914c02385be57b7f0247b181f37b299579dd4d2e2fac9d9fa07\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"sha256:d44e7018ea29cc14dedaf309240f573ae182c7141827478b0ab806e99697d339\"</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<ul>\n<li>\n<p><code class=\"language-text\">VOLUME</code><br>\n도커 볼륨을 생성합니다.</p>\n<p><code class=\"language-text\">VOLUME</code> 지시어를 설정하면 해당 컨테이너 패스에 연결되는 디렉토리를 생성하고 마운트합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">FROM centos\nRUN mkdir <span class=\"token operator\">-</span>p <span class=\"token operator\">/</span>tmp<span class=\"token operator\">/</span>share\nVOLUME <span class=\"token operator\">/</span>tmp<span class=\"token operator\">/</span>share</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker build <span class=\"token operator\">-</span><span class=\"token class-name\">t</span> centos<span class=\"token punctuation\">:</span>volume <span class=\"token punctuation\">.</span>\n\n$ docker <span class=\"token class-name\">inspect</span> centos<span class=\"token punctuation\">:</span>volume\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token string\">\"ContainerConfig\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Volumes\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"/tmp/share\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Config\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Volumes\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"/tmp/share\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>생성된 이미지로 컨테이너를 실행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker run <span class=\"token operator\">-</span>itd <span class=\"token operator\">--</span>name centos<span class=\"token operator\">-</span><span class=\"token class-name\">volume</span> centos<span class=\"token punctuation\">:</span>volume</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker inspect centos<span class=\"token operator\">-</span>volume\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token string\">\"Mounts\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"volume\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"8fadb85943d78e953a16e643bc6ae1e5733419c8f8bb2d178cd0d45ba39f5217\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Source\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/var/lib/docker/volumes/8fadb85943d78e953a16e643bc6ae1e5733419c8f8bb2d178cd0d45ba39f5217/_data\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Destination\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/tmp/share\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Driver\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"local\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Mode\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"RW\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Propagation\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Config\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Volumes\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"/tmp/share\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p>도커 볼륨이 자동으로 생성된 것을 확인할 수 있습니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker volume ls\nDRIVER              VOLUME NAME\nlocal               8fadb85943d78e953a16e643bc6ae1e5733419c8f8bb2d178cd0d45ba39f5217</code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<ul>\n<li>\n<p><code class=\"language-text\">EXPOSE</code><br>\nEXPOSE 지시어를 사용하여 컨테이너가 사용할 포트를 지정합니다.  </p>\n<p>컨테이너를 실행할 때 반드시 포트 매핑 설정을 넣어주어야 합니다.<br>\n만일 호스트 네트워크 드라이버를 사용합니다면 포트 매핑을 설정하지 않고 자동으로 호스트 포트로 노출됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">FROM centos\nRUN yum <span class=\"token operator\">-</span>y install httpd\nRUN echo 'Hello nasa1515<span class=\"token operator\">!</span>' <span class=\"token operator\">></span> <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>www<span class=\"token operator\">/</span>html<span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>html\nCMD <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>sbin<span class=\"token operator\">/</span>httpd <span class=\"token operator\">-</span>D FOREGROUND\nEXPOSE <span class=\"token number\">80</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker build <span class=\"token operator\">-</span><span class=\"token class-name\">t</span> centos<span class=\"token punctuation\">:</span>expose <span class=\"token punctuation\">.</span>\n\n$ docker run <span class=\"token operator\">-</span>itd <span class=\"token operator\">--</span>name centos<span class=\"token operator\">-</span>expose <span class=\"token operator\">-</span>p <span class=\"token number\">80</span><span class=\"token punctuation\">:</span><span class=\"token number\">80</span> centos<span class=\"token punctuation\">:</span>expose\n\n\n이미지 정보에서 포트 노출을 확인할 수 있습니다<span class=\"token punctuation\">.</span>\n\n$ docker <span class=\"token class-name\">inspect</span> centos<span class=\"token punctuation\">:</span>expose\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token string\">\"ContainerConfig\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"ExposedPorts\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"80/tcp\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Config\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"ExposedPorts\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"80/tcp\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span></code></pre></div>\n<br/>\n<p>docker run 시 포트 매핑 옵션을 적용하여 호스트에서 해당 포트가 LISTEN 상태임을 확인할 수 있어야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ netstat <span class=\"token operator\">-</span>nltp\nActive <span class=\"token return-type class-name\">Internet</span> connections <span class=\"token punctuation\">(</span><span class=\"token class-name\">only</span> servers<span class=\"token punctuation\">)</span>\nProto Recv<span class=\"token operator\">-</span>Q Send<span class=\"token operator\">-</span>Q Local Address           Foreign Address         State       PID<span class=\"token operator\">/</span>Program name    \n<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\ntcp6       <span class=\"token number\">0</span>      <span class=\"token number\">0</span> <span class=\"token punctuation\">::</span><span class=\"token punctuation\">:</span><span class=\"token number\">80</span>                   <span class=\"token punctuation\">::</span><span class=\"token punctuation\">:</span><span class=\"token operator\">*</span>                    LISTEN      <span class=\"token operator\">-</span>                   </code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<ul>\n<li>\n<p><code class=\"language-text\">MAINTAINER</code><br>\nMAINTAINER 지시어는 이미지의 관리자 정보를 기록합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">MAINTAINER nasa1515</code></pre></div>\n<p>이미지 정보를 조회하면 Author 필드에 추가된 것을 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token string\">\"Author\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"nasa1515\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"entrypoint-와-cmd의-차이\" style=\"position:relative;\"><a href=\"#entrypoint-%EC%99%80-cmd%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"entrypoint 와 cmd의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍ENTRYPOINT 와 CMD의 차이</h2>\n<ul>\n<li><code class=\"language-text\">ENTRYPOINT와</code> <code class=\"language-text\">CMD</code>는 둘다 어플리케이션을 지정하는 지시어인데<br>\nENTRYPOINT 와 CMD 의 차이점은 바로 컨테이너 시작시 실행 명령에 대한 Default 지정 여부입니다.</li>\n<li>만약 <code class=\"language-text\">ENTRYPOINT</code> 를 사용하여 컨테이너 수행 명령을 정의한 경우<br>\n해당 컨테이너가 수행될 때 반드시 ENTRYPOINT 에서 지정한 명령을 수행되도록 지정 됩니다.</li>\n<li>\n<p><code class=\"language-text\">CMD</code>를 사용하여 수행 명령을 경우는<br>\n컨테이너를 실행할때 인자값을 주게 되면 Dockerfile 에 지정된 CMD 값을 대신 하여 지정한 인자값으로 변경하여 실행되게 됩니다.</p>\n<p>이해가 쉽게 Dockerfile 예제 써보겠습니다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># Dockerfile</span>\n\nFROM ubuntu\nCMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/df\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-h\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>위에서 Dockerfile 은 CMD 를 사용하여 df -h 명령을 한번 수행하고 종료되는 이미지를 만드는 것입니다.</p>\n<br/>\n</li>\n<li>\n<p>테스트를 위해 위 Dockerfile 을 사용해 nasa/df 라는 이름을 가진 이미지를 빌드해보죠. </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker build <span class=\"token operator\">-</span>t nasa<span class=\"token operator\">/</span>df <span class=\"token punctuation\">.</span>\n\nSending build context to Docker daemon  <span class=\"token number\">2</span><span class=\"token punctuation\">.</span>048kB\nStep <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token punctuation\">:</span> FROM ubuntu\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> 94e814e2efa8\nStep <span class=\"token number\">2</span><span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token punctuation\">:</span> CMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/df\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-h\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> Running <span class=\"token keyword\">in</span> c5f57fca1068\nRemoving intermediate container c5f57fca1068\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> 80eeec0ef7c0\nSuccessfully built 80eeec0ef7c0\nSuccessfully tagged nasa<span class=\"token operator\">/</span>df<span class=\"token punctuation\">:</span>latest</code></pre></div>\n<br/>\n<p>빌드된 nasa/df 이미지를 컨테이너로 동작시켜 보면<br>\nDockerfile 에서 정의된 대로 df -h 명령을 실행하고 종료되게 됩니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker run <span class=\"token operator\">--</span>name nasa<span class=\"token operator\">-</span>df nasa<span class=\"token operator\">/</span>df\n\nFilesystem      Size  Used Avail Use<span class=\"token operator\">%</span> Mounted <span class=\"token keyword\">on</span>\noverlay          59G  <span class=\"token number\">5</span><span class=\"token punctuation\">.</span>6G   50G  <span class=\"token number\">11</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>\ntmpfs            <span class=\"token number\">64M</span>     <span class=\"token number\">0</span>   <span class=\"token number\">64M</span>   <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>dev\ntmpfs          <span class=\"token number\">1000M</span>     <span class=\"token number\">0</span> <span class=\"token number\">1000M</span>   <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>sys<span class=\"token operator\">/</span>fs<span class=\"token operator\">/</span>cgroup\n<span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>sda1        59G  <span class=\"token number\">5</span><span class=\"token punctuation\">.</span>6G   50G  <span class=\"token number\">11</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>hosts\nshm              <span class=\"token number\">64M</span>     <span class=\"token number\">0</span>   <span class=\"token number\">64M</span>   <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>shm\ntmpfs          <span class=\"token number\">1000M</span>     <span class=\"token number\">0</span> <span class=\"token number\">1000M</span>   <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>proc<span class=\"token operator\">/</span>acpi\ntmpfs          <span class=\"token number\">1000M</span>     <span class=\"token number\">0</span> <span class=\"token number\">1000M</span>   <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>sys<span class=\"token operator\">/</span>firmware</code></pre></div>\n<br/>\n</li>\n<li>\n<p>이번에는, 컨테이너 실행시 추가 인자 값을 줘서 수행할 명령을 바꿔보죠.<br>\ndocker run 으로 컨테이너 실행시 마지막에 ps 명령을 추가 인자를 주고<br>\n실행해 보면 아래와 같은 결과를 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker run <span class=\"token operator\">--</span>name nasa<span class=\"token operator\">-</span>df nasa<span class=\"token operator\">/</span>df ps <span class=\"token operator\">-</span>aef\n\nUID        PID  PPID  C STIME TTY          TIME CMD\nroot         <span class=\"token number\">1</span>     <span class=\"token number\">0</span>  <span class=\"token number\">0</span> <span class=\"token number\">15</span><span class=\"token punctuation\">:</span><span class=\"token number\">19</span> <span class=\"token punctuation\">?</span>        <span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span> ps <span class=\"token operator\">-</span>aef</code></pre></div>\n<p>CMD 로 지정한 내용 대신 컨테이너 실행시 받은 인자로 대체하여 실행됨을 볼 수 있습니다.</p>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">docker inspect</code> 명령을 통해 컨테이너 설정 내용을 자세히 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker inspect nasa<span class=\"token operator\">-</span>df\n<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Cmd\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"ps\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-aef\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>컨테이너 설정에 Cmd 값이 인자 값으로 대체된 것이 확인 가능합니다.</p>\n</li>\n</ul>\n<br/>\n<hr>\n<ul>\n<li>\n<p>이번에는 ENTRYPOINT 를 사용하여 컨테이너 이미지를 만들어 보겠습니다.</p>\n<p>단지 CMD를 ENTRYPOINT 로 대신한 것 뿐입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># Dockerfile</span>\n\nFROM ubuntu\nENTRYPOINT <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/df\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-h\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p>이번엔 nasa/df:entry 라는 태그를 추가하여 이미지를 빌드</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker build <span class=\"token operator\">-</span>t nasa<span class=\"token operator\">/</span>df<span class=\"token punctuation\">:</span>entry <span class=\"token punctuation\">.</span>\n\nSending build context to Docker daemon  <span class=\"token number\">2</span><span class=\"token punctuation\">.</span>048kB\nStep <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token punctuation\">:</span> FROM ubuntu\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> 94e814e2efa8\nStep <span class=\"token number\">2</span><span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token punctuation\">:</span> ENTRYPOINT <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/df\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-h\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> Running <span class=\"token keyword\">in</span> 61f6f8ad4f61\nRemoving intermediate container 61f6f8ad4f61\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> cc23a8719b6e\nSuccessfully built cc23a8719b6e\nSuccessfully tagged nasa<span class=\"token operator\">/</span>df<span class=\"token punctuation\">:</span>entry</code></pre></div>\n<br/>\n</li>\n<li>\n<p>빌드된 nasa/df:entry 이미지로 컨테이너를 실행</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker run <span class=\"token operator\">--</span>name nasa<span class=\"token operator\">-</span>df nasa<span class=\"token operator\">/</span>df<span class=\"token punctuation\">:</span>entry\n\nFilesystem      Size  Used Avail Use<span class=\"token operator\">%</span> Mounted <span class=\"token keyword\">on</span>\noverlay          59G  <span class=\"token number\">5</span><span class=\"token punctuation\">.</span>6G   50G  <span class=\"token number\">11</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>\ntmpfs            <span class=\"token number\">64M</span>     <span class=\"token number\">0</span>   <span class=\"token number\">64M</span>   <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>dev\ntmpfs          <span class=\"token number\">1000M</span>     <span class=\"token number\">0</span> <span class=\"token number\">1000M</span>   <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>sys<span class=\"token operator\">/</span>fs<span class=\"token operator\">/</span>cgroup\n<span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>sda1        59G  <span class=\"token number\">5</span><span class=\"token punctuation\">.</span>6G   50G  <span class=\"token number\">11</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>hosts\nshm              <span class=\"token number\">64M</span>     <span class=\"token number\">0</span>   <span class=\"token number\">64M</span>   <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>shm\ntmpfs          <span class=\"token number\">1000M</span>     <span class=\"token number\">0</span> <span class=\"token number\">1000M</span>   <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>proc<span class=\"token operator\">/</span>acpi\ntmpfs          <span class=\"token number\">1000M</span>     <span class=\"token number\">0</span> <span class=\"token number\">1000M</span>   <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>sys<span class=\"token operator\">/</span>firmware</code></pre></div>\n<p>실행된 결과는 CMD 와는 다른게 없다.</p>\n<br/>\n</li>\n<li>\n<p>docker inspect 로 자세히 살펴보면 약간의 다른점을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker inspect nasa<span class=\"token operator\">-</span>df\n<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Cmd\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n\n            <span class=\"token string\">\"Entrypoint\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"/bin/df\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-h\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p><code class=\"language-text\">Entrypoint</code> 항목에 실행된 명령 정보가 있고<br>\nCMD는 null 로 비워져 있는것을 볼 수 있습니다.</p>\n<br/>\n</li>\n<li>\n<p>CMD 테스트와 동일하게 인자를 추가로 넣어 컨테이너를 실행 </p>\n<p>ENTRYPOINT 와 CMD의 확실한 차이를 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker run <span class=\"token operator\">--</span>name nasa<span class=\"token operator\">-</span>df nasa<span class=\"token operator\">/</span>df<span class=\"token punctuation\">:</span>entry ps <span class=\"token operator\">-</span>aef\n\n<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>df<span class=\"token punctuation\">:</span> invalid option <span class=\"token operator\">--</span> <span class=\"token string character\">'e'</span>\nTry '<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>df <span class=\"token operator\">--</span>help' <span class=\"token keyword\">for</span> more information<span class=\"token punctuation\">.</span></code></pre></div>\n<p>에러를 출력하며 원하는 동작이 실행되지 않았음을 볼 수 있습니다.</p>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">docker inspect</code> 를 사용해 살펴보죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker inspect nasa<span class=\"token operator\">-</span>df\n<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Cmd\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"ps\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-aef\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Image\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"nasa/df:entry\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Volumes\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"WorkingDir\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Entrypoint\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"/bin/df\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-h\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>컨테이너 실행시 /bin/df 명령은 유지하고<br>\n추가 인자를 CMD로 받아 처리한 것을 볼 수 있습니다.</p>\n<p>컨테이너 시작시 아래와 같은 명령어를 수행한 것과 같은 것이며<br>\n이는 적절한 명령이 아니었으므로 에러로 끝난 것임을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token operator\">></span> df <span class=\"token operator\">-</span>h ps <span class=\"token operator\">-</span>aef     \n\n<span class=\"token preprocessor property\"># ENTRYPOINT : df -h  </span>\n<span class=\"token preprocessor property\"># CMD : ps -aef</span>\n\ndf<span class=\"token punctuation\">:</span> invalid option <span class=\"token operator\">--</span> <span class=\"token string character\">'e'</span>\nTry 'df <span class=\"token operator\">--</span>help' <span class=\"token keyword\">for</span> more information<span class=\"token punctuation\">.</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<h3 id=\"entrypoint-와-cmd의-사용-방법\" style=\"position:relative;\"><a href=\"#entrypoint-%EC%99%80-cmd%EC%9D%98-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-label=\"entrypoint 와 cmd의 사용 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ENTRYPOINT 와 CMD의 사용 방법</h3>\n<p>  같은 것 같으면서 다른 두 지시어의 차이를 위에 실습으로 알아봤습니다.<br>\n그렇다면 ENTRYPOINT와 CMD 는 어떻게 사용하는게 좋을까.</p>\n<ol>\n<li>\n<p>컨테이너가 수행될 때 변경되지 않을 실행 명령은 CMD 보다는 ENTRYPOINT 로 정의하는게 좋다.</p>\n<p>컨테이너를 만들때 아마 대부분은 해당 컨테이너가 실행될 목적이 분명할 것입니다.<br>\n웹서버(nginx)가 될 수도 있고, App서버(node)가 될 수도 있으며 DB(mysql) 가 될 수도 있습니다.</p>\n<p>즉, 이미지를 만들때는 실행 목적이 분명하므로 nginx / node / mysql 같은<br>\n메인 프로세스가 될 명령의 경우는 <code class=\"language-text\">ENTRYPOINT</code> 로 정의하는게 명확할 것입니다.</p>\n</li>\n</ol>\n<br/>\n \n<ol start=\"2\">\n<li>\n<p>메인 명령어가 실행시 default option 인자 값은 CMD로 정의합니다</p>\n<p><code class=\"language-text\">CMD</code> 는 <code class=\"language-text\">ENTRYPOINT</code> 와 함께 사용시 추가 인자 값으로 활용 됩니다.<br>\n그러므로,  메인 프로세스에 대한 default 옵션값을 CMD 로 정의해주면 좋을 것입니다. </p>\n</li>\n</ol>\n<br/>\n<ol start=\"3\">\n<li>\n<p><code class=\"language-text\">ENTRYPOINT</code> 와 <code class=\"language-text\">CMD</code>는 <code class=\"language-text\">리스트 포맷</code> ( [“args1”, “args2”,…] )으로 정의해 주는게 좋다. </p>\n<p>ENTRYPOINT 와 CMD 를 작성할때는 대부분 List 형태로 작성하지만,<br>\n아래와 같이 일반적인 shell 형태로도 작성 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># Dockerfile </span>\nFROM ubuntu \nAdd loop<span class=\"token punctuation\">.</span>sh <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>nasa<span class=\"token punctuation\">.</span>sh \nENTRYPOINT <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>nasa<span class=\"token punctuation\">.</span>sh <span class=\"token number\">1</span> # Shell format</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\">#!/bin/bash</span>\nINTERVAL<span class=\"token operator\">=</span>$<span class=\"token number\">1</span> \n\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">do</span>\n    <span class=\"token class-name\">ps</span> x<span class=\"token punctuation\">;</span>\n    sleep $INTERVAL<span class=\"token punctuation\">;</span>\ndone</code></pre></div>\n</li>\n</ol>\n<br/>\n<hr>\n<h2 id=\"🤳docker-file-예제\" style=\"position:relative;\"><a href=\"#%F0%9F%A4%B3docker-file-%EC%98%88%EC%A0%9C\" aria-label=\"🤳docker file 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤳docker file 예제</h2>\n<ul>\n<li>\n<p>아래와 같은 Docker File을 작성해보았습니다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\">FROM</span> ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">14.04</span>                   # FROM <span class=\"token punctuation\">:</span> 생성할 이미지\nMAINTAINER nasa1515                 # MAINTAINER <span class=\"token punctuation\">:</span> 이미지를 생성한 개발자의 정보\nLABEL <span class=\"token string\">\"purpose\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"practice\"</span>          <span class=\"token preprocessor property\"># LABEL : 이미지에 메타데이터를 추가</span>\nRUN apt<span class=\"token operator\">-</span><span class=\"token keyword\">get</span> update                  # RUN <span class=\"token punctuation\">:</span> 내부에서 실행하는 명령\nRUN apt<span class=\"token operator\">-</span><span class=\"token keyword\">get</span> install apache2 <span class=\"token operator\">-</span>y      # RUN <span class=\"token punctuation\">:</span> 내부에서 실행하는 명령\nADD test<span class=\"token punctuation\">.</span>html <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>www<span class=\"token operator\">/</span>html         # ADD <span class=\"token punctuation\">:</span> 파일을 추가<span class=\"token punctuation\">,</span> \nWORKDIR <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>www<span class=\"token operator\">/</span>html               # WORKDIR <span class=\"token punctuation\">:</span> 디렉토리 이동\nRUN <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/bash\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"echo hello >> test2.html\"</span><span class=\"token punctuation\">]</span>  \n<span class=\"token preprocessor property\"># RUN : 내부에서 실행하는 명령, test2.html 파일 생성</span>\nEXPOSE <span class=\"token number\">80</span>                                           \n<span class=\"token preprocessor property\"># EXPOSE : Dockefile의 빌드로 생성된 이미지에서 열어줄 포트</span>\nCMD apachectl <span class=\"token operator\">-</span>DFOREGROUND                          \n<span class=\"token preprocessor property\"># CMD : 컨테이너가 시작될 때마다 실행한 명령어, apache를 매번 실행</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p>Dockerfile 빌드  </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker build <span class=\"token operator\">-</span>t <span class=\"token punctuation\">[</span>이미지 이름<span class=\"token punctuation\">:</span>이미지 버전<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Dockerfile의 경로<span class=\"token punctuation\">]</span></code></pre></div>\n<p><code class=\"language-text\">-t</code>는 생성될 이미지의 이름을 설정\n생략시 16진수 형태로 자동 생성되므로 사용하는 걸 추천</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker build <span class=\"token operator\">-</span><span class=\"token class-name\">t</span> mybuild<span class=\"token punctuation\">:</span><span class=\"token number\">0.0</span> <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>\nSending build context to Docker daemon  <span class=\"token number\">3</span><span class=\"token punctuation\">.</span>072kB\nStep <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">FROM</span> ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">14.04</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> 7e4b16ae8b23\nStep <span class=\"token number\">2</span><span class=\"token operator\">/</span><span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> MAINTAINER nasa1515\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> Using cache\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> 3a109c0fbc9c\nStep <span class=\"token number\">3</span><span class=\"token operator\">/</span><span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> LABEL <span class=\"token string\">\"purpose\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"practice\"</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> Using cache\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> eb4fc9a7f0c0\nStep <span class=\"token number\">4</span><span class=\"token operator\">/</span><span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> RUN apt<span class=\"token operator\">-</span><span class=\"token keyword\">get</span> update\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> Using cache\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> 310c61072f92\nStep <span class=\"token number\">5</span><span class=\"token operator\">/</span><span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> RUN apt<span class=\"token operator\">-</span><span class=\"token keyword\">get</span> install apache2 <span class=\"token operator\">-</span>y\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> Using cache\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> 351f441a52e6\nStep <span class=\"token number\">6</span><span class=\"token operator\">/</span><span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> ADD test<span class=\"token punctuation\">.</span>html <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>www<span class=\"token operator\">/</span>html\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> Using cache\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> fabdb41b1d4a\nStep <span class=\"token number\">7</span><span class=\"token operator\">/</span><span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> WORKDIR <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>www<span class=\"token operator\">/</span>html\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> Using cache\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> aade10f6b4bd\nStep <span class=\"token number\">8</span><span class=\"token operator\">/</span><span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> RUN <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/bash\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"echo hello >> test2.html\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> Running <span class=\"token keyword\">in</span> 1e831fca765c\nRemoving intermediate container 1e831fca765c\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> 6e80dc20b1d2\nStep <span class=\"token number\">9</span><span class=\"token operator\">/</span><span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> EXPOSE <span class=\"token number\">80</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> Running <span class=\"token keyword\">in</span> b2062df70dda\nRemoving intermediate container b2062df70dda\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> a94a15199cc6\nStep <span class=\"token number\">10</span><span class=\"token operator\">/</span><span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> CMD apachectl <span class=\"token operator\">-</span>DFOREGROUND\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> Running <span class=\"token keyword\">in</span> bbc99d44fc10\nRemoving intermediate container bbc99d44fc10\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> 83ef57094ad5\nSuccessfully built 83ef57094ad5\nSuccessfully <span class=\"token class-name\">tagged</span> mybuild<span class=\"token punctuation\">:</span><span class=\"token number\">0.0</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p><code class=\"language-text\">.dockerignore</code></p>\n<p>git에서 가져오게끔 만드는 경우<br>\nrepository의 모든 파일과 모듈들을 가져오기 때문에 이미지 빌드에 필요한 파일만 있도록 해야합니다.<br>\n특정 파일들을 제외하고 싶으면 .gitignore과 같은 .dockerignore을 사용할 수 있습니다.</p>\n<br/>\n</li>\n<li>\n<p>dockerignore 파일 생성시 Docker 이미지 생성 시 이미지안에 들어가지 않을 파일을 지정 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ vim dockerignore\n\nnode_modules\nnpm<span class=\"token operator\">-</span>debug<span class=\"token punctuation\">.</span>log\nDockerfile<span class=\"token operator\">*</span>\ndocker<span class=\"token operator\">-</span>compose<span class=\"token operator\">*</span>\n<span class=\"token punctuation\">.</span>dockerignore\n<span class=\"token punctuation\">.</span>git\n<span class=\"token punctuation\">.</span>gitignore\nREADME<span class=\"token punctuation\">.</span>md\nLICENSE\n<span class=\"token punctuation\">.</span>vscode\n\n<span class=\"token punctuation\">:</span>wq<span class=\"token operator\">!</span></code></pre></div>\n<hr>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-dockerfile\">✔ DOCKERFILE</a></li>\n<li><a href=\"#-docker-file-%EC%A7%80%EC%8B%9C%EC%96%B4\">✌ DOCKER FILE 지시어</a></li>\n<li>\n<p><a href=\"#entrypoint-%EC%99%80-cmd%EC%9D%98-%EC%B0%A8%EC%9D%B4\">👍ENTRYPOINT 와 CMD의 차이</a></p>\n<ul>\n<li><a href=\"#entrypoint-%EC%99%80-cmd%EC%9D%98-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\">ENTRYPOINT 와 CMD의 사용 방법</a></li>\n</ul>\n</li>\n<li><a href=\"#%F0%9F%A4%B3docker-file-%EC%98%88%EC%A0%9C\">🤳docker file 예제</a></li>\n</ul>\n</div>","frontmatter":{"date":"June 27, 2021","title":"[DOCKER] - Dockerfile","categories":"DOCKER","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/docker-file/"}},"site":{"siteMetadata":{"siteUrl":"https://nasa1515.com","comments":{"utterances":{"repo":"nasa1515/nasablog"}}}}},"pageContext":{"slug":"/docker-volume/","nextSlug":"/docker-net2/","prevSlug":"/docker-file/"}},"staticQueryHashes":["1073350324","2938748437"]}