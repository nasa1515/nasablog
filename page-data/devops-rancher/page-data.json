{"componentChunkName":"component---src-templates-blog-template-js","path":"/devops-rancher/","result":{"data":{"cur":{"id":"369278cb-c762-599f-ba00-0a2a53a49b54","html":"<p>머리말  </p>\n<p>안녕하세요 NASA입니다!!.<br>\n이번 포스트에서는 Open Source인 Rancher를 이용한 k8s 클러스터 구축에 대한 포스트입니다  </p>\n<hr>\n<ul>\n<li>사용 할 툴을 다음과 같습니다.  </li>\n<li>Rancher (GCP INSTANCE)</li>\n<li>k8s (GKE), ON-PRE로 구성된 클러스터</li>\n<li>ARgoCD</li>\n</ul>\n<hr>\n<br/>\n<h2 id=\"-ranche-환경으로-서비스-구축을-해봅시다\" style=\"position:relative;\"><a href=\"#-ranche-%ED%99%98%EA%B2%BD%EC%9C%BC%EB%A1%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B5%AC%EC%B6%95%EC%9D%84-%ED%95%B4%EB%B4%85%EC%8B%9C%EB%8B%A4\" aria-label=\" ranche 환경으로 서비스 구축을 해봅시다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ RANCHE 환경으로 서비스 구축을 해봅시다.</h2>\n<p>Rancher는 Rancher Labs에서 개발한 오픈 소스컨테이너 오케스트레이션 플랫폼<br>\nRancher 2.0(현재 버전)은 Kubernetes 기반으로 개발되었으며 기존 온프레미스 환경을<br>\n비롯한 멀티 클라우드 환경을 통합 관제할 수 있도록 지원합니다. </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/96835487-99944d00-147e-11eb-883d-602a97991ed7.png\" alt=\"스크린샷, 2020-10-22 15-52-21\"></p>\n<br/>\n<hr>\n<h3 id=\"rancher로-k8s-클러스터-구성\" style=\"position:relative;\"><a href=\"#rancher%EB%A1%9C-k8s-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EA%B5%AC%EC%84%B1\" aria-label=\"rancher로 k8s 클러스터 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RANCHER로 K8S 클러스터 구성</h3>\n<br/>\n<ul>\n<li>\n<p>DOCKER 설치 [전 노드 동일하게 진행]</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">yum repository 설정 추가\n$ sudo yum install <span class=\"token operator\">-</span>y yum<span class=\"token operator\">-</span>utils device<span class=\"token operator\">-</span>mapper<span class=\"token operator\">-</span>persistent<span class=\"token operator\">-</span>data lvm2\n$ sudo yum<span class=\"token operator\">-</span>config<span class=\"token operator\">-</span>manager <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span><span class=\"token class-name\">repo</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>download<span class=\"token punctuation\">.</span>docker<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>linux<span class=\"token operator\">/</span>centos<span class=\"token operator\">/</span>docker<span class=\"token operator\">-</span>ce<span class=\"token punctuation\">.</span>repo</code></pre></div>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>도커 설치</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">sudo yum <span class=\"token operator\">-</span>y install docker<span class=\"token operator\">-</span>ce docker<span class=\"token operator\">-</span>ce<span class=\"token operator\">-</span>cli containerd<span class=\"token punctuation\">.</span>io</code></pre></div>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>도커 설치 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">sudo systemctl start docker\nsudo systemctl enable docker\nsudo docker <span class=\"token class-name\">version</span>\nClient<span class=\"token punctuation\">:</span> Docker Engine <span class=\"token operator\">-</span> <span class=\"token class-name\">Community</span>\nVersion<span class=\"token punctuation\">:</span>           <span class=\"token number\">19.03</span><span class=\"token number\">.13</span>\n<span class=\"token class-name\">API</span> version<span class=\"token punctuation\">:</span>       <span class=\"token number\">1.40</span>\n<span class=\"token class-name\">Go</span> version<span class=\"token punctuation\">:</span>        go1<span class=\"token punctuation\">.</span><span class=\"token number\">13.15</span>\n<span class=\"token class-name\">Git</span> commit<span class=\"token punctuation\">:</span>        4484c46d9d\nBuilt<span class=\"token punctuation\">:</span>             Wed Sep <span class=\"token number\">16</span> <span class=\"token number\">17</span><span class=\"token punctuation\">:</span><span class=\"token number\">03</span><span class=\"token punctuation\">:</span><span class=\"token number\">45</span> <span class=\"token number\">2020</span>\nOS<span class=\"token operator\">/</span>Arch<span class=\"token punctuation\">:</span>           linux<span class=\"token operator\">/</span><span class=\"token class-name\">amd64</span>\nExperimental<span class=\"token punctuation\">:</span>      <span class=\"token class-name\">false</span>\n\nServer<span class=\"token punctuation\">:</span> Docker Engine <span class=\"token operator\">-</span> <span class=\"token class-name\">Community</span>\nEngine<span class=\"token punctuation\">:</span>\nVersion<span class=\"token punctuation\">:</span>          <span class=\"token number\">19.03</span><span class=\"token number\">.13</span>\n<span class=\"token class-name\">API</span> version<span class=\"token punctuation\">:</span>      <span class=\"token number\">1.40</span> <span class=\"token punctuation\">(</span>minimum version <span class=\"token number\">1.12</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Go</span> version<span class=\"token punctuation\">:</span>       go1<span class=\"token punctuation\">.</span><span class=\"token number\">13.15</span>\n<span class=\"token class-name\">Git</span> commit<span class=\"token punctuation\">:</span>       4484c46d9d\nBuilt<span class=\"token punctuation\">:</span>            Wed Sep <span class=\"token number\">16</span> <span class=\"token number\">17</span><span class=\"token punctuation\">:</span><span class=\"token number\">02</span><span class=\"token punctuation\">:</span><span class=\"token number\">21</span> <span class=\"token number\">2020</span>\nOS<span class=\"token operator\">/</span>Arch<span class=\"token punctuation\">:</span>          linux<span class=\"token operator\">/</span><span class=\"token class-name\">amd64</span>\nExperimental<span class=\"token punctuation\">:</span>     <span class=\"token class-name\">false</span>\ncontainerd<span class=\"token punctuation\">:</span>\nVersion<span class=\"token punctuation\">:</span>          <span class=\"token number\">1.3</span><span class=\"token number\">.7</span>\nGitCommit<span class=\"token punctuation\">:</span>        8fba4e9a7d01810a393d5d25a3621dc101981175\nrunc<span class=\"token punctuation\">:</span>\nVersion<span class=\"token punctuation\">:</span>          <span class=\"token number\">1.0</span><span class=\"token number\">.0</span><span class=\"token operator\">-</span><span class=\"token class-name\">rc10</span>\nGitCommit<span class=\"token punctuation\">:</span>        dc9208a3303feef5b3839f4323d9beb36df0a9dd\ndocker<span class=\"token operator\">-</span>init<span class=\"token punctuation\">:</span>\nVersion<span class=\"token punctuation\">:</span>          <span class=\"token number\">0.18</span><span class=\"token number\">.0</span>\nGitCommit<span class=\"token punctuation\">:</span>        fec3683</code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<h3 id=\"docker-in-rancher\" style=\"position:relative;\"><a href=\"#docker-in-rancher\" aria-label=\"docker in rancher permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker in RANCHER</h3>\n<p>다만!!! 그전에 사전준비가 있습니다</p>\n<p>WDI 환경에서 rancher를 통해 k8s 클러스터를 관리하기 위해서, 보안정책에 추가 port 오픈이 필요합니다.   </p>\n<p>RANCHER에 사용되는 포트는 <a href=\"https://rancher.com/docs/rancher/v2.x/en/installation/references/\">공식 문서</a>에서 확인 가능합니다.</p>\n<p>보안 정책에서 inbound 포트를 허용하도록 등록합니다.<br>\n그러나 저의 경우 Firewall을 종료하는 것으로 마무리 했습니다..<br>\n다만 GCP의 환경일 경우 GCP의 방화벽에서는 열여줘야 합니다! </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token number\">2376</span> TCP\n<span class=\"token number\">2379</span><span class=\"token operator\">-</span><span class=\"token number\">2380</span> TCP\n<span class=\"token number\">8472</span> UDP\n<span class=\"token number\">9099</span> TCP\n<span class=\"token number\">6783</span> TCP\n<span class=\"token number\">6783</span><span class=\"token operator\">-</span><span class=\"token number\">6784</span> UDP\n<span class=\"token number\">10250</span> TCP\n<span class=\"token number\">10254</span> TCP\n<span class=\"token number\">30000</span><span class=\"token operator\">-</span><span class=\"token number\">32767</span> TCP<span class=\"token operator\">/</span>UDP</code></pre></div>\n<br/>\n<hr>\n<h3 id=\"설치\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98\" aria-label=\"설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치</h3>\n<p><a href=\"https://rancher.com/docs/rancher/v2.x/en/installation/single-node/\">공식문서</a>  </p>\n<p>저의 경우 nasa-master : rancher 메인 서버를 한대만 사용하고<br>\n나머지 nasa-node1-2 : agent로 전체 서버에 사용하는 구조로 진행할 예정했습니다.  </p>\n<br/>\n<ul>\n<li>\n<p>MASTER 서버 Rancher Server 설치</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">docker run <span class=\"token operator\">-</span>d <span class=\"token operator\">--</span>restart<span class=\"token operator\">=</span>unless<span class=\"token operator\">-</span>stopped \\\n<span class=\"token operator\">--</span>privileged <span class=\"token operator\">-</span>p <span class=\"token number\">80</span><span class=\"token punctuation\">:</span><span class=\"token number\">80</span> <span class=\"token operator\">-</span>p <span class=\"token number\">443</span><span class=\"token punctuation\">:</span><span class=\"token number\">443</span> \\\n<span class=\"token operator\">-</span>v <span class=\"token operator\">/</span>host<span class=\"token operator\">/</span>certs<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>container<span class=\"token operator\">/</span>certs \\\n<span class=\"token operator\">-</span><span class=\"token class-name\">e</span> SSL_CERT_DIR<span class=\"token operator\">=</span><span class=\"token string\">\"/container/certs\"</span> \\\nrancher<span class=\"token operator\">/</span>rancher<span class=\"token punctuation\">:</span>latest</code></pre></div>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>간단하게 설치를 하면 GCP의 External Ip로 대쉬보드 접근이 가능합니다</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/94093474-3f40a600-fe58-11ea-96a4-f39b52a40e5c.png\" alt=\"스크린샷, 2020-09-24 11-22-26\">\n이후 관리자 PWD 설정등을 마무리 해줍시다</p>\n</li>\n</ul>\n<br/>\n<hr>\n<h3 id=\"이제-k8s-클러스터를-생성-후-노드를-연결-해봅시다\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A0%9C-k8s-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EB%A5%BC-%EC%83%9D%EC%84%B1-%ED%9B%84-%EB%85%B8%EB%93%9C%EB%A5%BC-%EC%97%B0%EA%B2%B0-%ED%95%B4%EB%B4%85%EC%8B%9C%EB%8B%A4\" aria-label=\"이제 k8s 클러스터를 생성 후 노드를 연결 해봅시다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이제 K8S 클러스터를 생성 후 노드를 연결 해봅시다</h3>\n<br/>\n<ul>\n<li>\n<p>Clusters > Add Cluster<br>\n클러스터 유형 Custom, Cluster 제공자 Custom 나머지 옵션은 기본 값으로 진행합니다</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/94103036-80dc4b80-fe6e-11ea-97a0-8e337e937af2.png\" alt=\"스크린샷, 2020-09-24 14-01-52\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>기본 구성을 마치면 Cluster의 Node를 추가 할 수 있습니다.\n<img src=\"https://user-images.githubusercontent.com/69498804/94102680-a9177a80-fe6d-11ea-8817-c3ce799320ec.png\" alt=\"스크린샷, 2020-09-24 13-55-47\">\n위에서 각 Node의 역할 별 체크박스에 체크 후 아래의 스크립트를 붙혀넣으면 됩니다.<br>\n추가로 <code class=\"language-text\">Show Advance options</code> tab에서 Node의 IP, 이름을 추가로 설정 가능합니다</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>저의 경우 Master는 ALL, Node1-2는 Worker로 사용할 겁니다 </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@rancher<span class=\"token operator\">-</span>node2 <span class=\"token operator\">~</span><span class=\"token punctuation\">]</span># sudo docker run <span class=\"token operator\">-</span>d <span class=\"token operator\">--</span>privileged <span class=\"token operator\">--</span>restart<span class=\"token operator\">=</span>unless<span class=\"token operator\">-</span>stopped <span class=\"token operator\">--</span>net<span class=\"token operator\">=</span>host <span class=\"token operator\">-</span>v <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>kubernetes<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>kubernetes <span class=\"token operator\">-</span>v <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>run<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>run rancher<span class=\"token operator\">/</span>rancher<span class=\"token operator\">-</span>agent<span class=\"token punctuation\">:</span>v2<span class=\"token punctuation\">.</span><span class=\"token number\">4.8</span> <span class=\"token operator\">--</span><span class=\"token class-name\">server</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">34.64</span><span class=\"token number\">.79</span><span class=\"token number\">.179</span> <span class=\"token operator\">--</span>token rpkc8zzs7mvzq4ng8lszpp5ncpfvfl6tm7c2bkmlcvfjb9ncgtzq49 <span class=\"token operator\">--</span>ca<span class=\"token operator\">-</span>checksum e9f82b3c16848a400fa3c5839dd1f7e23dbfbd1a2912dace1cbfca72366581f0 <span class=\"token operator\">--</span>node<span class=\"token operator\">-</span>name rancher<span class=\"token operator\">-</span>node2 <span class=\"token operator\">--</span>address <span class=\"token number\">34.64</span><span class=\"token number\">.144</span><span class=\"token number\">.38</span> <span class=\"token operator\">--</span><span class=\"token keyword\">internal</span><span class=\"token operator\">-</span>address <span class=\"token number\">34.64</span><span class=\"token number\">.144</span><span class=\"token number\">.38</span> <span class=\"token operator\">--</span>worker\nUnable to find image 'rancher<span class=\"token operator\">/</span>rancher<span class=\"token operator\">-</span>agent<span class=\"token punctuation\">:</span>v2<span class=\"token punctuation\">.</span><span class=\"token number\">4.8</span>' locally\nv2<span class=\"token punctuation\">.</span><span class=\"token number\">4.8</span><span class=\"token punctuation\">:</span> Pulling <span class=\"token keyword\">from</span> rancher<span class=\"token operator\">/</span>rancher<span class=\"token operator\">-</span><span class=\"token class-name\">agent</span>\nf08d8e2a3ba1<span class=\"token punctuation\">:</span> Pull complete \n3baa9cb2483b<span class=\"token punctuation\">:</span> Pull complete \n94e5ff4c0b15<span class=\"token punctuation\">:</span> Pull complete \n1860925334f9<span class=\"token punctuation\">:</span> Pull <span class=\"token class-name\">complete</span> \ne5d12d0f9a84<span class=\"token punctuation\">:</span> Pull complete \n5116e686c448<span class=\"token punctuation\">:</span> Pull <span class=\"token class-name\">complete</span> \nd4f72327bfd0<span class=\"token punctuation\">:</span> Pull complete \n61bcbcce7861<span class=\"token punctuation\">:</span> Pull <span class=\"token class-name\">complete</span> \nfca783017521<span class=\"token punctuation\">:</span> Pull complete \n29ab00ed6801<span class=\"token punctuation\">:</span> Pull <span class=\"token class-name\">complete</span> \nDigest<span class=\"token punctuation\">:</span> sha256<span class=\"token punctuation\">:</span><span class=\"token class-name\">c8a111e6250a313f1dd5d34696ddbef9068f70ddf4b15ab4c9cefd0ea39b76c1</span>\nStatus<span class=\"token punctuation\">:</span> Downloaded newer image <span class=\"token keyword\">for</span> rancher<span class=\"token operator\">/</span>rancher<span class=\"token operator\">-</span>agent<span class=\"token punctuation\">:</span>v2<span class=\"token punctuation\">.</span><span class=\"token number\">4.8</span>\ndb357cd36dc9c2fda9cfce9e42177b560e0e5d25faae743747541bba4b0b92b5</code></pre></div>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>각 노드에 스크립트를 입력 후 5~8분정도 지나면 아래와 같이 클러스터가 생성됩니다</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/94103986-dd406a80-fe70-11ea-858e-3b27ef50a871.png\" alt=\"스크린샷, 2020-09-24 14-18-44\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>정상적으로 k8s의 배포가 완료 되었는지 Rancher에서 지원하는 CLI로 확인해봅시다</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/94104127-458f4c00-fe71-11ea-8e6b-6d21402da47c.png\" alt=\"스크린샷, 2020-09-24 14-21-40\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>정상적으로 노드 정보를 받아옵니다</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/94104178-6192ed80-fe71-11ea-911a-7f8350316725.png\" alt=\"스크린샷, 2020-09-24 14-22-27\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>추가적으로 대쉬보드의 Cluster 탭을 확인해보면 Cluster들의 상태를 모니터링 할 수 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/94104307-aae33d00-fe71-11ea-938e-da9101a39fef.png\" alt=\"스크린샷, 2020-09-24 14-24-29\"></p>\n</li>\n</ul>\n<h3 id=\"자-이제-rancher로-기본적인-클러스터-구성이-완료되었습니다\" style=\"position:relative;\"><a href=\"#%EC%9E%90-%EC%9D%B4%EC%A0%9C-rancher%EB%A1%9C-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EA%B5%AC%EC%84%B1%EC%9D%B4-%EC%99%84%EB%A3%8C%EB%90%98%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"자 이제 rancher로 기본적인 클러스터 구성이 완료되었습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자 이제 Rancher로 기본적인 클러스터 구성이 완료되었습니다.!</h3>\n<hr>\n<h3 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며…</h3>\n<p>이번 포스트에서는 Rancher를 사용해서 k8s 클러스터를 생성하는 법을 알아봤습니다.<br>\n사실 이전까지는 클러스터를 구축할때 kubeadm으로 하나하나 설정을 잡아주면서 구축했었는데<br>\n우연히 Rancher라는 툴을 알게되어 사용해봤는데 만족합니다<br>\nRancher에 대한 추가포스트로 모니터링이나 툴등을 연동하는 포스트도 추후에 올릴 예정이구요!<br>\n다음 포스트에는 GKE 기반의 클러스터를 Rancher로 생성, 연동하는 포스트입니다!!.</p>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-ranche-%ED%99%98%EA%B2%BD%EC%9C%BC%EB%A1%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B5%AC%EC%B6%95%EC%9D%84-%ED%95%B4%EB%B4%85%EC%8B%9C%EB%8B%A4\">✔ RANCHE 환경으로 서비스 구축을 해봅시다.</a></p>\n<ul>\n<li><a href=\"#rancher%EB%A1%9C-k8s-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EA%B5%AC%EC%84%B1\">RANCHER로 K8S 클러스터 구성</a></li>\n<li><a href=\"#docker-in-rancher\">Docker in RANCHER</a></li>\n<li><a href=\"#%EC%84%A4%EC%B9%98\">설치</a></li>\n<li><a href=\"#%EC%9D%B4%EC%A0%9C-k8s-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EB%A5%BC-%EC%83%9D%EC%84%B1-%ED%9B%84-%EB%85%B8%EB%93%9C%EB%A5%BC-%EC%97%B0%EA%B2%B0-%ED%95%B4%EB%B4%85%EC%8B%9C%EB%8B%A4\">이제 K8S 클러스터를 생성 후 노드를 연결 해봅시다</a></li>\n<li><a href=\"#%EC%9E%90-%EC%9D%B4%EC%A0%9C-rancher%EB%A1%9C-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EA%B5%AC%EC%84%B1%EC%9D%B4-%EC%99%84%EB%A3%8C%EB%90%98%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4\">자 이제 Rancher로 기본적인 클러스터 구성이 완료되었습니다.!</a></li>\n<li><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\">마치며…</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"머리말   안녕하세요 NASA입니다!!. 이번 포스트에서는 Open Source인 Rancher를 이용한 k8s 클러스터 구축에 대한 포스트입니다   사용 할 툴을 다음과 같습니다.   Rancher (GCP INSTANCE) k8s (GKE), ON-PRE로 구성된 클러스터 ARgoCD ✔ RANCHE 환경으로 서비스 구축을 해봅시다. Rancher는 Rancher Labs에서 개발한 오픈 소스컨테이너 오케스트레이션 플랫폼 Rancher 2.0(현재 버전)은 Kubernetes 기반으로 개발되었으며 기존 온프레미스 환경을 비롯한 멀티 클라우드 환경을 통합 관제할 수 있도록 지원합니다.  스크린샷, 2020-10-22…","frontmatter":{"date":"August 05, 2021","title":"[DEVOPS] - Rancher를 사용한 Kubernetes Cluster 구축","categories":"DevOps","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/devops-rancher/"}},"next":{"id":"057af5e7-bd29-5bbc-86f2-61487fe7337f","html":"<p>머리말  </p>\n<p>안녕하세요 NASA입니다!!.<br>\n이번 포스트에서는 Open Source를 이용한 DevSecOps CI/CD PIPELINE 구축에 대한 포스트입니다.<br>\n다만 포스트의 양이 매우 많아 질 것 같아. CI, CD 별 그리고 툴 별로 포스트를 나눌 예정입니다.<br>\n이번 포스트에서는 Jenkins를 이용한 CI 구성 부분을 포스트 했습니다!..</p>\n<hr>\n<p>사용 할 툴을 다음과 같습니다.  </p>\n<ul>\n<li>gitlab</li>\n<li>Jenkins</li>\n<li>Docker, dockerhub</li>\n</ul>\n<hr>\n<h2 id=\"-환경구성\" style=\"position:relative;\"><a href=\"#-%ED%99%98%EA%B2%BD%EA%B5%AC%EC%84%B1\" aria-label=\" 환경구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ 환경구성</h2>\n<p>우선 환경 구성은 아래와 같습니다\n<img src=\"https://user-images.githubusercontent.com/69498804/94150900-b2780580-feb4-11ea-963e-6f7968e47d92.PNG\" alt=\"캡처\"></p>\n<ul>\n<li>jenkins : 젠킨스 서버의 역할을 하는 서버 (Docker in Docker)</li>\n<li>Rancher-master : Rancher 기반의 k8s Master</li>\n<li>nasa-node1~2 : Rancher 기반의 K8s Worker</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"-ci\" style=\"position:relative;\"><a href=\"#-ci\" aria-label=\" ci permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ CI</h2>\n<h3 id=\"jenkins-설치\" style=\"position:relative;\"><a href=\"#jenkins-%EC%84%A4%EC%B9%98\" aria-label=\"jenkins 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JENKINS 설치</h3>\n<p>GCP 인스턴스 생성 방법의 경우 블로그의 <a href=\"https://nasa1515.tech/gcp-first/\">GCP 인스턴트 생성 방법</a> 포스트에 정리되어 있습니다.</p>\n<br/>\n<h3 id=\"jenkins\" style=\"position:relative;\"><a href=\"#jenkins\" aria-label=\"jenkins permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jenkins</h3>\n<p>Jenkins의 경우 Docker in Docker 방식으로 구성했습니다.<br>\n현재는 어쩔수 없이 Docker 기반의 서비스를 사용해보기 위해 실습을 해서 그렇지만<br>\n실제 최종 결과물은 Jenkins 툴을 인스턴스에 설치하는 것으로 서비스 예정입니다.</p>\n<br/>\n<p>Docker in Docker (DinD)  </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">도커 안에 도커는 도커 바이너리를 설정하고 컨테이너 내부의 격리된 Docker 데몬을실행하는 작업을 의미한다<span class=\"token punctuation\">.</span> 즉<span class=\"token punctuation\">,</span> 도커데몬이 <span class=\"token number\">2</span>개가 뜨는 것이다<span class=\"token punctuation\">.</span> CI측면에서 접근한다면Task를 수행하는 Agent가 Docker Client와 Docker Daemon역할까지 하게되어 도커명령들을 수행하는데 문제가 없어진다<span class=\"token punctuation\">.</span> 이렇게 말로만 들으면 아름답고 문제가없어보이지만 이 접근에는 큰 단점이 존재한다<span class=\"token punctuation\">.</span></code></pre></div>\n<br/>\n<br/>\n<p>호스트 도커 컨테이너가 privilieged mode로 실행되어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker run <span class=\"token operator\">--</span>privileged <span class=\"token operator\">--</span>name dind1 <span class=\"token operator\">-</span><span class=\"token class-name\">d</span> docker<span class=\"token punctuation\">:</span><span class=\"token number\">1.8</span><span class=\"token operator\">-</span>dind</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">privilieged 플래그를 사용한다면 호스트컨테이너가 호스트머신에서 할 수 있는 거의 모든 작업을 할 수 있게 된다<span class=\"token punctuation\">.</span>\n이는 컨테이너를 실행하는데 큰 <span class=\"token string\">\"\"</span>보안 위험<span class=\"token string\">\"\"</span>을 초래할 수 있다<span class=\"token punctuation\">.</span></code></pre></div>\n<p><a href=\"https://sreeninet.wordpress.com/2016/12/23/docker-in-docker-and-play-with-docker/\">DinD 사용법과 원리에 대해 잘 정리된 포스트</a></p>\n<br/>\n<br/>\n<p>우선 jenkins 설치 시 사용할 Home Directory 생성해줍니다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># mkdir -p /docker/jenkins</span>\n<span class=\"token preprocessor property\"># chmod 666 /docker/jenkins</span></code></pre></div>\n<br/>\n<br/>\n<p>Docker로 젠킨스를 옵려줍시다!</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># docker run -itd --name jenkins -p 8080:8080 -p 50000:50000 -v /docker/jenkins:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -e TZ=Asia/Seoul -u rootjenkins/jenkins:latest</span></code></pre></div>\n<br/>\n<br/>\n<p>주요 옵션 설명</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token operator\">-</span>v <span class=\"token operator\">/</span>docker<span class=\"token operator\">/</span>jenkins<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>jenkins_home\n    \n\nlocal volume의 <span class=\"token operator\">/</span>docker<span class=\"token operator\">/</span>jenkins 디렉토리와 container volume의 <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>jenkins_home 디렉토리 매핑\n\n<span class=\"token operator\">-</span>v <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>run<span class=\"token operator\">/</span>docker<span class=\"token punctuation\">.</span>sock<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>run<span class=\"token operator\">/</span>docker<span class=\"token punctuation\">.</span>sock\n제일 중요한 옵션\ndocker <span class=\"token keyword\">in</span> docker를 구현하기 위해 사용하는 옵션\n\n<span class=\"token operator\">-</span>u root\nDocker 사용자를 root로 설정\n\n<span class=\"token operator\">-</span>p <span class=\"token number\">8080</span><span class=\"token punctuation\">:</span><span class=\"token number\">8080</span> <span class=\"token operator\">-</span>p <span class=\"token number\">50000</span><span class=\"token punctuation\">:</span><span class=\"token number\">50000</span>\nlocal port와 container port 연결\n<span class=\"token number\">8080</span>은 Jenkins 기본 port\n50000dms Jenkins slave port\n\n<span class=\"token operator\">-</span><span class=\"token class-name\">e</span> TZ<span class=\"token operator\">=</span>Asia<span class=\"token operator\">/</span>Seoul\njenkins 내의 timezone 설정</code></pre></div>\n<br/>\n<br/>\n<p>Jenkins 컨테이너가 제대로 생성된 것을 확인!</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@jenkins devops<span class=\"token operator\">-</span>pipeline<span class=\"token punctuation\">]</span># docker ps\nCONTAINER ID        IMAGE                    COMMAND                  CREATED             STATUS              PORTS                                              NAMES\nd8cbbb69e267        jenkins<span class=\"token operator\">/</span>jenkins<span class=\"token punctuation\">:</span>latest   <span class=\"token string\">\"/sbin/tini -- /usr/…\"</span>   <span class=\"token number\">2</span> minutes ago       Up <span class=\"token number\">2</span> minutes        <span class=\"token number\">0.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token punctuation\">:</span><span class=\"token number\">8080</span><span class=\"token operator\">-></span><span class=\"token number\">8080</span><span class=\"token operator\">/</span>tcp<span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token punctuation\">:</span><span class=\"token number\">50000</span><span class=\"token operator\">-></span><span class=\"token number\">50000</span><span class=\"token operator\">/</span>tcp   jenkins</code></pre></div>\n<br/>\n<hr>\n<h3 id=\"gcp-방화벽firewall-설정\" style=\"position:relative;\"><a href=\"#gcp-%EB%B0%A9%ED%99%94%EB%B2%BDfirewall-%EC%84%A4%EC%A0%95\" aria-label=\"gcp 방화벽firewall 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GCP 방화벽(Firewall) 설정</h3>\n<br/>\n<p>기본적으로 Jenkins는 8080포트를 사용하기에 GCP에서의 외부 통신을 위해선 방화벽 설정이 필요합니다.</p>\n<br/>\n<p>그림과 같이 인스턴스의 [네트워크 세부정보 보기] 탭으로 접속합니다</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/93840857-cbbe5d80-fccc-11ea-8204-63775025051c.png\" alt=\"스크린샷, 2020-09-22 12-11-43\"></p>\n<br/>\n<br/>\n<p>[방화벽 규칙] - [방화벽 규칙 만들기] 탭을 이용해 아래와 같이 규칙을 생성합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/93841021-48513c00-fccd-11ea-9080-277cc08722b3.png\" alt=\"스크린샷, 2020-09-22 12-14-37\"><br>\n<code class=\"language-text\">0.0.0.0/0은 모든 IP 대역에 대한 허용입니다.</code><br>\n현재는 기능테스트를 위해서 모든 대역으로 잡아놨지만 후에 특정 인스턴스의 IP로만 허용 할 예정입니다</p>\n<br/>\n<br/>\n<p>그럼 아래 같은 방화벽이 추가된 것을 GCP에서 확인 할 수 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/93841074-73d42680-fccd-11ea-9994-508de3ab13ca.png\" alt=\"스크린샷, 2020-09-22 12-16-29\"></p>\n<br/>\n<br/>\n<p><code class=\"language-text\">이제 브라우저로 젠킨스에 접속 해봅시다</code>  </p>\n<ul>\n<li>접속 주소는 <a href=\"http://%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4\">http://인스턴스</a> 외부 IP:8080 입니다.  </li>\n</ul>\n<br/>\n<p>즉 GCP에서 인스턴스에 외부 IP 설정이 필요합니다!!</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/93844259-8c493e80-fcd7-11ea-8587-52b03347f155.png\" alt=\"스크린샷, 2020-09-22 13-28-43\"></p>\n<br/>\n<br/>\n<p>해당 인스턴스의 외부 IP : 34.64.93.209로 접속!!</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/93844315-b69afc00-fcd7-11ea-8e8d-2b661d0b1729.png\" alt=\"스크린샷, 2020-09-22 13-29-55\">\n이렇게 Jenkins가 지원하는 웹페이지가 정상 구동됩니다</p>\n<br/>\n<br/>\n<p>Administrator password에는 다음의 명령어로 확인되는 코드를 입력해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">docker exec <span class=\"token operator\">-</span>it jenkins cat <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>jenkins_home<span class=\"token operator\">/</span>secrets<span class=\"token operator\">/</span>initialAdminPassword</code></pre></div>\n<br/>\n<br/>\n<p>해당 어드민 키를 입력 후 기본적인 정보들을 입력하면 아래와 같이 페이지를 볼 수 있습니다  </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/93844873-9e2be100-fcd9-11ea-9dec-621d09789744.png\" alt=\"스크린샷, 2020-09-22 13-43-21\"></p>\n<br/>\n<hr>\n<h3 id=\"자-이제-gitlab과-연동해봅시다\" style=\"position:relative;\"><a href=\"#%EC%9E%90-%EC%9D%B4%EC%A0%9C-gitlab%EA%B3%BC-%EC%97%B0%EB%8F%99%ED%95%B4%EB%B4%85%EC%8B%9C%EB%8B%A4\" aria-label=\"자 이제 gitlab과 연동해봅시다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자 이제 gitlab과 연동해봅시다.</h3>\n<br/>\n<p>주로 외부 저장소로 GITLAB, GITHUB를 많이 이용하는데<br>\n이번 포스트에서는 <code class=\"language-text\">gitlab</code>을 사용해보겠습니다.  </p>\n<br/>\n<p><a href=\"https://gitlab.com/\">gitlab</a> Gitlab 로그인 후 Settings 메뉴에 접속합니다   </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/93845625-7be79280-fcdc-11ea-85d9-7b0f1fc27f62.png\" alt=\"스크린샷, 2020-09-22 14-04-02\"></p>\n<br/>\n<br/>\n<p>아래와 같은 설정으로 토큰을 생성 해줍니다  </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/93845725-e39ddd80-fcdc-11ea-8784-bcd98b5f15b8.png\" alt=\"스크린샷, 2020-09-22 14-06-58\"></p>\n<br/>\n<br/>\n<p>생성 후 토큰 값이 나올텐데 기록해두세요!!  </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/93845764-0b8d4100-fcdd-11ea-8c06-3aec0f404540.png\" alt=\"스크린샷, 2020-09-22 14-08-04\"></p>\n<br/>\n<hr>\n<h3 id=\"docker-in-docker-dind-작업\" style=\"position:relative;\"><a href=\"#docker-in-docker-dind-%EC%9E%91%EC%97%85\" aria-label=\"docker in docker dind 작업 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker in Docker (DinD) 작업</h3>\n<br/>\n<p>우선 Docker를 이용해 이미지 Build 및 Push를 위해 플러그인을 설치해줍니다</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/94152453-8a89a180-feb6-11ea-9bd9-64c85abc085f.PNG\" alt=\"123\"></p>\n<br/>\n<br/>\n<p>Jenkins에서 GitLab과 연동을 위한 Credential 추가<br>\n우선 Jenkins에서 GitLab token을 사용하는 Credential을 생성합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/93848039-95d8a380-fce3-11ea-9862-f21c1b40f4b4.png\" alt=\"스크린샷, 2020-09-22 14-54-54\">\ndocker-build-step, Docker, Docker-pipeline 세가지!</p>\n<br/>\n<br/>\n<h3 id=\"docker-in-docker-구성\" style=\"position:relative;\"><a href=\"#docker-in-docker-%EA%B5%AC%EC%84%B1\" aria-label=\"docker in docker 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker in Docker 구성</h3>\n<br/>\n<p>Docker Container 접속</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker exec <span class=\"token operator\">-</span>it jenkins bash</code></pre></div>\n<br/>\n<br/>\n<p>Docker설치를 위한 Shell 다운로드</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ curl <span class=\"token operator\">-</span>fsSL <span class=\"token keyword\">get</span><span class=\"token punctuation\">.</span>docker<span class=\"token punctuation\">.</span>com <span class=\"token operator\">-</span>o <span class=\"token keyword\">get</span><span class=\"token operator\">-</span>docker<span class=\"token punctuation\">.</span>sh</code></pre></div>\n<br/>\n<br/>\n<p>Docker install shell script 실행</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ sh <span class=\"token keyword\">get</span><span class=\"token operator\">-</span>docker<span class=\"token punctuation\">.</span>sh</code></pre></div>\n<br/>\n<br/>\n<p> docker 실행 가능 여부 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker ps\nCONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                                              NAMES\n094c32442200        nasa1415<span class=\"token operator\">/</span>devops<span class=\"token punctuation\">:</span><span class=\"token number\">0.1</span>   \"<span class=\"token operator\">/</span>sbin<span class=\"token operator\">/</span>tini <span class=\"token operator\">--</span> <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span><span class=\"token operator\">??</span>   About an hour ago   Up About an hour    <span class=\"token number\">0.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token punctuation\">:</span><span class=\"token number\">8080</span><span class=\"token operator\">-></span><span class=\"token number\">8080</span><span class=\"token operator\">/</span>tcp<span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token punctuation\">:</span><span class=\"token number\">50000</span><span class=\"token operator\">-></span><span class=\"token number\">50000</span><span class=\"token operator\">/</span>tcp   jenkins</code></pre></div>\n<br/>\n<hr>\n<h3 id=\"여기까지-ci를-설정-끝\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EA%B8%B0%EA%B9%8C%EC%A7%80-ci%EB%A5%BC-%EC%84%A4%EC%A0%95-%EB%81%9D\" aria-label=\"여기까지 ci를 설정 끝 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여기까지 CI를 설정 끝</h3>\n<br/>\n<p>Build 할 Docker 이미지를 준비합시다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\">FROM</span> ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">18.04</span>\nRUN ln <span class=\"token operator\">-</span>sf <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>share<span class=\"token operator\">/</span>zoneinfo<span class=\"token operator\">/</span>Asia<span class=\"token operator\">/</span>Seoul <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>localtime\nRUN apt upgrade <span class=\"token operator\">-</span>y\nRUN apt<span class=\"token operator\">-</span><span class=\"token keyword\">get</span> update <span class=\"token operator\">-</span>y\nRUN apt<span class=\"token operator\">-</span><span class=\"token keyword\">get</span> install nginx <span class=\"token operator\">-</span>y\nRUN echo <span class=\"token string\">\"daemon off;\"</span> <span class=\"token operator\">>></span> <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>nginx<span class=\"token operator\">/</span>nginx<span class=\"token punctuation\">.</span>conf\n\nCMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"nginx\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>위와 같이 간단한 우분투 생성 DockerFile을 만들어서 배포해보죠</p>\n<br/>\n<br/>\n<h2 id=\"-ci-이미지-build--push\" style=\"position:relative;\"><a href=\"#-ci-%EC%9D%B4%EB%AF%B8%EC%A7%80-build--push\" aria-label=\" ci 이미지 build  push permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✌ (CI) 이미지 Build &#x26; push</h2>\n<br/>\n<p>그전에 배포를 위해 Docker-Hub의 인증키를 생성합니다<br>\nJenkins->Credentials->global->Add Credentials</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/94220408-d292dd80-ff23-11ea-84a2-c636709c2986.png\" alt=\"스크린샷, 2020-09-25 11-39-43\">\n위의 캡쳐와 같이 DOCKERHUB의 ID와 PASSWORD를 적어서 인증키를 생성합니다</p>\n<br/>\n<br/>\n<p>생성된 인증키를 확인합니다</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/94220566-31585700-ff24-11ea-8f0e-2e5593ed3dfb.png\" alt=\"스크린샷, 2020-09-25 11-42-25\"></p>\n<br/>\n<br/>\n<p>이제 배포를 위해 Jenkins에서 새로운 item을 누르고, pipeline 선택 후 item의 이름을 입력해주세요.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/94220622-577df700-ff24-11ea-9463-eb744535a220.png\" alt=\"스크린샷, 2020-09-25 11-43-31\"></p>\n<br/>\n<br/>\n<p>Pipeline 메뉴에서 Definition을 Pipeline script from SCM을 선택하여 주세요.<br>\n이제 Script path를 물어보게 되는데, jenkinsfile-build에 각 단계를 규정해서 액션을 지정하면 됩니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/94220652-7086a800-ff24-11ea-83f2-33f5617892ae.png\" alt=\"스크린샷, 2020-09-25 11-44-12\">\n레포지토리 항목에는 연동 할 레포지토리 주소를 적어줍니다. 저의 경우 gitlab</p>\n<br/>\n<br/>\n<p>모든 설정을 마무리하고 SAVE를 누르면 아래와 같이 아이템이 생성됩니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/94220781-b2175300-ff24-11ea-9c8b-7a43cb818ab7.png\" alt=\"스크린샷, 2020-09-25 11-46-02\"></p>\n<br/>\n<hr>\n<br/>\n<p>빌드와 푸시를 해봅시다</p>\n<p>git 저장소에 DockerFile과 Jenkinsfile-nasa를 넣어줍니다 </p>\n<p>저의 경우 GITLAB과 사용하는 노트북저장소를 연결시켜 놨습니다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">root@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>gitlab<span class=\"token operator\">/</span>devops<span class=\"token operator\">-</span>pipeline# ls <span class=\"token operator\">-</span>alrt \n합계 <span class=\"token number\">24</span>\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x <span class=\"token number\">3</span> student student <span class=\"token number\">4096</span>  <span class=\"token number\">9</span>월 <span class=\"token number\">22</span> <span class=\"token number\">15</span><span class=\"token punctuation\">:</span><span class=\"token number\">55</span> <span class=\"token range operator\">..</span>\n<span class=\"token operator\">-</span>rw<span class=\"token operator\">-</span>r<span class=\"token operator\">--</span>r<span class=\"token operator\">--</span> <span class=\"token number\">1</span> root    root      <span class=\"token number\">45</span>  <span class=\"token number\">9</span>월 <span class=\"token number\">22</span> <span class=\"token number\">16</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span> README<span class=\"token punctuation\">.</span>md\n<span class=\"token operator\">-</span>rwxrwxrwx <span class=\"token number\">1</span> root    root     <span class=\"token number\">208</span>  <span class=\"token number\">9</span>월 <span class=\"token number\">24</span> <span class=\"token number\">17</span><span class=\"token punctuation\">:</span><span class=\"token number\">56</span> Dockerfile\n<span class=\"token operator\">-</span>rwxrwxrwx <span class=\"token number\">1</span> root    root     <span class=\"token number\">355</span>  <span class=\"token number\">9</span>월 <span class=\"token number\">24</span> <span class=\"token number\">18</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span> Jenkinsfile<span class=\"token operator\">-</span>nasa\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x <span class=\"token number\">8</span> root    root    <span class=\"token number\">4096</span>  <span class=\"token number\">9</span>월 <span class=\"token number\">24</span> <span class=\"token number\">18</span><span class=\"token punctuation\">:</span><span class=\"token number\">11</span> <span class=\"token punctuation\">.</span>git\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x <span class=\"token number\">3</span> root    root    <span class=\"token number\">4096</span>  <span class=\"token number\">9</span>월 <span class=\"token number\">25</span> <span class=\"token number\">11</span><span class=\"token punctuation\">:</span><span class=\"token number\">50</span> <span class=\"token punctuation\">.</span></code></pre></div>\n<br/>\n<br/>\n<p>Jenkinsfile-nasa</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">node <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">stage</span><span class=\"token punctuation\">(</span>'Clone repository'<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        checkout scm\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">stage</span><span class=\"token punctuation\">(</span>'Build image'<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        app <span class=\"token operator\">=</span> docker<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nasa1415/devops\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">stage</span><span class=\"token punctuation\">(</span>'Push image'<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        docker<span class=\"token punctuation\">.</span><span class=\"token function\">withRegistry</span><span class=\"token punctuation\">(</span>'https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>registry<span class=\"token punctuation\">.</span>hub<span class=\"token punctuation\">.</span>docker<span class=\"token punctuation\">.</span>com'<span class=\"token punctuation\">,</span> 'nasa1415'<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            app<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${env.BUILD_NUMBER}\"</span><span class=\"token punctuation\">)</span>\n            app<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<br/>\n<p>이제 생성한 아이템에서 Build Now 버튼을 눌러 빌드해봅시다</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/94221213-96f91300-ff25-11ea-9f24-6db24689479e.png\" alt=\"스크린샷, 2020-09-25 11-52-26\"></p>\n<br/>\n<br/>\n<p>그럼 빌드가 실행되고, 로직을 보여줍니다</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/94221282-c14ad080-ff25-11ea-8f22-7639fa1aa509.png\" alt=\"스크린샷, 2020-09-25 11-53-38\"></p>\n<br/>\n<br/>\n<p>이제 Docker Hub에도 빌드 Numver : 10으로 이미지가 업로드가 된 것을 확인 할 수 있죠.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/94221366-e93a3400-ff25-11ea-964a-b9b6c88f21e9.png\" alt=\"스크린샷, 2020-09-25 11-54-43\"></p>\n<br/>\n<br/>\n<hr>\n<h3 id=\"ci-자동화\" style=\"position:relative;\"><a href=\"#ci-%EC%9E%90%EB%8F%99%ED%99%94\" aria-label=\"ci 자동화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CI 자동화</h3>\n<p>일일히 Build 버튼을 누르면 너무 귀찮으니 GITLAB 저장소에 Push Event 발생시 자동 빌드되도록 설정합시다</p>\n<br/>\n<p>우선 GITLAB에서 Access Token을 발급해줍니다</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/94222018-41256a80-ff27-11ea-9c6c-ddccd1000d8b.png\" alt=\"스크린샷, 2020-09-25 12-04-21\">\nUSER - SETTING - ACCESS TOKEN 메뉴로 들어가 아래와 같이 입력 후 발급된 키를 기억해 두세요</p>\n<br/>\n<br/>\n<p>jenkins에서 발급한 키로 아래와 같이 인증키를 생성합니다!\n<img src=\"https://user-images.githubusercontent.com/69498804/94222018-41256a80-ff27-11ea-9c6c-ddccd1000d8b.png\" alt=\"스크린샷, 2020-09-25 12-04-21\"></p>\n<br/>\n<br/>\n<p>이제 Jenkins에서 Credential을 Global Settings에 Gitlab으로 추가해줍니다<br>\n실제 Jenkins와 Gitlab 연동을 위한 Jenkins의 Manage Jenkins 상에 Configure System 에서<br>\n아래와 같은 설정을 추가합니다. credential은 앞서 생성한 credential을 선택합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/94222189-aaa57900-ff27-11ea-9677-b46edb066a18.png\" alt=\"스크린샷, 2020-09-25 12-07-17\"></p>\n<p>참고할것은 URL내에 http:// 를 필히 입력해야 합니다.<br>\nURL은 생성해둔 GITLAB의 프로젝트 URL 입니다!!</p>\n<br/>\n<hr>\n<h3 id=\"jenkins에서-자동-build-trigger-설정\" style=\"position:relative;\"><a href=\"#jenkins%EC%97%90%EC%84%9C-%EC%9E%90%EB%8F%99-build-trigger-%EC%84%A4%EC%A0%95\" aria-label=\"jenkins에서 자동 build trigger 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jenkins에서 자동 Build trigger 설정</h3>\n<br/>\n<p>아까 생성해둔 아이템에서 설정에 들어가 아래 메뉴에서 웹훅 URL을 확인합니다</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/94222435-4cc56100-ff28-11ea-94fc-475ed1bd211a.png\" alt=\"스크린샷, 2020-09-25 12-11-49\"></p>\n<p>해당 설정 적용 시 build가 push시 자동으로 이루어지도록 합니다.<br>\n여기서 webhook URL정보가 출력되니 기억 해 두어야 합니다.</p>\n<p>저의 경우 URL: <a href=\"http://34.64.94.209:8080/project/image\">http://34.64.94.209:8080/project/image</a> 입니다.</p>\n<br/>\n<hr>\n<h2 id=\"-gitlab에서-integration-webhook-등록\" style=\"position:relative;\"><a href=\"#-gitlab%EC%97%90%EC%84%9C-integration-webhook-%EB%93%B1%EB%A1%9D\" aria-label=\" gitlab에서 integration webhook 등록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🙌 GitLab에서 integration webhook 등록</h2>\n<p>이제 GitLab에서 Push Event가 발생되면 Jenkin의 Job을 build 하는 webhook을 생성하도록 해보겠습니다.</p>\n<br/>\n<p>아래와 같이 GitLab의 해당 project에 settings→ integration 으로 이동하여 webhook을 생성합니다.\n<img src=\"https://user-images.githubusercontent.com/69498804/93849625-7e9bb500-fce7-11ea-9a13-f4575810667e.png\" alt=\"스크린샷, 2020-09-22 15-22-54\">\n방금 전 확인했던 URL을 입력하면 됩니다!!</p>\n<br/>\n<br/>\n<p>다음과 같은 에러가 발생했습니다</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/93850069-51033b80-fce8-11ea-8ea8-285c5abd8f7d.png\" alt=\"스크린샷, 2020-09-22 15-28-46\">\n검색 결과 WebHook 생성 시 URL만 기입하고 Secret 토큰을 기입하지 않아서였다…</p>\n<br/>\n<br/>\n<p>Jenkins 에서 만든 프로젝트에서 설정에 들어가면 아래와 같이 genarator로 발급받을 수 있다.\n<img src=\"https://user-images.githubusercontent.com/69498804/93851083-75601780-fcea-11ea-9820-d35eeb742a25.png\" alt=\"스크린샷, 2020-09-22 15-44-06\"></p>\n<br/>\n<br/>\n<p>웹훅이 제대로 생성되었다면 테스트 해봅시다</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/94222822-61eebf80-ff29-11ea-8640-8b0dc65846dd.png\" alt=\"스크린샷, 2020-09-25 12-19-33\">\n아래 생성된 웹훅에서 Push Events를 클릭하여 테스트 진행해보죠</p>\n<br/>\n<br/>\n<p>그럼 아래처럼 정상적으로 푸시 이벤트를 전송했음을 확인 할 수 있습니다</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/94222874-82b71500-ff29-11ea-9a83-efcbb8e1e512.png\" alt=\"스크린샷, 2020-09-25 12-20-30\"></p>\n<br/>\n<br/>\n<p>자 그럼 이제 모든 설정이 완료되었습니다 git push를 날렸을때 테스트 해보죠</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">root@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>gitlab<span class=\"token operator\">/</span>devops<span class=\"token operator\">-</span>pipeline# ls <span class=\"token operator\">-</span>lart \n합계 <span class=\"token number\">28</span>\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x <span class=\"token number\">3</span> student student <span class=\"token number\">4096</span>  <span class=\"token number\">9</span>월 <span class=\"token number\">22</span> <span class=\"token number\">15</span><span class=\"token punctuation\">:</span><span class=\"token number\">55</span> <span class=\"token range operator\">..</span>\n<span class=\"token operator\">-</span>rw<span class=\"token operator\">-</span>r<span class=\"token operator\">--</span>r<span class=\"token operator\">--</span> <span class=\"token number\">1</span> root    root      <span class=\"token number\">45</span>  <span class=\"token number\">9</span>월 <span class=\"token number\">22</span> <span class=\"token number\">16</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span> README<span class=\"token punctuation\">.</span>md\n<span class=\"token operator\">-</span>rwxrwxrwx <span class=\"token number\">1</span> root    root     <span class=\"token number\">208</span>  <span class=\"token number\">9</span>월 <span class=\"token number\">24</span> <span class=\"token number\">17</span><span class=\"token punctuation\">:</span><span class=\"token number\">56</span> Dockerfile\n<span class=\"token operator\">-</span>rwxrwxrwx <span class=\"token number\">1</span> root    root     <span class=\"token number\">355</span>  <span class=\"token number\">9</span>월 <span class=\"token number\">24</span> <span class=\"token number\">18</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span> Jenkinsfile<span class=\"token operator\">-</span>nasa\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x <span class=\"token number\">8</span> root    root    <span class=\"token number\">4096</span>  <span class=\"token number\">9</span>월 <span class=\"token number\">25</span> <span class=\"token number\">11</span><span class=\"token punctuation\">:</span><span class=\"token number\">57</span> <span class=\"token punctuation\">.</span>git\n<span class=\"token operator\">-</span>rw<span class=\"token operator\">-</span>r<span class=\"token operator\">--</span>r<span class=\"token operator\">--</span> <span class=\"token number\">1</span> root    root       <span class=\"token number\">5</span>  <span class=\"token number\">9</span>월 <span class=\"token number\">25</span> <span class=\"token number\">12</span><span class=\"token punctuation\">:</span><span class=\"token number\">22</span> gitlab<span class=\"token operator\">-</span>push<span class=\"token operator\">-</span>test\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x <span class=\"token number\">3</span> root    root    <span class=\"token number\">4096</span>  <span class=\"token number\">9</span>월 <span class=\"token number\">25</span> <span class=\"token number\">12</span><span class=\"token punctuation\">:</span><span class=\"token number\">22</span> <span class=\"token punctuation\">.</span>\nroot@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>gitlab<span class=\"token operator\">/</span>devops<span class=\"token operator\">-</span>pipeline# git <span class=\"token keyword\">add</span> <span class=\"token operator\">-</span>A\nroot@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>gitlab<span class=\"token operator\">/</span>devops<span class=\"token operator\">-</span>pipeline# git commit <span class=\"token operator\">-</span>m <span class=\"token string\">\"event test\"</span>\n<span class=\"token punctuation\">[</span>master 51f5052<span class=\"token punctuation\">]</span> <span class=\"token keyword\">event</span> test\n<span class=\"token number\">1</span> <span class=\"token class-name\">file</span> changed<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token function\">insertion</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>\ncreate mode <span class=\"token number\">100644</span> gitlab<span class=\"token operator\">-</span>push<span class=\"token operator\">-</span>test\nroot@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>gitlab<span class=\"token operator\">/</span>devops<span class=\"token operator\">-</span>pipeline# git push gitlab\nUsername <span class=\"token keyword\">for</span> 'https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>gitlab<span class=\"token punctuation\">.</span>com'<span class=\"token punctuation\">:</span> nasa1515\nPassword <span class=\"token keyword\">for</span> 'https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>nasa1515@gitlab<span class=\"token punctuation\">.</span>com'<span class=\"token punctuation\">:</span> \n오브젝트 개수 세는 중<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> 완료<span class=\"token punctuation\">.</span>\nDelta compression <span class=\"token keyword\">using</span> up to <span class=\"token number\">8</span> threads<span class=\"token punctuation\">.</span>\n오브젝트 압축하는 중<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 완료<span class=\"token punctuation\">.</span>\n오브젝트 쓰는 중<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">450</span> bytes <span class=\"token operator\">|</span> <span class=\"token number\">450.00</span> KiB<span class=\"token operator\">/</span>s<span class=\"token punctuation\">,</span> 완료<span class=\"token punctuation\">.</span>\nTotal <span class=\"token number\">5</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> reused <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">To</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>gitlab<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>nasa1515<span class=\"token operator\">/</span>devops<span class=\"token operator\">-</span>pipeline<span class=\"token punctuation\">.</span>git\ne901329<span class=\"token range operator\">..</span>51f5052  master <span class=\"token operator\">-></span> master</code></pre></div>\n<p>저는 다음과 같이 gitlab-push-test라는 파일을 생성해서 PUSH 했습니다</p>\n<br/>\n<br/>\n<p>그럼 Jenkins 에서는 Push Event를 읽어와 다름과 같이 자동 빌드합니다</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/94223072-fbb66c80-ff29-11ea-94f5-2b7e440ca6e7.png\" alt=\"스크린샷, 2020-09-25 12-23-53\"></p>\n<br/>\n<hr>\n<h3 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며…</h3>\n<p>이번 포스트에서는 Jenkins를 사용해서 CI 부분을 자동화 해봤습니다.<br>\n사실 이전까지는 DevOps라는 개념에 대해서 추상적으로만 알고있었을 뿐이지 어떤 작업들을 하는지는 정확히 몰랐었습니다.<br>\n아직 파이프라인의 통합 전 사전 설정 단계이지만 이미지는 어떤식으로 빌드를 수행하는지<br>\n그리고 배포는 어떤식으로 하는지 등등을 알게 되었습니다.</p>\n<p>특히 추상적이던 DevOps의 추세에 맞추어서 CI 자연스럽게 연결을 지었고<br>\n추가적으로 결과에 대한 Noti를 Slack등으로 전달받는 기능도 추가할 예정입니다.<br>\n다음 포스트에는 Rancher를 이용한 클러스터 구축에 대해서 적용해보고 정리하는 시간을 갖도록 하겠습니다.</p>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-%ED%99%98%EA%B2%BD%EA%B5%AC%EC%84%B1\">✔ 환경구성</a></li>\n<li>\n<p><a href=\"#-ci\">✔ CI</a></p>\n<ul>\n<li><a href=\"#jenkins-%EC%84%A4%EC%B9%98\">JENKINS 설치</a></li>\n<li><a href=\"#jenkins\">Jenkins</a></li>\n<li><a href=\"#gcp-%EB%B0%A9%ED%99%94%EB%B2%BDfirewall-%EC%84%A4%EC%A0%95\">GCP 방화벽(Firewall) 설정</a></li>\n<li><a href=\"#%EC%9E%90-%EC%9D%B4%EC%A0%9C-gitlab%EA%B3%BC-%EC%97%B0%EB%8F%99%ED%95%B4%EB%B4%85%EC%8B%9C%EB%8B%A4\">자 이제 gitlab과 연동해봅시다.</a></li>\n<li><a href=\"#docker-in-docker-dind-%EC%9E%91%EC%97%85\">Docker in Docker (DinD) 작업</a></li>\n<li><a href=\"#docker-in-docker-%EA%B5%AC%EC%84%B1\">Docker in Docker 구성</a></li>\n<li><a href=\"#%EC%97%AC%EA%B8%B0%EA%B9%8C%EC%A7%80-ci%EB%A5%BC-%EC%84%A4%EC%A0%95-%EB%81%9D\">여기까지 CI를 설정 끝</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-ci-%EC%9D%B4%EB%AF%B8%EC%A7%80-build--push\">✌ (CI) 이미지 Build &#x26; push</a></p>\n<ul>\n<li><a href=\"#ci-%EC%9E%90%EB%8F%99%ED%99%94\">CI 자동화</a></li>\n<li><a href=\"#jenkins%EC%97%90%EC%84%9C-%EC%9E%90%EB%8F%99-build-trigger-%EC%84%A4%EC%A0%95\">Jenkins에서 자동 Build trigger 설정</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-gitlab%EC%97%90%EC%84%9C-integration-webhook-%EB%93%B1%EB%A1%9D\">🙌 GitLab에서 integration webhook 등록</a></p>\n<ul>\n<li><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\">마치며…</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 04, 2021","title":"[DEVOPS] - Jenkins를 이용한 CI 자동화 구축","categories":"DevOps","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/devops-cicd1/"}},"prev":{"id":"3530a618-aa45-5512-8771-62a86a0ea7dc","html":"<p>머리말  </p>\n<p>안녕하세요 NASA입니다!!.<br>\n이번 포스트에서는 Open Source인 Rancher를 이용한 k8s 클러스터 구축에 대한 포스트입니다<br>\n이전 포스트와 다른점은 이전에는 이미 구성되어있는 클러스터를 사용했다면 이번 포스트에서는 GKE를 사용했다는 점입니다!!</p>\n<hr>\n<ul>\n<li>사용 할 툴을 다음과 같습니다.  </li>\n<li>docker, Rancher (GKE)</li>\n<li>k8s</li>\n</ul>\n<hr>\n<h2 id=\"-환경구성\" style=\"position:relative;\"><a href=\"#-%ED%99%98%EA%B2%BD%EA%B5%AC%EC%84%B1\" aria-label=\" 환경구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ 환경구성</h2>\n<p>환경구성은 다음과 같습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/95834575-1c7b2080-0d78-11eb-8aad-5a7ea4701c4a.png\" alt=\"스크린샷, 2020-10-13 17-18-15\"></p>\n<p>Rancher : Rancher master가 띄워져있는 Cluster 관리 서버<br>\nJenkins : 이전 포스트에서 설정한 CI 작동 서버<br>\ngke : GKE 클러스터 노드</p>\n<br/>\n<hr>\n<h3 id=\"gke-service---rancher-서비스-구축\" style=\"position:relative;\"><a href=\"#gke-service---rancher-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B5%AC%EC%B6%95\" aria-label=\"gke service   rancher 서비스 구축 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GKE SERVICE - Rancher 서비스 구축.</h3>\n<ul>\n<li>Rancher로 클러스터를 생성하는 방법은 두가지가 있습니다.</li>\n<li>이번 포스트의 경우 GCP 무료 계정이다보니 Rancher로 클러스터를 생성하기에 어려움이 있습니다.<br>\n할당량 제한…ㅠㅠ 그래서 최소한으로 구축한 클러스터를 연동하겠습니다.</li>\n</ul>\n<br/>\n<h3 id=\"1-rancher로-gke-생성\" style=\"position:relative;\"><a href=\"#1-rancher%EB%A1%9C-gke-%EC%83%9D%EC%84%B1\" aria-label=\"1 rancher로 gke 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Rancher로 GKE 생성</h3>\n<ul>\n<li>\n<p>GCP -> GKE에서 클러스터를 생성합니다</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/95825037-3d894480-0d6b-11eb-954b-0e5212ac4db8.png\" alt=\"스크린샷, 2020-10-13 15-46-04\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>다음과 같이 기본사양으로 GKE 클러스터를 구성했습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/95826118-cfde1800-0d6c-11eb-8bc6-40113f29bdb6.png\" alt=\"스크린샷, 2020-10-13 15-57-33\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>다음과 같이 생성한 노드 정보를 Cloud Shell에서 확인 가능합니다</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/95826246-f9973f00-0d6c-11eb-9661-14600ea38666.png\" alt=\"스크린샷, 2020-10-13 15-58-43\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>이제 Rancher 인스턴스와 연동해보겠습니다.</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>Rancher 대쉬보드에서 Cluster -> ADD Cluster 선택!</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/95835703-88aa5400-0d79-11eb-82ed-f61e8d0dea45.png\" alt=\"스크린샷, 2020-10-13 17-28-35\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>저희가 추가 할 것은 GKE이기 떄문에 GKE를 선택</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/95838368-a6c58380-0d7c-11eb-8344-e9a58e49bc86.png\" alt=\"스크린샷, 2020-10-13 17-29-41\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>그럼 다음과 같은 설정 탭이 나옵니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/95838892-4a169880-0d7d-11eb-84fe-2a8387557a44.png\" alt=\"스크린샷, 2020-10-13 17-55-29\"></p>\n<p>해당 설정파일에서 이름은 상관없고, Service Account만 신경쓰면 됩니다.<br>\nService Account를 등록하기 위해서 아래 작업을 진행합니다.</p>\n</li>\n</ul>\n<br/>\n<br/>\n<ul>\n<li>\n<p>GCP에서 JSON파일 형태의 인증키를 생성해줍니다</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/95836229-2867e200-0d7a-11eb-9ce2-7f1371e9fe11.png\" alt=\"스크린샷, 2020-10-13 17-33-04\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>그럼 아래와 같은 식의 JSON 파일 형식의 키가 LOCAL에 다운받아집니다!!</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/95836300-3f0e3900-0d7a-11eb-9b66-7b7e505ad580.png\" alt=\"스크린샷, 2020-10-13 17-33-40\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>해당 파일을 업로드 해주게 되면 아래와 같이 클러스터 환경 설정 탭이 나옵니다!!</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/95836441-66fd9c80-0d7a-11eb-807e-66cc75f0095a.png\" alt=\"스크린샷, 2020-10-13 17-34-49\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>세부 설정들을 설정 후 CREATE를 누르면 아래와 같이 클러스터가 생성 됩니다.!</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/95839731-50f1db00-0d7e-11eb-9562-b5e45eefe3e7.png\" alt=\"스크린샷, 2020-10-13 18-02-50\"></p>\n</li>\n</ul>\n<br/>\n<hr>\n<h3 id=\"2-구성되어있는-gke-연동\" style=\"position:relative;\"><a href=\"#2-%EA%B5%AC%EC%84%B1%EB%90%98%EC%96%B4%EC%9E%88%EB%8A%94-gke-%EC%97%B0%EB%8F%99\" aria-label=\"2 구성되어있는 gke 연동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 구성되어있는 GKE 연동</h3>\n<br/>\n<ul>\n<li>\n<p>이미 생성되어 있는 GKE 클러스터를 추가해줍니다</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/95843414-a4febe80-0d82-11eb-879b-6850a7bf361c.png\" alt=\"스크린샷, 2020-10-13 17-42-11\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>위 메뉴로 들어가 기본설정을 마치면 아래와 같이 노드로 연결하는 명령어가 나옵니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/95843898-353d0380-0d83-11eb-8f8d-a5f020473aca.png\" alt=\"스크린샷, 2020-10-13 18-34-37\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>GCLOU Shell에서 해당 명령어를 입력!</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">h43254@cloudshell<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span> <span class=\"token punctuation\">(</span>nasa1515<span class=\"token punctuation\">)</span>$ curl <span class=\"token operator\">--</span>insecure <span class=\"token operator\">-</span><span class=\"token class-name\">sfL</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">34.64</span><span class=\"token number\">.79</span><span class=\"token number\">.179</span><span class=\"token operator\">/</span>v3<span class=\"token operator\">/</span>import<span class=\"token operator\">/</span>qw6zts2kzgshvwr5bl62bxn5vpghcdmxwmdskp5xgmfjhc6596v7bx<span class=\"token punctuation\">.</span>yaml <span class=\"token operator\">|</span> kubectl apply <span class=\"token operator\">-</span>f <span class=\"token operator\">-</span>\nclusterrole<span class=\"token punctuation\">.</span>rbac<span class=\"token punctuation\">.</span>authorization<span class=\"token punctuation\">.</span>k8s<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span>proxy<span class=\"token operator\">-</span>clusterrole<span class=\"token operator\">-</span>kubeapiserver created\nclusterrolebinding<span class=\"token punctuation\">.</span>rbac<span class=\"token punctuation\">.</span>authorization<span class=\"token punctuation\">.</span>k8s<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span>proxy<span class=\"token operator\">-</span>role<span class=\"token operator\">-</span>binding<span class=\"token operator\">-</span>kubernetes<span class=\"token operator\">-</span>master created\n<span class=\"token keyword\">namespace</span><span class=\"token operator\">/</span>cattle<span class=\"token operator\">-</span>system created\nserviceaccount<span class=\"token operator\">/</span>cattle created\nclusterrolebinding<span class=\"token punctuation\">.</span>rbac<span class=\"token punctuation\">.</span>authorization<span class=\"token punctuation\">.</span>k8s<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span>cattle<span class=\"token operator\">-</span>admin<span class=\"token operator\">-</span>binding created\nsecret<span class=\"token operator\">/</span>cattle<span class=\"token operator\">-</span>credentials<span class=\"token operator\">-</span>61fa6cb created\nclusterrole<span class=\"token punctuation\">.</span>rbac<span class=\"token punctuation\">.</span>authorization<span class=\"token punctuation\">.</span>k8s<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span>cattle<span class=\"token operator\">-</span>admin created\ndeployment<span class=\"token punctuation\">.</span>apps<span class=\"token operator\">/</span>cattle<span class=\"token operator\">-</span>cluster<span class=\"token operator\">-</span>agent created</code></pre></div>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>잠시 API가 연동되는 시간을 기다리면 아래와 같이 클러스터가 연동 됩니다</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/95844827-54886080-0d84-11eb-8106-b48eccb53ef7.png\" alt=\"스크린샷, 2020-10-13 18-45-48\"></p>\n</li>\n</ul>\n<br/>\n<p><code class=\"language-text\">이제 기본적인 Rancher 클러스터 환경 구성이 완료되었습니다.</code></p>\n<br/>\n<hr>\n<h3 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며…</h3>\n<p>이번 포스트에서는 Rancher를 사용해서 GKE k8s 클러스터를 생성하는 법을 알아봤습니다.<br>\n쓰면 쓸수록 멀티클라우드의 쿠버네티스 환경에 아주 적합한 툴인 것을 느끼고 있으나<br>\n한국에서는 많이 사용하지 않는 이유를 잘 모르겠습니다.<br>\n해외 스택을 들어가보면 SPINNAKER vs Rancher의 구도로 사람들이 많이 사용하고 있는데<br>\n한국에서는 SPINNAKER가 주를 이루고 있네요…아쉽습니다   </p>\n<p>다음 포스트에는 Rancher 위에 Argo-CD를 올려서 배포를 자동화 해봅시다!</p>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%ED%99%98%EA%B2%BD%EA%B5%AC%EC%84%B1\">✔ 환경구성</a></p>\n<ul>\n<li><a href=\"#gke-service---rancher-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B5%AC%EC%B6%95\">GKE SERVICE - Rancher 서비스 구축.</a></li>\n<li><a href=\"#1-rancher%EB%A1%9C-gke-%EC%83%9D%EC%84%B1\">1. Rancher로 GKE 생성</a></li>\n<li><a href=\"#2-%EA%B5%AC%EC%84%B1%EB%90%98%EC%96%B4%EC%9E%88%EB%8A%94-gke-%EC%97%B0%EB%8F%99\">2. 구성되어있는 GKE 연동</a></li>\n<li><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\">마치며…</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 06, 2021","title":"[DEVOPS] - GKE Cluster를 Rancher에 연동하기","categories":"DevOps GCP","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/devops-rancher-gke/"}},"site":{"siteMetadata":{"siteUrl":"https://nasa1515.com","comments":{"utterances":{"repo":"nasa1515/nasablog"}}}}},"pageContext":{"slug":"/devops-rancher/","nextSlug":"/devops-cicd1/","prevSlug":"/devops-rancher-gke/"}},"staticQueryHashes":["1073350324","2938748437"]}