{"componentChunkName":"component---src-templates-blog-template-js","path":"/docker-install/","result":{"data":{"cur":{"id":"42ce3601-f03b-5fec-b93c-308b868bf3a5","html":"<p>머리말  </p>\n<p> 이전 포스트에서는 도커에 대해서, 도커와 VM과의 차이 에서 포스팅 했었다.<br>\n이번 포스트에서는 실제 도커의 설치방법 및 확인 방법등에 대해 간단하게 포스트 했다.</p>\n<hr>\n<h2 id=\"-도커-설치\" style=\"position:relative;\"><a href=\"#-%EB%8F%84%EC%BB%A4-%EC%84%A4%EC%B9%98\" aria-label=\" 도커 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ 도커 설치</h2>\n<p>도커는 리눅스 컨테이너 기술이므로 macOS나 windows에 설치할 경우 가상머신에 설치가 됩니다.<br>\n리눅스 컨테이너 말고 윈도우즈 컨테이너라는 것도 존재하지만 이 포스트는 리눅스를 전제로 합니다.  </p>\n<ul>\n<li>\n<p>Linux<br>\n리눅스에 도커를 설치하는 방법은 자동 설치 스크립트를 이용하는 것이 가장 쉽습니다.<br>\n다음 명령어를 입력하면 root 권한을 요구하고 잠시 기다리면 설치가 완료됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">curl <span class=\"token operator\">-</span><span class=\"token class-name\">fsSL</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">.</span>docker<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span> <span class=\"token operator\">|</span> sudo sh</code></pre></div>\n</li>\n</ul>\n<hr>\n<p>스크립트를 사용하는 방법 외에도 패키지 저장소에 연결하여 설치도 가능합니다.  </p>\n<ul>\n<li>\n<p>패키지 저장소 연결</p>\n<ul>\n<li>사전 패키지 설치  </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># sudo yum install -y yum-utils \\</span>\n<span class=\"token operator\">></span> device<span class=\"token operator\">-</span>mapper<span class=\"token operator\">-</span>persistent<span class=\"token operator\">-</span>data \\\n<span class=\"token operator\">></span> lvm2</code></pre></div>\n<br/>\n<ul>\n<li>Yum 저장소 설정\n<code class=\"language-text\">yum-config-manager</code>로 docker-ce 패키지 저장소에 연결한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># sudo yum-coinfig-manager \\</span>\n<span class=\"token operator\">></span> <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>repo \\\n<span class=\"token operator\">></span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>download<span class=\"token punctuation\">.</span>docker<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>linux<span class=\"token operator\">/</span>centos<span class=\"token operator\">/</span>docker<span class=\"token operator\">-</span>ce<span class=\"token punctuation\">.</span>repo</code></pre></div>\n<br/>\n<ul>\n<li>docker-ce 설치</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># sudo yum install -y docker-ce docker-ce-cli containerd.io</span></code></pre></div>\n<br/>\n<ul>\n<li>서비스 실행 및 활성화</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># sudo systemctl start docker</span>\n<span class=\"token preprocessor property\"># sudo systemctl enable docker</span></code></pre></div>\n<br/>\n<ul>\n<li>sudo 없이 DOCKER 사용하기</li>\n</ul>\n<p><code class=\"language-text\">docker`는 기본적으로</code>root<code class=\"language-text\"></code>권한이 필요합니다.<br>\nroot가 아닌 사용자가 sudo없이 사용하려면 해당 사용자를 docker그룹에 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">sudo usermod <span class=\"token operator\">-</span>aG docker $USER # 현재 접속중인 사용자에게 권한주기\nsudo usermod <span class=\"token operator\">-</span>aG docker your<span class=\"token operator\">-</span>user # your<span class=\"token operator\">-</span>user 사용자에게 권한주기</code></pre></div>\n<p>사용자가 로그인 중이라면 다시 로그인 후 권한이 적용됩니다.</p>\n<br/>\n<ul>\n<li>DOCKER VERSION 확인\ndocker 설치 완료 후 설정이 끝났으면 version을 확인해본다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker <span class=\"token class-name\">version</span>\nClient<span class=\"token punctuation\">:</span> Docker Engine <span class=\"token operator\">-</span> <span class=\"token class-name\">Community</span>\nVersion<span class=\"token punctuation\">:</span>           <span class=\"token number\">19.03</span><span class=\"token number\">.12</span>\n<span class=\"token class-name\">API</span> version<span class=\"token punctuation\">:</span>       <span class=\"token number\">1.40</span>\n<span class=\"token class-name\">Go</span> version<span class=\"token punctuation\">:</span>        go1<span class=\"token punctuation\">.</span><span class=\"token number\">13.10</span>\n<span class=\"token class-name\">Git</span> commit<span class=\"token punctuation\">:</span>        48a66213fe\nBuilt<span class=\"token punctuation\">:</span>             Mon Jun <span class=\"token number\">22</span> <span class=\"token number\">15</span><span class=\"token punctuation\">:</span><span class=\"token number\">45</span><span class=\"token punctuation\">:</span><span class=\"token number\">36</span> <span class=\"token number\">2020</span>\nOS<span class=\"token operator\">/</span>Arch<span class=\"token punctuation\">:</span>           linux<span class=\"token operator\">/</span><span class=\"token class-name\">amd64</span>\nExperimental<span class=\"token punctuation\">:</span>      <span class=\"token class-name\">false</span>\n\nServer<span class=\"token punctuation\">:</span> Docker Engine <span class=\"token operator\">-</span> <span class=\"token class-name\">Community</span>\nEngine<span class=\"token punctuation\">:</span>\nVersion<span class=\"token punctuation\">:</span>          <span class=\"token number\">19.03</span><span class=\"token number\">.12</span>\n<span class=\"token class-name\">API</span> version<span class=\"token punctuation\">:</span>      <span class=\"token number\">1.40</span> <span class=\"token punctuation\">(</span>minimum version <span class=\"token number\">1.12</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Go</span> version<span class=\"token punctuation\">:</span>       go1<span class=\"token punctuation\">.</span><span class=\"token number\">13.10</span>\n<span class=\"token class-name\">Git</span> commit<span class=\"token punctuation\">:</span>       48a66213fe\nBuilt<span class=\"token punctuation\">:</span>            Mon Jun <span class=\"token number\">22</span> <span class=\"token number\">15</span><span class=\"token punctuation\">:</span><span class=\"token number\">44</span><span class=\"token punctuation\">:</span><span class=\"token number\">07</span> <span class=\"token number\">2020</span>\nOS<span class=\"token operator\">/</span>Arch<span class=\"token punctuation\">:</span>          linux<span class=\"token operator\">/</span><span class=\"token class-name\">amd64</span>\nExperimental<span class=\"token punctuation\">:</span>     <span class=\"token class-name\">false</span>\ncontainerd<span class=\"token punctuation\">:</span>\nVersion<span class=\"token punctuation\">:</span>          <span class=\"token number\">1.2</span><span class=\"token number\">.13</span>\nGitCommit<span class=\"token punctuation\">:</span>        7ad184331fa3e55e52b890ea95e65ba581ae3429\nrunc<span class=\"token punctuation\">:</span>\nVersion<span class=\"token punctuation\">:</span>          <span class=\"token number\">1.0</span><span class=\"token number\">.0</span><span class=\"token operator\">-</span><span class=\"token class-name\">rc10</span>\nGitCommit<span class=\"token punctuation\">:</span>        dc9208a3303feef5b3839f4323d9beb36df0a9dd\ndocker<span class=\"token operator\">-</span>init<span class=\"token punctuation\">:</span>\nVersion<span class=\"token punctuation\">:</span>          <span class=\"token number\">0.18</span><span class=\"token number\">.0</span>\nGitCommit<span class=\"token punctuation\">:</span>        fec3683</code></pre></div>\n<p><code class=\"language-text\">Client</code>와 <code class=\"language-text\">Server</code>정보가 정상적으로 출력되었다면 설치가 완료된 것 입니다.</p>\n<p>Server 정보가 정상적으로 나오지 않고<br>\n<code class=\"language-text\">Error response from daemon: Bad response from Docker engine</code> 메시지가 출력되는 경우는<br>\n보통 docker daemon이 정상적으로 실행되지 않았거나 sudo를 입력하지 않은 경우입니다.</p>\n<ul>\n<li>간단한 컨테이너 구동 테스트<br>\n어떤 언어를 배우더라도 가장 처음해보는 실습은 HELLO WORLD 메세지 출력일 것이다.<br>\n이번 포스트에서도 설치 기념으로 <code class=\"language-text\">Hello World</code> 컨테이너를 실행해본다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">student@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run hello<span class=\"token operator\">-</span>world\nUnable to find image 'hello<span class=\"token operator\">-</span>world<span class=\"token punctuation\">:</span>latest' <span class=\"token class-name\">locally</span>\nlatest<span class=\"token punctuation\">:</span> Pulling <span class=\"token keyword\">from</span> library<span class=\"token operator\">/</span>hello<span class=\"token operator\">-</span>world\n0e03bdcc26d7<span class=\"token punctuation\">:</span> Pull <span class=\"token class-name\">complete</span> \nDigest<span class=\"token punctuation\">:</span> sha256<span class=\"token punctuation\">:</span>7f0a9f93b4aa3022c3a4c147a449bf11e0941a1fd0bf4a8e6c9408b2600777c5\nStatus<span class=\"token punctuation\">:</span> Downloaded newer image <span class=\"token keyword\">for</span> hello<span class=\"token operator\">-</span>world<span class=\"token punctuation\">:</span>latest\n\nHello <span class=\"token keyword\">from</span> Docker<span class=\"token operator\">!</span>\nThis message shows that your installation appears to be working correctly<span class=\"token punctuation\">.</span>\n\nTo generate <span class=\"token keyword\">this</span> message<span class=\"token punctuation\">,</span> Docker took the <span class=\"token class-name\">following</span> steps<span class=\"token punctuation\">:</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">.</span> The Docker client contacted the Docker daemon<span class=\"token punctuation\">.</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span> The Docker daemon pulled the <span class=\"token string\">\"hello-world\"</span> image <span class=\"token keyword\">from</span> the Docker Hub<span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">(</span>amd64<span class=\"token punctuation\">)</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span> The Docker daemon created a <span class=\"token keyword\">new</span> container <span class=\"token keyword\">from</span> that image which runs the\n    executable that produces the output you are currently reading<span class=\"token punctuation\">.</span>\n<span class=\"token number\">4</span><span class=\"token punctuation\">.</span> The Docker daemon streamed that output to the <span class=\"token class-name\">Docker</span> client<span class=\"token punctuation\">,</span> which sent it\n    to your terminal<span class=\"token punctuation\">.</span>\n\nTo <span class=\"token keyword\">try</span> something <span class=\"token class-name\">more</span> ambitious<span class=\"token punctuation\">,</span> you can run an Ubuntu <span class=\"token class-name\">container</span> with<span class=\"token punctuation\">:</span>\n$ docker run <span class=\"token operator\">-</span>it ubuntu bash\n\n<span class=\"token class-name\">Share</span> images<span class=\"token punctuation\">,</span> <span class=\"token class-name\">automate</span> workflows<span class=\"token punctuation\">,</span> <span class=\"token keyword\">and</span> more with a free <span class=\"token class-name\">Docker</span> ID<span class=\"token punctuation\">:</span>\nhttps<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>hub<span class=\"token punctuation\">.</span>docker<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>\n\nFor more examples <span class=\"token keyword\">and</span> ideas<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">visit</span><span class=\"token punctuation\">:</span>\nhttps<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>docs<span class=\"token punctuation\">.</span>docker<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span><span class=\"token keyword\">get</span><span class=\"token operator\">-</span>started<span class=\"token operator\">/</span></code></pre></div>\n</li>\n<li>\n<p>주의사항</p>\n<p>도커가 지원되는 kernel 버전은 <code class=\"language-text\">3.10.x</code> 이상입니다.<br>\nubuntu 14.04 이상을 사용하면 큰 문제가 없고 kernel의 버전이 낮을 경우 제대로 동작을 안하거나 문제가 생길 수 있습니다.<br>\n가급적 최신버전으로 업데이트 해주세요. ubuntu나 centos가 아닌 경우는 다른 방법이 필요합니다.<br>\n다른 OS를 기반으로 DOCKER를 설치하기 위해선 아래 메뉴얼을 확인해보세요.<br>\n<a href=\"https://docs.docker.com/engine/install/\">https://docs.docker.com/engine/install/</a></p>\n</li>\n</ul>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-%EB%8F%84%EC%BB%A4-%EC%84%A4%EC%B9%98\">✔ 도커 설치</a></li>\n</ul>\n</div>","excerpt":"머리말    이전 포스트에서는 도커에 대해서, 도커와 VM과의 차이 에서 포스팅 했었다.  이번 포스트에서는 실제 도커의 설치방법 및 확인 방법등에 대해 간단하게 포스트 했다. ✔ 도커 설치 도커는 리눅스 컨테이너 기술이므로 macOS나 windows에 설치할 경우 가상머신에 설치가 됩니다. 리눅스 컨테이너 말고 윈도우즈 컨테이너라는 것도 존재하지만 이 포스트는 리눅스를 전제로 합니다.   Linux 리눅스에 도커를 설치하는 방법은 자동 설치 스크립트를 이용하는 것이 가장 쉽습니다. 다음 명령어를 입력하면 root 권한을 요구하고 잠시 기다리면 설치가 완료됩니다. 스크립트를 사용하는 방법 외에도 패키지 저장소에 연결하…","frontmatter":{"date":"June 26, 2021","title":"[DOCKER] - Install","categories":"DOCKER","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/docker-install/"}},"next":{"id":"2c6aaf2e-afa2-5601-8840-df15a9f171b6","html":"<p>머리말  </p>\n<p> GCP를 공부하기 위해 모인 사람들로 구성해서 간단한 토이 프로젝트를 진행해보았다.<br>\n리눅스를 처음 공부하듯 GCP에서도 웹페이지를 띄우는 프로젝트를 우선 진행해보았다.  </p>\n<hr>\n<h2 id=\"-gcp를-사용한-웹-사이트-구축-토이-프로젝트\" style=\"position:relative;\"><a href=\"#-gcp%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%9B%B9-%EC%82%AC%EC%9D%B4%ED%8A%B8-%EA%B5%AC%EC%B6%95-%ED%86%A0%EC%9D%B4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\" gcp를 사용한 웹 사이트 구축 토이 프로젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ GCP를 사용한 웹 사이트 구축 토이 프로젝트</h2>\n<p>사용기술 [GCP]</p>\n<ul>\n<li>인스턴스</li>\n<li>SQL (VPC)</li>\n<li>로드밸런싱</li>\n<li>오토스케일링</li>\n<li>HTTP/APACHE/MYSQL/Wordpress</li>\n<li>DNS </li>\n</ul>\n<br/>\n<h3 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h3>\n<p>  오토스케일링은 클라우드 환경의 가장 기본적 요소들 중에 하나입니다.<br>\n트래픽 집중에 따라 서버, 스토리지 등의 자원이 자동으로 확장하면서  안정적인 서비스를 유지 할 수 있습니다.<br>\n서버의 개수가 늘어나는 것을 <code class=\"language-text\">스케일 아웃 (scale out)</code>  줄어드는 것을 <code class=\"language-text\">스케일 인 (scale in)</code>이라고 한다.<br>\n오토스케일링을 통해 트래픽에 따라 서버의 대수 조절을 자동화, 효율적으로 웹서버를 운영할 수 있는 프로젝트를 진행해보았습니다.  </p>\n<br/>\n<h3 id=\"architecture\" style=\"position:relative;\"><a href=\"#architecture\" aria-label=\"architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Architecture</h3>\n<p>  오토스케일링이 가능한 웹서버를 구축하기 위해서 다음과 같이 구성했습니다.<br>\n먼저, 외부의 요청을 받을 글로벌 로드 밸런서를 구축했고 웹서버가 설치된 인스턴스 그룹이 필요합니다.<br>\n실제로 서비스 할 VM 인스턴스는 인스턴스 그룹의 설정 정보 (CPU 사용량 등 모니터링 메트릭)에 따라<br>\n인스턴스 템플릿을 통해 자동으로 생성이 되거나 삭제가 됩니다.  </p>\n<p>  프로젝트 서비스 아키텍처</p>\n<p>  <img src=\"https://user-images.githubusercontent.com/64260883/89745329-0ccc2b00-daee-11ea-9c38-212150528a9b.png\" alt=\"아키\"></p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># Client : 웹서버에 접속하는 유저들  </span>\n<span class=\"token preprocessor property\"># DNS : 특정 LB의 주소로 DNS를 구축해 로드밸런싱 될 수 있도록 구성  </span>\n<span class=\"token preprocessor property\"># LB : 특정 웹서버의 CPU 사용량이 일정 수준을 넘어가면 오토스케일링 진행.  </span>\n<span class=\"token preprocessor property\"># VPN : 특정 호스트만 관리자 웹서버에 접속하기 위한 보안 설정</span></code></pre></div>\n<hr>\n<h2 id=\"-서버-구축-순서\" style=\"position:relative;\"><a href=\"#-%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95-%EC%88%9C%EC%84%9C\" aria-label=\" 서버 구축 순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✌ 서버 구축 순서</h2>\n<ol>\n<li>인스턴스 템플릿을 만들기 위해 VM 인스턴스를 생성합니다.  </li>\n<li>생성된 VM 인스턴스에 웹서버를 설치합니다.  </li>\n<li>웹서버에 GCP SQL을 이용해 DB를 공유시킵니다.  </li>\n<li>Wordpress 설정을 진행합니다.</li>\n<li>웹서버가 설치된 인스턴스를 스냅샷으로 만듭니다.</li>\n<li>생성된 스냅샷을 가지고 이미지를 만듭니다.</li>\n<li>이미지를 가지고 인스턴스 템플릿을 생성합니다.</li>\n<li>인스턴스 템플릿으로 인스턴스 그룹을 생성합니다.</li>\n<li>로드 밸런서를 적용해 웹서버에 들어오는 트래픽을 부하분산 시킵니다.</li>\n<li>DNS 서버를 위한 인스턴스를 하나 생성합니다.</li>\n<li>DNS 를 위한 방화벽 설정 을 추가합니다.</li>\n</ol>\n<hr>\n<h2 id=\"-서버-구축\" style=\"position:relative;\"><a href=\"#-%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95\" aria-label=\" 서버 구축 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👏 서버 구축</h2>\n<ol>\n<li>\n<p>VM Instance 생성  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89241265-5a9dea80-d639-11ea-8daf-15a819085531.png\" alt=\"스크린샷, 2020-08-04 10-00-11\"></p>\n<p>GCP 콘솔에서 [Compute Engine]에서 [VM 인스턴스]를 선택 후 [인스턴스 만들기]를 클릭해서 인스턴스를 생성합니다.<br>\nVM 인스턴스는 아래와 같은 조건으로 생성합니다.      </p>\n<ul>\n<li>CLOUD SQL API를 이용할 것이기 때문에 API 허용 설정을 해줍니다.  </li>\n<li>VPC를 통해서 직접 DB를 연결 할 것이기 때문에 외부IP를 고정으로 예약합니다.  </li>\n<li>나머지 값들은 기본으로 둡니다.</li>\n</ul>\n</li>\n</ol>\n<br/>\n<ol start=\"2\">\n<li>\n<p>WEB SERVER 구성  </p>\n<p>[LAMP 구성Permalink]</p>\n<ul>\n<li>Wordpress를 위한 Apache, MySQL(MariaDB), PHP를 설치합니다</li>\n</ul>\n<br/>\n</li>\n</ol>\n<h3 id=\"apache-설치\" style=\"position:relative;\"><a href=\"#apache-%EC%84%A4%EC%B9%98\" aria-label=\"apache 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apache 설치</h3>\n<p>  [아래 명령으로 업데이트 및 httpd 설치, 설정을 진행합니다]</p>\n<p>   <img src=\"https://user-images.githubusercontent.com/64260883/89242215-f7618780-d63b-11ea-8c85-aa504d02ffff.png\" alt=\"스크린샷, 2020-08-04 10-19-08\"></p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">yum update <span class=\"token operator\">-</span>y\nyum install <span class=\"token operator\">-</span>y httpd\nsystemctl start httpd\nsystemctl enable httpd\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>http <span class=\"token operator\">--</span>permanent\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token operator\">/</span>tcp <span class=\"token operator\">--</span>pernmanent</code></pre></div>\n<br/>\n<hr>\n<h2 id=\"-db-구축\" style=\"position:relative;\"><a href=\"#-db-%EA%B5%AC%EC%B6%95\" aria-label=\" db 구축 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🙌 DB 구축</h2>\n<p>  [VM 인스턴스에 MariaDB를 설치합니다]</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># yum install mariadb mariadb-server</span></code></pre></div>\n<ul>\n<li>\n<p>API 설정</p>\n<p>[GCP의 SQL을 Web Server 인스턴스에 연동해 구성할 것입니다] 대쉬보드의 [API 및 서비스] - 라이브러리 탭에서<br>\n<code class=\"language-text\">CLOUD SQL ADMIN API</code>를 설치합니다.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89242651-03017e00-d63d-11ea-972b-52f85721a5c2.png\" alt=\"스크린샷, 2020-08-04 10-25-09\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>CLOUD SQL 생성  </p>\n<p>[MySQL, 리전을 인스턴스와 동일한 SQL 인스턴스를 생성]  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89243033-e580e400-d63d-11ea-8ec0-be652ec77ae5.png\" alt=\"스크린샷, 2020-08-04 10-33-03\"></p>\n<br/>\n<p>[VPC로 인스턴트에 DB를 직접 연결 할 것이라 IP를 추가해줍니다]  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89242922-a6529300-d63d-11ea-9b6d-8550cda05f52.png\" alt=\"스크린샷, 2020-08-04 10-31-18\"></p>\n<br/>\n<p>[인스턴트에서 연결 후 사용할 DB를 생성해줍니다.]  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89245204-49f27200-d643-11ea-96d2-9c3dd9a33b90.png\" alt=\"스크린샷, 2020-08-04 11-11-39\"></p>\n<ul>\n<li>\n<p>구성 정보</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span><span class=\"token class-name\">DB</span> Name <span class=\"token punctuation\">:</span> nasa1415<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token class-name\">DB</span> IP <span class=\"token punctuation\">:</span> <span class=\"token number\">34.64</span><span class=\"token number\">.187</span><span class=\"token number\">.52</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token class-name\">WEB</span> SERVER <span class=\"token punctuation\">:</span> <span class=\"token number\">35.216</span><span class=\"token number\">.67</span><span class=\"token number\">.219</span> <span class=\"token punctuation\">(</span>CENTOS <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>Region <span class=\"token punctuation\">:</span> seoul<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"php-설치\" style=\"position:relative;\"><a href=\"#php-%EC%84%A4%EC%B9%98\" aria-label=\"php 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PHP 설치</h3>\n<p>[다음 명령으로 PHP를 설치합니다]</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">yum install epel<span class=\"token operator\">-</span>release\nrpm <span class=\"token operator\">-</span><span class=\"token class-name\">Uvh</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>mirror<span class=\"token punctuation\">.</span>webtatic<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>yum<span class=\"token operator\">/</span>el7<span class=\"token operator\">/</span>webtatic<span class=\"token operator\">-</span>release<span class=\"token punctuation\">.</span>rpm\nyum install mod_php72w php72w<span class=\"token operator\">-</span>cli\nyum install php72w<span class=\"token operator\">-</span>bcmath php72w<span class=\"token operator\">-</span>gd php72w<span class=\"token operator\">-</span>mbstring php72w<span class=\"token operator\">-</span>mysqlnd php72w<span class=\"token operator\">-</span>pear php72w<span class=\"token operator\">-</span>xml php72w<span class=\"token operator\">-</span>xmlrpc php\nphp <span class=\"token operator\">-</span>v</code></pre></div>\n<br/>\n<p>[PHP가 7.2 버전으로 설치되었는지 확인합니다.]  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89245659-427f9880-d644-11ea-91ee-439eff531fd2.png\" alt=\"스크린샷, 2020-08-04 11-18-39\"></p>\n<hr>\n<h3 id=\"wordpress-설치\" style=\"position:relative;\"><a href=\"#wordpress-%EC%84%A4%EC%B9%98\" aria-label=\"wordpress 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wordpress 설치</h3>\n<p>[다음 명령으로 Wordpress를 설치합니다]  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89245906-e23d2680-d644-11ea-8509-173f27f49792.png\" alt=\"스크린샷, 2020-08-04 11-23-04\"></p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">yum install <span class=\"token operator\">-</span>y wget\nwget <span class=\"token string\">\"http://wordpress.org/latest.tar.gz\"</span>\ntar <span class=\"token operator\">-</span>xvzf latest<span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">.</span>gz <span class=\"token operator\">-</span>C <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>www<span class=\"token operator\">/</span>html\nchown <span class=\"token operator\">-</span><span class=\"token class-name\">R</span> apache<span class=\"token punctuation\">:</span> <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>www<span class=\"token operator\">/</span>html<span class=\"token operator\">/</span>wordpress</code></pre></div>\n<br/>\n<p>웹페이지 설정 - DB 연동  </p>\n<p>지정 DB NAME], [GCP SQL IP] 등을 입력 해 연동.</p>\n<p>  <img src=\"https://user-images.githubusercontent.com/64260883/89596888-73a1d800-d893-11ea-99c6-a3b914465be1.png\" alt=\"aaa\"></p>\n<br/>\n<p>[연동 위해 인스턴트의 SELINUX 설정이 필요합니다]<br>\n[본 포스트에서는 종료하고 진행하였음]  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89598140-055f1480-d897-11ea-9bef-0308dd5ef437.png\" alt=\"sel\"></p>\n<br/>\n<p>[웹 설정 완료 후 홈페이지가 정상 동작 확인]\n<img src=\"https://user-images.githubusercontent.com/64260883/89598279-61c23400-d897-11ea-839f-d184557dfec8.png\" alt=\"aaaaaa\"></p>\n<br/>\n<p>[홈페이지 동작 table이 생성, DB 정상 연동 확인]  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89598402-af3ea100-d897-11ea-9ffe-ca9986c66165.png\" alt=\"addddddddddddddddddd\"></p>\n<hr>\n<h2 id=\"-dns-구성\" style=\"position:relative;\"><a href=\"#-dns-%EA%B5%AC%EC%84%B1\" aria-label=\" dns 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>😃 DNS 구성</h2>\n<p>  실제 도메인을 구매하지 못해 내부 통신으로 DNS를 구축, 웹사이트에 매칭 시켜주도록 설정하였음.  </p>\n<ul>\n<li>\n<p>[인스턴스 만들기]를 클릭해서 인스턴스를 생성합니다.   </p>\n<p>WEBServer와 동일하게 구성하였음.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89745943-ca0c5200-daf1-11ea-8ac0-29a9f9fb7826.png\" alt=\"dbs\"></p>\n<br/>\n<p>GCP 기반의 서버이다 보니 <code class=\"language-text\">DNS 네트워크를 내부로 고정</code>  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89746273-cb3e7e80-daf3-11ea-8bc8-5c5d7fb80f46.png\" alt=\"ip\"></p>\n</li>\n</ul>\n<hr>\n<h3 id=\"dns-server-구축\" style=\"position:relative;\"><a href=\"#dns-server-%EA%B5%AC%EC%B6%95\" aria-label=\"dns server 구축 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DNS SERVER 구축</h3>\n<ul>\n<li>\n<p>기본적인 DNS 파일 설치 및 환경구성을 위한 명령.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">yum <span class=\"token operator\">-</span>y install bind\nsetenforce <span class=\"token number\">0</span>\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>dns  <span class=\"token operator\">--</span>permanent \nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token operator\">/</span>tcp <span class=\"token operator\">--</span>permanent \nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>reload </code></pre></div>\n</li>\n</ul>\n  <br/>\n<ul>\n<li>\n<p>네트워크 환경 변경</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">내부 IP로만 통신 할 예정이라 STATIC하게 설정 변경<span class=\"token punctuation\">.</span>\nnmcli connection modify eth0 ipv4<span class=\"token punctuation\">.</span>method manual \nnmcli connection modify eth0 ipv4<span class=\"token punctuation\">.</span>addresses <span class=\"token number\">10.178</span><span class=\"token number\">.0</span><span class=\"token number\">.16</span><span class=\"token operator\">/</span><span class=\"token number\">32</span>\nnmcli connection modify eth0 ipv4<span class=\"token punctuation\">.</span>gateway <span class=\"token number\">10.178</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>\nnmcli connection modify eth0 ipv4<span class=\"token punctuation\">.</span>method manual \nnmcli connection modify eth0 ipv4<span class=\"token punctuation\">.</span>dns <span class=\"token number\">10.178</span><span class=\"token number\">.0</span><span class=\"token number\">.16</span></code></pre></div>\n</li>\n<li>\n<p>ZONE 파일 내용 확인<br>\n[로드밸런서 아이피를 삽입]  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89758291-68b0a700-db22-11ea-99e6-6276c529d9c2.png\" alt=\"aaaaaaaaa\"></p>\n<br/>\n</li>\n<li>\n<p>정상적으로 내부 도메인 통신이 되는지 확인.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89758746-787cbb00-db23-11ea-964c-26cccecb2df4.png\" alt=\"ㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜㅜ\"></p>\n<br/>\n</li>\n<li>\n<p>GCP는 외부 연결이 가능하게 방화벽 설정.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89759290-cba33d80-db24-11ea-9a3f-0b07e3b11269.png\" alt=\"스크린샷, 2020-08-10 16-16-02\"></p>\n</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"🤞-오토스케일링-구축\" style=\"position:relative;\"><a href=\"#%F0%9F%A4%9E-%EC%98%A4%ED%86%A0%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81-%EA%B5%AC%EC%B6%95\" aria-label=\"🤞 오토스케일링 구축 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤞 오토스케일링 구축</h2>\n<ul>\n<li>\n<p>웹서버 종료 후 스냅샷 생성  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89753240-6f372280-db12-11ea-8d33-bf01ef7fe653.png\" alt=\"snap\"></p>\n<br/>\n</li>\n<li>\n<p>스냅샷으로 이미지 생성  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89753351-e8cf1080-db12-11ea-9706-dd36393456c9.png\" alt=\"ima\"></p>\n<br/>\n</li>\n<li>\n<p>이미지로 인스턴트 템플릿 생성<br>\n[인스턴트 생성과 같지만 생성한 이미지 선택.]  </p>\n<p>  <img src=\"https://user-images.githubusercontent.com/64260883/89753520-96422400-db13-11ea-82f4-f1f9eea4246e.png\" alt=\"aaaaaa\"></p>\n<br/>\n</li>\n<li>\n<p>인스턴트 템플릿으로 그룹 생성<br>\n[인스턴트 템플릿 선택 후 자동확장 모드 설정]<br>\n[자동 확장 모드 - 오토스케일링 기능]\n[측정 항목 - 오토스케일링 범위]  </p>\n<p>  <img src=\"https://user-images.githubusercontent.com/64260883/89754132-ac50e400-db15-11ea-9a0f-1009707f93aa.png\" alt=\"aqweqqweqweqw\">  </p>\n  <br/>\n<p>[대기 시간 등 세부 설정 또한 가능하다.]  </p>\n<p>  <img src=\"https://user-images.githubusercontent.com/64260883/89755145-5a11c200-db19-11ea-9794-22558669ce85.png\" alt=\"ㅁ123123123123\"></p>\n  <br/>\n<p>[추가적으로 자동복구 상태 확인을 생성한다.]  </p>\n<p>  <img src=\"https://user-images.githubusercontent.com/64260883/89755224-9fce8a80-db19-11ea-8a99-062438ea049d.png\" alt=\"1111111111111111\"></p>\n  <br/>\n<p>[정상적으로 그룹이 생성되었다면 아래와 같이 그룹 별 인스턴트가 생성]  </p>\n<p>  <img src=\"https://user-images.githubusercontent.com/64260883/89755723-5da64880-db1b-11ea-87a6-38d3cf9afde4.png\" alt=\"44444444444\"></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"-로드밸런서-구축\" style=\"position:relative;\"><a href=\"#-%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%84%9C-%EA%B5%AC%EC%B6%95\" aria-label=\" 로드밸런서 구축 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👌 로드밸런서 구축</h2>\n<ul>\n<li>\n<p>로드밸런서 생성<br>\n<code class=\"language-text\">[네트워크 서비스 - 부하분산 - 만들기]</code><br>\n<code class=\"language-text\">[웹서버의 트래픽을 부하분산을 위해 http 선택]</code>  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89755826-b544b400-db1b-11ea-9643-1e5a4a37df9a.png\" alt=\"5555555555555\">  </p>\n<br/>\n</li>\n<li>\n<p>백앤드 서비스 생성  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89755992-356b1980-db1c-11ea-8cf4-ba58d148c84a.png\" alt=\"bbab\"></p>\n<br/>\n<p>[추가적을 상태확인에서 아까 만든 상태확인을 사용한다]  </p>\n<p>  <img src=\"https://user-images.githubusercontent.com/64260883/89756099-7bc07880-db1c-11ea-9c87-a7df902e6fee.png\" alt=\"xxxxxxxxxxxx\"></p>\n<br/>\n</li>\n<li>\n<p>프론트앤드 서비스 생성  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89756153-af030780-db1c-11ea-99b6-f86d61bccb06.png\" alt=\"vvvvvvvvvvvvv\"></p>\n<br/>\n</li>\n<li>\n<p>오토 스케일링 정상 동작 확인<br>\n<code class=\"language-text\">[스트레스 스크립트로 CPU과부화를 주었을 경우 동작 확인]</code>  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89756237-de197900-db1c-11ea-8a9c-fa6189cbead7.png\" alt=\"999999999999\"></p>\n<br/>\n</li>\n<li>\n<p>생성된 로드밸런서를 설정 및 IP를 확인한다<br>\n<code class=\"language-text\">[로드밸러서 IP를 사용해 DNS 부하분산을 위한.]</code>  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89756384-48321e00-db1d-11ea-98b2-80e0d496bc5f.png\" alt=\"ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ\"></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"서비스-동작-확인\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%8F%99%EC%9E%91-%ED%99%95%EC%9D%B8\" aria-label=\"서비스 동작 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>😉서비스 동작 확인</h2>\n<ul>\n<li>\n<p>웹사이트 정상 동작 확인<br>\n[임의로 워드프레스 기반으로 만든 웹페이지가 정상 동작]<br>\n[DNS의 경우 내부로 통신을 했기에 <code class=\"language-text\">DNS 공인IP를 외부서버에 추가</code>해줘야함]  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89759020-343dea80-db24-11ea-8a5e-63d4719a11af.png\" alt=\"스크린샷, 2020-08-10 16-11-44\"></p>\n<br/>\n</li>\n<li>\n<p>웹사이트 정상 동작 확인  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89759139-7404d200-db24-11ea-8bbf-1723e70f4521.png\" alt=\"스크린샷, 2020-08-10 16-13-33\"></p>\n<br/>\n</li>\n<li>\n<p>VPN 설정 후 정상 동작 확인  </p>\n<p><img src=\"https://user-images.githubusercontent.com/64260883/89759221-a44c7080-db24-11ea-90f6-812e3ec63ec7.png\" alt=\"스크린샷, 2020-08-10 16-14-51\"></p>\n</li>\n<li>\n<p>로드밸런싱 동작 확인  </p>\n<p>[로드밸런싱 설정 전 트래픽]  </p>\n<p>  <img src=\"https://user-images.githubusercontent.com/64260883/89761607-b846a100-db29-11ea-9a06-c104b4efccc4.png\" alt=\"스크린샷, 2020-08-10 16-51-16\"></p>\n<p>[로드밸런싱 설정 후 트래픽]  </p>\n<p>  <img src=\"https://user-images.githubusercontent.com/64260883/89761632-c72d5380-db29-11ea-9a5c-409d182ac80b.png\" alt=\"스크린샷, 2020-08-10 16-51-42\">  </p>\n</li>\n</ul>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-gcp%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%9B%B9-%EC%82%AC%EC%9D%B4%ED%8A%B8-%EA%B5%AC%EC%B6%95-%ED%86%A0%EC%9D%B4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\">✔ GCP를 사용한 웹 사이트 구축 토이 프로젝트</a></p>\n<ul>\n<li><a href=\"#%EA%B0%9C%EC%9A%94\">개요</a></li>\n<li><a href=\"#architecture\">Architecture</a></li>\n</ul>\n</li>\n<li><a href=\"#-%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95-%EC%88%9C%EC%84%9C\">✌ 서버 구축 순서</a></li>\n<li>\n<p><a href=\"#-%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95\">👏 서버 구축</a></p>\n<ul>\n<li><a href=\"#apache-%EC%84%A4%EC%B9%98\">Apache 설치</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-db-%EA%B5%AC%EC%B6%95\">🙌 DB 구축</a></p>\n<ul>\n<li><a href=\"#php-%EC%84%A4%EC%B9%98\">PHP 설치</a></li>\n<li><a href=\"#wordpress-%EC%84%A4%EC%B9%98\">Wordpress 설치</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-dns-%EA%B5%AC%EC%84%B1\">😃 DNS 구성</a></p>\n<ul>\n<li><a href=\"#dns-server-%EA%B5%AC%EC%B6%95\">DNS SERVER 구축</a></li>\n</ul>\n</li>\n<li><a href=\"#%F0%9F%A4%9E-%EC%98%A4%ED%86%A0%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81-%EA%B5%AC%EC%B6%95\">🤞 오토스케일링 구축</a></li>\n<li><a href=\"#-%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%84%9C-%EA%B5%AC%EC%B6%95\">👌 로드밸런서 구축</a></li>\n<li><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%8F%99%EC%9E%91-%ED%99%95%EC%9D%B8\">😉서비스 동작 확인</a></li>\n</ul>\n</div>","frontmatter":{"date":"June 25, 2021","title":"[GCP] - wordpress 생성해보기","categories":"GCP","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/gcp-semi/"}},"prev":{"id":"86ebeb5f-f270-5f35-ac2b-da9d5887dfe4","html":"<p>머리말  </p>\n<p> 데브옵스나, 인프라엔지니어들에겐 필수적으로 익혀야 하는 기술이지만 나는 이제야 처음 접하기 시작해서 남들보다 쪼금 늦은 것 같다.<br>\n약간의 실습만 해봤는데도 이렇게 편하게 할 수 있는 작업들을 나는 그동안 make &#x26;&#x26; install 명령어를 낭비했던 것 같다.<br>\n이번 포스트에서는 도커란 무엇인지에 대해 설명한다.  </p>\n<h2 id=\"-도커란-무엇인가\" style=\"position:relative;\"><a href=\"#-%EB%8F%84%EC%BB%A4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\" 도커란 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ 도커란 무엇인가?</h2>\n<p><img src=\"https://t1.daumcdn.net/cfile/tistory/9975EB375B055B7519\"></p>\n<p>도커는 <code class=\"language-text\">컨테이너 기반</code>의 (오픈소스) 가상화 플랫폼입니다.</p>\n<p><code class=\"language-text\">컨테이너</code>라 하면 배에 실는 네모난 화물 수송용 박스를 생각할 수 있는데 각각의 컨테이너 안에는 옷, 신발, 전자제품, 술, 과일등<br>\n다양한 화물을 넣을 수 있고 규격화되어 컨테이너선이나 트레일러등 다양한 운송수단으로 쉽게 옮길 수 있습니다.</p>\n<p>서버에서 이야기하는 컨테이너도 이와 비슷한데 다양한 프로그램, 실행환경을 컨테이너로 추상화하고 동일한 인터페이스를 제공하여<br>\n프로그램의 배포 및 관리를 단순하게 해줍니다. <code class=\"language-text\">백엔드 프로그램</code>, <code class=\"language-text\">데이터베이스 서버</code>, <code class=\"language-text\">메시지 큐</code>등 어떤 프로그램도 컨테이너로 추상화할 수 있고 조립PC, AWS, Azure, Google cloud등 어디에서든 실행할 수 있습니다.</p>\n<hr>\n<h2 id=\"-컨테이너container\" style=\"position:relative;\"><a href=\"#-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88container\" aria-label=\" 컨테이너container permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✌ 컨테이너(Container)</h2>\n<p><img src=\"https://t1.daumcdn.net/cfile/tistory/99DEAB4D5B652E051B\">  </p>\n<p><code class=\"language-text\">컨테이너</code>는 간단하게 말해 그림과 같이 모든 프로세스가 분리하여 동작하는 것입니다.</p>\n<p>가상화 기술의 하나지만 <code class=\"language-text\">기존방식과는 차이</code>가 있습니다. 기존의 가상화 방식은 주로 OS를 가상화하였습니다.<br>\n익숙한 <code class=\"language-text\">VMware</code>나 <code class=\"language-text\">VirtualBox</code>같은 가상머신은 호스트 OS 위에 게스트 OS 전체를 가상화하여 사용하는 방식입니다.<br>\n이 방식은 여러가지 OS를 가상화(리눅스에서 윈도우를 돌린다던가) 할 수 있고 비교적 사용법이 간단하지만 무겁고 느려서 운영환경에선 사용할 수 없었습니다.</p>\n<p>이러한 상황을 개선하기 위해 <code class=\"language-text\">CPU의 가상화 기술(HVM)</code>을 이용한  <code class=\"language-text\">KVMKernel-based Virtual Machine</code>과 <code class=\"language-text\">반가상화 Paravirtualization</code>방식의 <code class=\"language-text\">Xen</code>이 등장합니다.  </p>\n<p>이러한 방식은 게스트 OS가 필요하긴 하지만 전체 OS를 가상화하는 방식이 아니였기 때문에<br>\n호스트형 가상화 방식에 비해 성능이 향상되었습니다.<br>\n이러한 기술들은 <code class=\"language-text\">OpenStack</code>이나 <code class=\"language-text\">AWS, Rackspace</code>같은 클라우드 서비스에서 가상 컴퓨팅 기술의 기반이 되었습니다.</p>\n<hr>\n<h2 id=\"-도커의-이미지\" style=\"position:relative;\"><a href=\"#-%EB%8F%84%EC%BB%A4%EC%9D%98-%EC%9D%B4%EB%AF%B8%EC%A7%80\" aria-label=\" 도커의 이미지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👌 도커의 이미지</h2>\n<p><img src=\"https://subicura.com/assets/article_images/2017-01-19-docker-guide-for-beginners-1/docker-image.png\">  </p>\n<p>도커에서 가장 중요한 개념은 컨테이너와 함께 <code class=\"language-text\">이미지</code>라는 개념입니다.</p>\n<p>이미지는 컨테이너 실행에 필요한 파일과 설정값등을 포함하고 있는 것으로 상태값을 가지지 않고 변하지 않습니다<code class=\"language-text\">(Immutable)</code>.<br>\n컨테이너는 <code class=\"language-text\">이미지를 실행</code>한 상태라고 볼 수 있고 추가되거나 변하는 값은 컨테이너에 저장됩니다.<br>\n같은 이미지에서 여러개의 컨테이너를 생성할 수 있고 컨테이너의 상태가 바뀌거나<br>\n컨테이너가 삭제되더라도 이미지는 변하지 않고 그대로 남아있습니다.</p>\n<p>ubuntu이미지는 ubuntu를 실행하기 위한 모든 파일을 가지고 있고<br>\nMySQL이미지는 debian을 기반으로 MySQL을 실행하는데 필요한 파일과 실행 명령어, 포트 정보등을 가지고 있습니다.  </p>\n<p>말그대로 이미지는 컨테이너를 실행하기 위한 <code class=\"language-text\">모든 정보</code>를 가지고 있기 때문에 더 이상 의존성 파일을 컴파일하고 이것저것 설치할 필요가 없습니다.<br>\n이제 새로운 서버가 추가되면 미리 만들어 놓은 이미지를 다운받고 컨테이너를 생성만 하면 됩니다.<br>\n한 서버에 여러개의 컨테이너를 실행할 수 있고, 수십, 수백, 수천대의 서버도 문제없습니다.</p>\n<p>도커 이미지는 <code class=\"language-text\">Docker hub</code>에 등록하거나 <code class=\"language-text\">Docker Registry</code> 저장소를 직접 만들어 관리할 수 있습니다.<br>\n누구나 쉽게 이미지를 만들고 배포할 수 있습니다.\n<img src=\"https://subicura.com/assets/article_images/2017-01-19-docker-guide-for-beginners-1/docker-store.png\"></p>\n<hr>\n<h2 id=\"-도커와-vm의-차이\" style=\"position:relative;\"><a href=\"#-%EB%8F%84%EC%BB%A4%EC%99%80-vm%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\" 도커와 vm의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎶 도커와 VM의 차이</h2>\n<p>컨테이너위 여러 OS에 APP이 올린 도커의 모습을 보고 자연스럽게 VM과의 비교를 하게 됩니다.<br>\n그럼 기존의 VM과는 어떤 부분의 차이가 있을까요?</p>\n<p><img src=\"https://t1.daumcdn.net/cfile/tistory/9907324D5B652E040D\"></p>\n<p>위 그림을 보면 명확하게 알 수 있습니다. </p>\n<p><code class=\"language-text\">VM(virtual machine)</code>의 경우 Hypervisor을 통해 가상화, 각 <code class=\"language-text\">독립 된 커널 공간</code>을 가진 OS를 생성하는 식의 환경 구성을 해주고.</p>\n<p><code class=\"language-text\">containers</code>의 경우 <code class=\"language-text\">커널 공간을 공유</code>하며 같은 가상화 기능을 제공해줍니다.<br>\n즉 같은 커널공간을 공유하기 때문에 virtual machines보다 좀 더 <code class=\"language-text\">가볍다</code>. </p>\n<br/>\n<h3 id=\"이런-기술이-가능-한-이유\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%9F%B0-%EA%B8%B0%EC%88%A0%EC%9D%B4-%EA%B0%80%EB%8A%A5-%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"이런 기술이 가능 한 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이런 기술이 가능 한 이유</h3>\n<p>우선 namespaces 와 cgroup에 대해서 알아야 한다. </p>\n<ul>\n<li>\n<p><code class=\"language-text\">namespace</code>\n먼저 리눅스 커널의 주요 이름 공간에 대해서 알아보자.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/90347852-bde24080-e06d-11ea-92c0-1a1bddf0572b.png\" alt=\"스크린샷, 2020-08-17 09-40-28\">\n<code class=\"language-text\">이름 공간</code>은 모두 리눅스 상에서 동작하는 프로세스에 할당하는 자원을 분리하는 기능을 한다</p>\n</li>\n<li>\n<p>cgroups (Control Groups)<br>\ncgroups(Control Groups)는 자원(resources)에 대한 제어를 가능하게 해주는 리눅스 커널의 기능입니다.</p>\n<p><code class=\"language-text\">cgroups</code>는 다음 자원을 제어할 수 있다.</p>\n<ul>\n<li>메모리, CPU, I/O, 네트워크, device노드</li>\n</ul>\n</li>\n</ul>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-%EB%8F%84%EC%BB%A4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\">✔ 도커란 무엇인가?</a></li>\n<li><a href=\"#-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88container\">✌ 컨테이너(Container)</a></li>\n<li><a href=\"#-%EB%8F%84%EC%BB%A4%EC%9D%98-%EC%9D%B4%EB%AF%B8%EC%A7%80\">👌 도커의 이미지</a></li>\n<li>\n<p><a href=\"#-%EB%8F%84%EC%BB%A4%EC%99%80-vm%EC%9D%98-%EC%B0%A8%EC%9D%B4\">🎶 도커와 VM의 차이</a></p>\n<ul>\n<li><a href=\"#%EC%9D%B4%EB%9F%B0-%EA%B8%B0%EC%88%A0%EC%9D%B4-%EA%B0%80%EB%8A%A5-%ED%95%9C-%EC%9D%B4%EC%9C%A0\">이런 기술이 가능 한 이유</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 26, 2021","title":"[DOCKER] - DOCKER란?","categories":"DOCKER","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/docker/"}},"site":{"siteMetadata":{"siteUrl":"https://nasa1515.com","comments":{"utterances":{"repo":"nasa1515/nasablog"}}}}},"pageContext":{"slug":"/docker-install/","nextSlug":"/gcp-semi/","prevSlug":"/docker/"}},"staticQueryHashes":["1073350324","2938748437"]}