{"componentChunkName":"component---src-templates-blog-template-js","path":"/kubernetes-service/","result":{"data":{"cur":{"id":"6c1b0b6c-a003-5855-a2b1-30c61c4e5df0","html":"<p>머리말  </p>\n<p>이번 포스트에서는 쿠버네티스의 네트워크 및 내부 서비스들에 대해서 알아보겠습니다.</p>\n<hr>\n<h2 id=\"-service\" style=\"position:relative;\"><a href=\"#-service\" aria-label=\" service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ Service</h2>\n<p>이전 포스트들에서 쿠버네티스 클러스터안에 컨트롤러들을 이용해서 POD를 정의했습니다.     </p>\n<ul>\n<li>POD 특성상 생성 및 정의 될때 지정되는 IP가 랜덤하고 </li>\n<li>또한 리스타트 때마다 IP가 변동됩니다.  </li>\n</ul>\n<p>위 두개의 이유로 POD는 <code class=\"language-text\">고정된 엔드포인트</code>로 호출이 어렵습니다. 또한 여러 POD에 같은 애플리케이션을 운용할 경우<br>\n이 POD 간의 로드밸런싱을 지원해줘야 하는데 이러한 기능들을 수행하는게 <code class=\"language-text\">Service(서비스)</code> 입니다.  </p>\n<p>간략한 서비스들의 기능을 요약해보면 아래 4가지 정도입니다.</p>\n<ul>\n<li>서비스를 사용하게 되면 고정된 주소를 이용해서 접근이 가능해 집니다.  </li>\n<li>서비스를 통해 클러스터 외부에서 POD에 접근하는것도 가능합니다.  </li>\n<li>여러 POD를 묶어 로드 밸런싱이 가능합니다.</li>\n<li>고유한 DNS 이름을 가질 수 있습니다.</li>\n</ul>\n<br/>\n<br/>\n<p>서비스는 <code class=\"language-text\">get service</code> 명령을 통해 목록을 받아 올 수 있습니다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> service\nNAME         TYPE        CLUSTER<span class=\"token operator\">-</span>IP   EXTERNAL<span class=\"token operator\">-</span><span class=\"token return-type class-name\">IP</span>   <span class=\"token function\">PORT</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span>   AGE\nkubernetes   ClusterIP   <span class=\"token number\">10.96</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>        <span class=\"token number\">443</span><span class=\"token operator\">/</span>TCP   <span class=\"token number\">24d</span></code></pre></div>\n<p>명령을 입력하면 default 네임스페이스에 항상 존재하는 서비스가 보이네요<br>\n이전 아키텍쳐 포스트에서도 설명했지만 Master Node의 API로 접근하기 위한 서비스입니다!!</p>\n<br/>\n<br/>\n<h3 id=\"서비스-템플릿\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%85%9C%ED%94%8C%EB%A6%BF\" aria-label=\"서비스 템플릿 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서비스 템플릿</h3>\n<p>서비스는 다음과 같이 구성이 가능하며, 라벨 셀렉터 (label selector)를 이용하여 관리하고자 하는 Pod 들을 정의할 수 있습니다.</p>\n<p>서비스 템플릿 기본 구조는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">apiVersion<span class=\"token punctuation\">:</span> <span class=\"token class-name\">v1</span>\nkind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Service</span>\nmetadata<span class=\"token punctuation\">:</span>\n  name<span class=\"token punctuation\">:</span> hello<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span><span class=\"token class-name\">svc</span>\nspec<span class=\"token punctuation\">:</span>\n  type<span class=\"token punctuation\">:</span> ClusterIP <span class=\"token punctuation\">(</span>LoadBalancer<span class=\"token punctuation\">)</span>\n  clusterIP<span class=\"token punctuation\">:</span> <span class=\"token number\">10.0</span><span class=\"token number\">.10</span><span class=\"token number\">.10</span>\n  selector<span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">:</span> hello<span class=\"token operator\">-</span><span class=\"token class-name\">nasa</span>\n  ports<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span> port<span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    protocol<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TCP</span>\n    targetPort<span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span></code></pre></div>\n<p>다른 부분은 일반적인 형태입니다  </p>\n<ul>\n<li><code class=\"language-text\">spec.type</code> : 서비스 타입을 지정할수 있습니다. spec.type을 지정하지 않으면 기본 타입은 ClusterIP입니다.  </li>\n<li><code class=\"language-text\">spec.clusterIP</code> : 사용하려는 클러스터IP를 직접 지정하는것도 가능합니다.  </li>\n<li><code class=\"language-text\">spec.selector</code> : 서비스와 연결할 POD에 지정된 라벨을 지정합니다.   </li>\n<li><code class=\"language-text\">spec.ports</code> :  배열 형태의 값입니다.<br>\n서비스가 포트를 외부에 제공할때 하나가 아니라 여러개를 한꺼번에 제공가능한데 spec.ports 하위에 값을 넣어주면 됩니다.</li>\n</ul>\n<br/>\n<br/>\n<p>이런 형태의 멀티 포트 서비스가 가능합니다  </p>\n<p>예를 들어 웹서버의 HTTP와 HTTPS 포트가 대표적인 예인데<br>\n아래와 같이 ports 부분에 두개의 포트 정보를 정의해주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">apiVersion<span class=\"token punctuation\">:</span> <span class=\"token class-name\">v1</span>\nkind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Service</span>\nmetadata<span class=\"token punctuation\">:</span>\n  name<span class=\"token punctuation\">:</span> nasa<span class=\"token operator\">-</span>node<span class=\"token operator\">-</span><span class=\"token class-name\">svc</span>\nspec<span class=\"token punctuation\">:</span>\n  selector<span class=\"token punctuation\">:</span>\n     app<span class=\"token punctuation\">:</span> nasa<span class=\"token operator\">-</span><span class=\"token class-name\">node</span>\n  ports<span class=\"token punctuation\">:</span>\n     <span class=\"token operator\">-</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">http</span>\n     port<span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n     protocol<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TCP</span>\n     targetPort<span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n     <span class=\"token operator\">-</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">https</span>\n     port<span class=\"token punctuation\">:</span> <span class=\"token number\">443</span>\n     protocol<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TCP</span>\n     targetPort<span class=\"token punctuation\">:</span> <span class=\"token number\">8082</span></code></pre></div>\n<br/>\n<br/>\n<p>위의 템플릿으로 생성을 해보면 아래와 같이 멀티 포트로 생성이 됩니다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl apply <span class=\"token operator\">-</span>f nasa<span class=\"token operator\">-</span>svcm<span class=\"token punctuation\">.</span>yml \nservice<span class=\"token operator\">/</span>nasa<span class=\"token operator\">-</span>node<span class=\"token operator\">-</span>svc created\n<span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># \n<span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> svc\nNAME            TYPE        CLUSTER<span class=\"token operator\">-</span>IP      EXTERNAL<span class=\"token operator\">-</span><span class=\"token return-type class-name\">IP</span>   <span class=\"token function\">PORT</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span>          AGE\nkubernetes      ClusterIP   <span class=\"token number\">10.96</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>       <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>        <span class=\"token number\">443</span><span class=\"token operator\">/</span>TCP          <span class=\"token number\">24d</span>\nnasa<span class=\"token operator\">-</span>node<span class=\"token operator\">-</span>svc   ClusterIP   <span class=\"token number\">10.96</span><span class=\"token number\">.147</span><span class=\"token number\">.197</span>   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>        <span class=\"token number\">80</span><span class=\"token operator\">/</span>TCP<span class=\"token punctuation\">,</span><span class=\"token number\">443</span><span class=\"token operator\">/</span>TCP   8s</code></pre></div>\n<br/>\n<br/>\n<h3 id=\"엔드포인트\" style=\"position:relative;\"><a href=\"#%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8\" aria-label=\"엔드포인트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>엔드포인트</h3>\n<p>엔트포인트란 서비스의 <code class=\"language-text\">레이블 셀렉터</code>에 의해 연결된 POD의 IP 목록입니다. <code class=\"language-text\">kube get endpoints</code> 명령어로 확인 할 수 있습니다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> endpoints\nNAME            ENDPOINTS         AGE\nkubernetes      <span class=\"token number\">10.146</span><span class=\"token number\">.0</span><span class=\"token number\">.6</span><span class=\"token punctuation\">:</span><span class=\"token number\">6443</span>   <span class=\"token number\">24d</span>\nnasa<span class=\"token operator\">-</span>node<span class=\"token operator\">-</span>svc   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>            7m30s</code></pre></div>\n<p>방금 만든 서비스의 경우 연결되어있는 POD가 없기에 <code class=\"language-text\">none</code>으로 정의 되어있다</p>\n<br/>\n<br/>\n<p><code class=\"language-text\">label</code>을 맞춰준 POD를 하나 생성해봅시다!</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">apiVersion<span class=\"token punctuation\">:</span> <span class=\"token class-name\">v1</span>\nkind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Pod</span>\nmetadata<span class=\"token punctuation\">:</span>\nname<span class=\"token punctuation\">:</span> <span class=\"token class-name\">nasa</span>\nlabels<span class=\"token punctuation\">:</span> \n    app<span class=\"token punctuation\">:</span> nasa<span class=\"token operator\">-</span><span class=\"token class-name\">node</span>\nspec<span class=\"token punctuation\">:</span>\ncontainers<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">nasa</span>\n    image<span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span><span class=\"token class-name\">latest</span>\n    ports<span class=\"token punctuation\">:</span>\n        <span class=\"token operator\">-</span> containerPort<span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n        protocol<span class=\"token punctuation\">:</span> TCP</code></pre></div>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl apply <span class=\"token operator\">-</span>f nasa<span class=\"token punctuation\">.</span>pod<span class=\"token operator\">-</span>s<span class=\"token punctuation\">.</span>yml \npod<span class=\"token operator\">/</span>nasa created\n<span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> po <span class=\"token operator\">-</span>o wide\nNAME   READY   STATUS    RESTARTS   AGE   IP          NODE         NOMINATED NODE   READINESS G\nATES\nnasa   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          97s   <span class=\"token number\">10.32</span><span class=\"token number\">.0</span><span class=\"token number\">.2</span>   nasa<span class=\"token operator\">-</span>node3   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span></code></pre></div>\n<br/>\n<br/>\n<p>이렇게 <code class=\"language-text\">label</code>을 연결해준 POD가 생성되면 <code class=\"language-text\">ENDPOINT</code>가 생성된다!</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> endpoints\nNAME            ENDPOINTS                       AGE\nkubernetes      <span class=\"token number\">10.146</span><span class=\"token number\">.0</span><span class=\"token number\">.6</span><span class=\"token punctuation\">:</span><span class=\"token number\">6443</span>                 <span class=\"token number\">24d</span>\nnasa<span class=\"token operator\">-</span>node<span class=\"token operator\">-</span>svc   <span class=\"token number\">10.32</span><span class=\"token number\">.0</span><span class=\"token number\">.2</span><span class=\"token punctuation\">:</span><span class=\"token number\">8082</span><span class=\"token punctuation\">,</span><span class=\"token number\">10.32</span><span class=\"token number\">.0</span><span class=\"token number\">.2</span><span class=\"token punctuation\">:</span><span class=\"token number\">8080</span>   <span class=\"token number\">17m</span></code></pre></div>\n<br/>\n<br/>\n<p>테스트 POD를 하나 돌려서 클러스터끼리의 통신을 확인해봅시다!</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl run nasatest <span class=\"token operator\">-</span>it <span class=\"token operator\">--</span>image<span class=\"token operator\">=</span>c1t1d0s7<span class=\"token operator\">/</span>network<span class=\"token operator\">-</span>multitool <span class=\"token operator\">--</span>generator<span class=\"token operator\">=</span>run<span class=\"token operator\">-</span>pod<span class=\"token operator\">/</span>v1 <span class=\"token operator\">--</span>rm<span class=\"token operator\">=</span><span class=\"token boolean\">true</span> bash\nIf you don't see a <span class=\"token class-name\">command</span> prompt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">try</span> pressing enter<span class=\"token punctuation\">.</span>\nbash<span class=\"token operator\">-</span><span class=\"token number\">5.0</span># \nbash<span class=\"token operator\">-</span><span class=\"token number\">5.0</span># <span class=\"token class-name\">curl</span> http<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">10.32</span><span class=\"token number\">.0</span><span class=\"token number\">.2</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>DOCTYPE html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Welcome to nginx<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>style<span class=\"token operator\">></span>\n    body <span class=\"token punctuation\">{</span>\n        width<span class=\"token punctuation\">:</span> 35em<span class=\"token punctuation\">;</span>\n        margin<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> auto<span class=\"token punctuation\">;</span>\n        font<span class=\"token operator\">-</span>family<span class=\"token punctuation\">:</span> Tahoma<span class=\"token punctuation\">,</span> Verdana<span class=\"token punctuation\">,</span> Arial<span class=\"token punctuation\">,</span> sans<span class=\"token operator\">-</span>serif<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Welcome to nginx<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>If you see <span class=\"token keyword\">this</span> page<span class=\"token punctuation\">,</span> the nginx web server <span class=\"token keyword\">is</span> <span class=\"token class-name\">successfully</span> installed <span class=\"token keyword\">and</span>\nworking<span class=\"token punctuation\">.</span> Further configuration <span class=\"token keyword\">is</span> <span class=\"token class-name\">required</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>For online documentation <span class=\"token keyword\">and</span> support please refer to\n<span class=\"token operator\">&lt;</span><span class=\"token class-name\">a</span> href<span class=\"token operator\">=</span><span class=\"token string\">\"http://nginx.org/\"</span><span class=\"token operator\">></span>nginx<span class=\"token punctuation\">.</span>org<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">/</span><span class=\"token operator\">></span>\nCommercial support <span class=\"token keyword\">is</span> <span class=\"token class-name\">available</span> at\n<span class=\"token operator\">&lt;</span><span class=\"token class-name\">a</span> href<span class=\"token operator\">=</span><span class=\"token string\">\"http://nginx.com/\"</span><span class=\"token operator\">></span>nginx<span class=\"token punctuation\">.</span>com<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>em<span class=\"token operator\">></span>Thank you <span class=\"token keyword\">for</span> <span class=\"token keyword\">using</span> nginx<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>em<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></code></pre></div>\n<p>통신이 너무 잘 댑니다!</p>\n<br/>\n<hr>\n<h2 id=\"-서비스-세션-어피니티\" style=\"position:relative;\"><a href=\"#-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%84%B8%EC%85%98-%EC%96%B4%ED%94%BC%EB%8B%88%ED%8B%B0\" aria-label=\" 서비스 세션 어피니티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍 서비스 세션 어피니티?</h2>\n<p>세션 어피니티란????  </p>\n<p>위의 테스트처럼 1개의 POD가 아닌 RS,RC,DS 처럼 여러개의 POD가 생성되면<br>\n당연히 LB로 POD를 묶어 여러개의 ENDPOINT를 가지고 있게 될 것이다<br>\n그런 경우 클라이언트에서 요청을 보내면 로드밸런싱되어 매번 다른 파드로 연결된다.<br>\n그러나 만약 특정 클라이언트에서 요청이 들어오면 매번 특정 파드로 연결하고 싶은 경우 사용하는 것이 세션 어피니티입니다  </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">apiVersion<span class=\"token punctuation\">:</span> <span class=\"token class-name\">v1</span>\nkind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Service</span>\nmetadata<span class=\"token punctuation\">:</span>\nname<span class=\"token punctuation\">:</span> mynapp<span class=\"token operator\">-</span>svc<span class=\"token operator\">-</span>ses<span class=\"token operator\">-</span><span class=\"token class-name\">aff</span>\nspec<span class=\"token punctuation\">:</span>\nsessionAffinity<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ClientIP</span>\nports<span class=\"token punctuation\">:</span>\n<span class=\"token operator\">-</span> port<span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    targetPort<span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\nselector<span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">:</span> mynapp<span class=\"token operator\">-</span>rs</code></pre></div>\n<p>세션 어피니티 구성은 None과 ClientIP가 있으며 디폴트는 None이다.<br>\nClientIP를 설정하면 쿠버네티스 클러스터의 프록시(kube-proxy)는 클라이언트의 IP를 보고 매번 같은 파드로 연결해줍니다</p>\n<p><code class=\"language-text\">sessionAffinity</code> 로 정의 할 수 있다</p>\n<ul>\n<li>none : (기본) 세션 어피니티 없음</li>\n<li>ClientIP : 클라이언트의 IP를 확인해 같은 파드로 연결됨 </li>\n</ul>\n<br/>\n<br/>\n<h2 id=\"-service-type\" style=\"position:relative;\"><a href=\"#-service-type\" aria-label=\" service type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐱‍🏍 Service Type</h2>\n<p>서비스는 IP 주소 할당 방식과 연동 서비스등에 따라 크게 4가지로 구별할 수 있다.</p>\n<ul>\n<li><code class=\"language-text\">Cluster IP</code><br>\n디폴트 설정으로, 서비스에 클러스터 IP (내부 IP)를 할당한다. 쿠버네티스 클러스터 내에서는 이 서비스에 접근이 가능하지만<br>\n클러스터 외부에서는 외부 IP 를 할당 받지 못했기 때문에, 접근이 불가능하다.</li>\n</ul>\n<br/>\n<ul>\n<li><code class=\"language-text\">Load Balancer</code><br>\n보통 클라우드 벤더에서 제공하는 설정 방식으로 외부 IP 를 가지고 있는 로드밸런서를 할당한다<br>\n외부 IP를 가지고 있기  때문에, 클러스터 외부에서 접근이 가능하다.</li>\n</ul>\n<br/>\n<ul>\n<li><code class=\"language-text\">Node IP</code><br>\n클러스터 IP로만 접근이 가능한것이 아니라 모든 노드의 IP와 포트를 통해서도 접근이 가능하게 된다.<br>\n예를 들어 아래와 같이 <code class=\"language-text\">hello-node-svc</code> 라는 서비스를 NodePort 타입으로 선언을 하고<br>\nnodePort를 30036으로 설정하면 아래 설정에 따라 클러스터 IP의 80포트로도 접근이 가능하지만<br>\n모든 노드의 30036 포트로도 서비스를 접근할 수 있다. </li>\n</ul>\n<br/>\n<br/>\n<p>hello-node-svc-nodeport.yaml</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">apiVersion<span class=\"token punctuation\">:</span> <span class=\"token class-name\">v1</span>\nkind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Service</span>\nmetadata<span class=\"token punctuation\">:</span>\nname<span class=\"token punctuation\">:</span> hello<span class=\"token operator\">-</span>node<span class=\"token operator\">-</span><span class=\"token class-name\">svc</span>\nspec<span class=\"token punctuation\">:</span>\nselector<span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">:</span> hello<span class=\"token operator\">-</span><span class=\"token class-name\">node</span>\ntype<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NodePort</span>\nports<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">http</span>\n    port<span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    protocol<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TCP</span>\n    targetPort<span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n    nodePort<span class=\"token punctuation\">:</span> <span class=\"token number\">30036</span></code></pre></div>\n<p>그림의 로직을 보면 이해가 쉬울 것이다.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/93557027-fbabef00-f9b4-11ea-80b6-c03f9a26892f.png\" alt=\"스크린샷, 2020-09-18 13-43-43\"></p>\n<br/>\n<br/>\n<h3 id=\"external-name\" style=\"position:relative;\"><a href=\"#external-name\" aria-label=\"external name permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>External name</h3>\n<p>ExternalName은 외부 서비스를 쿠버네티스 내부에서 호출하고자할때 사용할 수 있다.<br>\n클러스터내의 Pod들은 클러스터 IP를 가지고 있기 때문에 IP 대역 밖의 서비스를 호출하려면 NAT 설정등 복잡한 설정이 필요하다.<br>\n특히 클라우드 환경을 사용할 경우 데이타 베이스 또는 클라우드에서 제공되는 매지니드 서비스 (RDS, CloudSQL)등을 사용 할 경우<br>\n쿠버네티스 클러스터 밖이기 때문에, 호출이 어려운 경우가 있는데 이를 쉽게 해결할 수 있는 방법이 <code class=\"language-text\">ExternalName</code> 타입이다.</p>\n<p>아래와 같이 서비스를 ExternalName 타입으로 설정하고<br>\n주소를 DNS로  my.database.example.com으로 설정해주면<br>\n이 my-service는 들어오는 모든 요청을 my.database.example.com 으로 포워딩 해준다.<br>\n(일종의 프록시와 같은 역할) </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">kind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Service</span>\napiVersion<span class=\"token punctuation\">:</span> <span class=\"token class-name\">v1</span>\nmetadata<span class=\"token punctuation\">:</span>\nname<span class=\"token punctuation\">:</span> my<span class=\"token operator\">-</span>service\n<span class=\"token keyword\">namespace</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">prod</span>\nspec<span class=\"token punctuation\">:</span>\ntype<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ExternalName</span>\nexternalName<span class=\"token punctuation\">:</span> my<span class=\"token punctuation\">.</span>database<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>com</code></pre></div>\n<br/>\n<br/>\n<p>다음과 같은 구조로 서비스가 배포된다.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/93558324-2e0b1b80-f9b8-11ea-876a-231e2d4e533c.png\" alt=\"스크린샷, 2020-09-18 14-06-37\"></p>\n<br/>\n<br/>\n<p>DNS가 아닌 직접 IP를 이용하는 방식 </p>\n<p>위의 경우 DNS를 이용하였는데, DNS가 아니라 직접 IP 주소를 이용하는 방법도 있다.</p>\n<br/>\n<br/>\n<p>서비스 ClusterIP 서비스로 생성을 한 후 서비스 네임만 정의하고 서비스에 속해있는 Pod를 지정하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">apiVersion<span class=\"token punctuation\">:</span> <span class=\"token class-name\">v1</span>\nkind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Service</span>\nmetadata<span class=\"token punctuation\">:</span>\nname<span class=\"token punctuation\">:</span> nasa<span class=\"token operator\">-</span>svc<span class=\"token operator\">-</span><span class=\"token class-name\">ext</span>\nspec<span class=\"token punctuation\">:</span>\nports<span class=\"token punctuation\">:</span>\n<span class=\"token operator\">-</span> port<span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></code></pre></div>\n<br/>\n<br/>\n<p>다음으로, 아래와 같이 서비스의 EndPoint를 별도로 지정해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">apiVersion<span class=\"token punctuation\">:</span> <span class=\"token class-name\">v1</span>\nkind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Endpoints</span>\nmetadata<span class=\"token punctuation\">:</span>\nname<span class=\"token punctuation\">:</span> nasa<span class=\"token operator\">-</span>svc<span class=\"token operator\">-</span><span class=\"token class-name\">ext</span>\nsubsets<span class=\"token punctuation\">:</span>\n<span class=\"token operator\">-</span> addresses<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span> ip<span class=\"token punctuation\">:</span> <span class=\"token number\">35.225</span><span class=\"token number\">.75</span><span class=\"token number\">.124</span>\n    ports<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span> port<span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></code></pre></div>\n<p>이 때 <code class=\"language-text\">서비스명</code>과 서비스 <code class=\"language-text\">EndPoints의 이름</code>이 동일해야 한다.<br>\n위의 경우에는 <code class=\"language-text\">nasa-svc-ext</code>로 같은 서비스명을 사용하였고 이 서비스는 35.225.75.124:80 서비스를 가르키도록 되어 있다.</p>\n<br/>\n<hr>\n<h3 id=\"헤드리스-서비스\" style=\"position:relative;\"><a href=\"#%ED%97%A4%EB%93%9C%EB%A6%AC%EC%8A%A4-%EC%84%9C%EB%B9%84%EC%8A%A4\" aria-label=\"헤드리스 서비스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>헤드리스 서비스</h3>\n<p>Headless Service</p>\n<p>서비스는 접근을 위해서 Cluster IP 또는 External IP 를 지정받는다.</p>\n<p>즉 서비스를 통해서 제공되는 기능들에 대한 엔드포인트를 쿠버네티스 서비스를 통해서 통제하는 개념인데<br>\nMSA 에서는 기능 컴포넌트에 대한 엔드포인트 (IP 주소)를 찾는 기능을 서비스 디스커버리 (Service Discovery) 라고 하고<br>\n서비스의 위치를 등록해놓는 서비스 디스커버리 솔루션을 제공한다.<br>\n<code class=\"language-text\">Etcd</code> 나 <code class=\"language-text\">hashcorp</code>의 consul (<a href=\"https://www.consul.io/\">https://www.consul.io/</a>)과 같은 솔루션<br>\n이 경우 쿠버네티스 서비스를 통해서 마이크로 서비스 컴포넌트를 관리하는 것이 아니라<br>\n서비스 디스커버리 솔루션을 이용하기 때문에 서비스에 대한 IP 주소가 필요없다.</p>\n<p>이런 시나리오를 지원하기 위한 쿠버네티스의 서비스를 헤드리스라고 하는데<br>\n이러한 헤드리스 서비스는 Cluster IP 등의 주소를 가지지 않는다.<br>\n단 DNS이름을 가지게 되는데 이 DNS 이름을 lookup 해보면 서비스 (로드밸런서)의 IP 를 리턴하지 않고<br>\n이 서비스에 연결된 Pod 들의 IP 주소들을 리턴하게 된다.</p>\n<br/>\n<br/>\n<p>간단하게 테스트를 해보자</p>\n<p>RS로 여러개의 POD를 정의해놓은 상태이다!</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> po <span class=\"token operator\">-</span>o wide\nNAME                       READY   STATUS    RESTARTS   AGE    IP          NODE         NOMINATED NODE   READINESS GATES\nnasatest<span class=\"token operator\">-</span>5bdd7d57f<span class=\"token operator\">-</span>s8b7d   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          <span class=\"token number\">27m</span>    <span class=\"token number\">10.32</span><span class=\"token number\">.0</span><span class=\"token number\">.4</span>   nasa<span class=\"token operator\">-</span>node3   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nreplicaset<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>47skg      <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          5m6s   <span class=\"token number\">10.46</span><span class=\"token number\">.0</span><span class=\"token number\">.2</span>   nasa<span class=\"token operator\">-</span>node1   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nreplicaset<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>7j58x      <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          5m6s   <span class=\"token number\">10.32</span><span class=\"token number\">.0</span><span class=\"token number\">.2</span>   nasa<span class=\"token operator\">-</span>node3   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nreplicaset<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>8ncc5      <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          5m6s   <span class=\"token number\">10.42</span><span class=\"token number\">.0</span><span class=\"token number\">.3</span>   nasa<span class=\"token operator\">-</span>node2   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nreplicaset<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>ktzpq      <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          5m6s   <span class=\"token number\">10.32</span><span class=\"token number\">.0</span><span class=\"token number\">.3</span>   nasa<span class=\"token operator\">-</span>node3   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span></code></pre></div>\n<br/>\n<br/>\n<p>여기에 다음과 같은 헤드리스 서비스를 하나 가동시켜보자</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">apiVersion<span class=\"token punctuation\">:</span> <span class=\"token class-name\">v1</span>\nkind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Service</span>\nmetadata<span class=\"token punctuation\">:</span>\nname<span class=\"token punctuation\">:</span> nasa<span class=\"token operator\">-</span>node<span class=\"token operator\">-</span>svc<span class=\"token operator\">-</span><span class=\"token class-name\">headless</span>\nspec<span class=\"token punctuation\">:</span>\nclusterIP<span class=\"token punctuation\">:</span> <span class=\"token class-name\">None</span>\nselector<span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">:</span> nasa<span class=\"token operator\">-</span>nginx<span class=\"token operator\">-</span>pods<span class=\"token operator\">-</span><span class=\"token class-name\">label</span>\nports<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">http</span>\n    port<span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    protocol<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TCP</span>\n    targetPort<span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span></code></pre></div>\n<p>POD들의 레이블을 묶어준 뒤 서비스를 정의하게되면</p>\n<br/>\n<br/>\n<p>아래와 같이 ClusterIP가 할당되지 않는 것을 확인 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> svc\nNAME                     TYPE        CLUSTER<span class=\"token operator\">-</span>IP   EXTERNAL<span class=\"token operator\">-</span><span class=\"token return-type class-name\">IP</span>   <span class=\"token function\">PORT</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span>   AGE\nkubernetes               ClusterIP   <span class=\"token number\">10.96</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>        <span class=\"token number\">443</span><span class=\"token operator\">/</span>TCP   <span class=\"token number\">31m</span>\nnasa<span class=\"token operator\">-</span>node<span class=\"token operator\">-</span>svc<span class=\"token operator\">-</span>headless   ClusterIP   None         <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>        <span class=\"token number\">80</span><span class=\"token operator\">/</span>TCP    6m12s</code></pre></div>\n<br/>\n<br/>\n<p>그러나 다른 POD를 생성해서 <code class=\"language-text\">NSLOOKUP</code>을 날려 DNS를 조회해보면</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl run nasatest <span class=\"token operator\">-</span>it <span class=\"token operator\">--</span>image<span class=\"token operator\">=</span>c1t1d0s7<span class=\"token operator\">/</span>network<span class=\"token operator\">-</span>multitool <span class=\"token operator\">--</span>generator<span class=\"token operator\">=</span>run<span class=\"token operator\">-</span>pod<span class=\"token operator\">/</span>v1 <span class=\"token operator\">--</span>rm<span class=\"token operator\">=</span><span class=\"token boolean\">true</span> bash\nIf you don't see a <span class=\"token class-name\">command</span> prompt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">try</span> pressing enter<span class=\"token punctuation\">.</span>\nbash<span class=\"token operator\">-</span><span class=\"token number\">5.0</span># nslookup nasa<span class=\"token operator\">-</span>node<span class=\"token operator\">-</span>svc<span class=\"token operator\">-</span><span class=\"token class-name\">headless</span>\nServer<span class=\"token punctuation\">:</span>         <span class=\"token number\">10.96</span><span class=\"token number\">.0</span><span class=\"token number\">.10</span>\nAddress<span class=\"token punctuation\">:</span>        <span class=\"token number\">10.96</span><span class=\"token number\">.0</span><span class=\"token number\">.10</span>#<span class=\"token number\">53</span>\nName<span class=\"token punctuation\">:</span>   nasa<span class=\"token operator\">-</span>node<span class=\"token operator\">-</span>svc<span class=\"token operator\">-</span><span class=\"token class-name\">headless<span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span>svc<span class=\"token punctuation\">.</span>cluster<span class=\"token punctuation\">.</span>local</span>\nAddress<span class=\"token punctuation\">:</span> <span class=\"token number\">10.46</span><span class=\"token number\">.0</span><span class=\"token number\">.2</span>\nName<span class=\"token punctuation\">:</span>   nasa<span class=\"token operator\">-</span>node<span class=\"token operator\">-</span>svc<span class=\"token operator\">-</span><span class=\"token class-name\">headless<span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span>svc<span class=\"token punctuation\">.</span>cluster<span class=\"token punctuation\">.</span>local</span>\nAddress<span class=\"token punctuation\">:</span> <span class=\"token number\">10.32</span><span class=\"token number\">.0</span><span class=\"token number\">.2</span>\nName<span class=\"token punctuation\">:</span>   nasa<span class=\"token operator\">-</span>node<span class=\"token operator\">-</span>svc<span class=\"token operator\">-</span><span class=\"token class-name\">headless<span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span>svc<span class=\"token punctuation\">.</span>cluster<span class=\"token punctuation\">.</span>local</span>\nAddress<span class=\"token punctuation\">:</span> <span class=\"token number\">10.32</span><span class=\"token number\">.0</span><span class=\"token number\">.3</span>\nName<span class=\"token punctuation\">:</span>   nasa<span class=\"token operator\">-</span>node<span class=\"token operator\">-</span>svc<span class=\"token operator\">-</span><span class=\"token class-name\">headless<span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span>svc<span class=\"token punctuation\">.</span>cluster<span class=\"token punctuation\">.</span>local</span>\nAddress<span class=\"token punctuation\">:</span> <span class=\"token number\">10.42</span><span class=\"token number\">.0</span><span class=\"token number\">.3</span></code></pre></div>\n<p>위과 같이 서비스에 의해 제공되는 pod 들의 IP 주소 목록이 나오는 것을 확인할 수 있다.</p>\n<br/>\n<hr>\n<h3 id=\"로드밸런서\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%84%9C\" aria-label=\"로드밸런서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로드밸런서</h3>\n<ul>\n<li>Loabbalancer  </li>\n</ul>\n<p>현재 클러스터 환경은 GCP의 인스턴스에 KUBEADM으로 구성한 상태이다<br>\n현재 환경에서 GCP의 외부 IP로 LB를 이용해 URL을 받아와 보자!<br>\n외부 IP를 가지고 있기  때문에, 클러스터 외부에서 접근이 가능하다. 방화벽 문제만 없다면…;;;</p>\n<br/>\n<br/>\n<p>우선 다음과 같은 RS를 하나 정의한다  </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">apiVersion<span class=\"token punctuation\">:</span> apps<span class=\"token operator\">/</span><span class=\"token class-name\">v1</span> \nkind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ReplicaSet</span> \nmetadata<span class=\"token punctuation\">:</span> \nname<span class=\"token punctuation\">:</span> rs<span class=\"token operator\">-</span><span class=\"token class-name\">nasa</span> \nspec<span class=\"token punctuation\">:</span> \nreplicas<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span> \nselector<span class=\"token punctuation\">:</span> \n    matchLabels<span class=\"token punctuation\">:</span> \n    app<span class=\"token punctuation\">:</span> nasa<span class=\"token operator\">-</span>rs<span class=\"token operator\">-</span><span class=\"token class-name\">pod</span>\ntemplate<span class=\"token punctuation\">:</span> \n    metadata<span class=\"token punctuation\">:</span> \n    name<span class=\"token punctuation\">:</span> nasa<span class=\"token operator\">-</span><span class=\"token class-name\">rs</span>\n    labels<span class=\"token punctuation\">:</span> \n        app<span class=\"token punctuation\">:</span> nasa<span class=\"token operator\">-</span>rs<span class=\"token operator\">-</span><span class=\"token class-name\">pod</span>\n    spec<span class=\"token punctuation\">:</span> \n    containers<span class=\"token punctuation\">:</span> \n    <span class=\"token operator\">-</span> name<span class=\"token punctuation\">:</span> rs<span class=\"token operator\">-</span><span class=\"token class-name\">nasa</span> \n        image<span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span><span class=\"token class-name\">latest</span> \n        ports<span class=\"token punctuation\">:</span> \n        <span class=\"token operator\">-</span> containerPort<span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></code></pre></div>\n<br/>\n<br/>\n<p>그리고 아래와 같은 LB 서비스를 하나 정의한다!!</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">apiVersion<span class=\"token punctuation\">:</span> <span class=\"token class-name\">v1</span>\nkind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Service</span>\nmetadata<span class=\"token punctuation\">:</span>\nname<span class=\"token punctuation\">:</span> nasa<span class=\"token operator\">-</span>node<span class=\"token operator\">-</span><span class=\"token class-name\">lb</span>\nspec<span class=\"token punctuation\">:</span>\nselector<span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">:</span> nasa<span class=\"token operator\">-</span>rs<span class=\"token operator\">-</span><span class=\"token class-name\">pod</span>\nports<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">http</span>\n    port<span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    protocol<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TCP</span>\n    targetPort<span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\ntype<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LoadBalancer</span>\nexternalIPs<span class=\"token punctuation\">:</span>\n<span class=\"token operator\">-</span> <span class=\"token number\">34.84</span><span class=\"token number\">.172</span><span class=\"token number\">.31</span></code></pre></div>\n<br/>\n<p><code class=\"language-text\">externalIPs</code>의 경우 GCP 인스턴스에서 고정으로 할당한 IP입니다\n<img src=\"https://user-images.githubusercontent.com/69498804/93566536-2c495400-f9c8-11ea-98d6-3ffefa470af0.png\" alt=\"스크린샷, 2020-09-18 16-01-07\"></p>\n<br/>\n<br/>\n<p>위의 정의된 템플릿들을 생성하면 아래와 같이 정상적으로 생성됩니다!!</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> po <span class=\"token operator\">-</span>o wide\nNAME                       READY   STATUS    RESTARTS   AGE   IP          NODE         NOMINATE\nD NODE   READINESS GATES\nrs<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>fvzm6              <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          <span class=\"token number\">64m</span>   <span class=\"token number\">10.46</span><span class=\"token number\">.0</span><span class=\"token number\">.3</span>   nasa<span class=\"token operator\">-</span>node1   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>  \n        <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nrs<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>hqhjs              <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          <span class=\"token number\">64m</span>   <span class=\"token number\">10.42</span><span class=\"token number\">.0</span><span class=\"token number\">.3</span>   nasa<span class=\"token operator\">-</span>node2   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>  \n        <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nrs<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>jn6jz              <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          <span class=\"token number\">64m</span>   <span class=\"token number\">10.32</span><span class=\"token number\">.0</span><span class=\"token number\">.2</span>   nasa<span class=\"token operator\">-</span>node3   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>  \n        <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nrs<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>zfh2n              <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          <span class=\"token number\">64m</span>   <span class=\"token number\">10.46</span><span class=\"token number\">.0</span><span class=\"token number\">.2</span>   nasa<span class=\"token operator\">-</span>node1   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>  \n        <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\n<span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> svc <span class=\"token operator\">-</span>o wide\nNAME                     TYPE           CLUSTER<span class=\"token operator\">-</span>IP     EXTERNAL<span class=\"token operator\">-</span><span class=\"token return-type class-name\">IP</span>    <span class=\"token function\">PORT</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span>        AGE    SEL\nECTOR\nkubernetes               ClusterIP      <span class=\"token number\">10.96</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>      <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>         <span class=\"token number\">443</span><span class=\"token operator\">/</span>TCP        <span class=\"token number\">119m</span>   <span class=\"token operator\">&lt;</span>no\nne<span class=\"token operator\">></span>\nnasa<span class=\"token operator\">-</span>node<span class=\"token operator\">-</span>lb             LoadBalancer   <span class=\"token number\">10.101</span><span class=\"token number\">.13</span><span class=\"token number\">.59</span>   <span class=\"token number\">34.84</span><span class=\"token number\">.172</span><span class=\"token number\">.31</span>   <span class=\"token number\">80</span><span class=\"token punctuation\">:</span><span class=\"token number\">30850</span><span class=\"token operator\">/</span>TCP   <span class=\"token number\">36m</span>    app\n<span class=\"token operator\">=</span>nasa<span class=\"token operator\">-</span>rs<span class=\"token operator\">-</span>pod\n<span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># \n<span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> endpoints\nNAME                     ENDPOINTS                                            AGE\nkubernetes               <span class=\"token number\">10.146</span><span class=\"token number\">.0</span><span class=\"token number\">.6</span><span class=\"token punctuation\">:</span><span class=\"token number\">6443</span>                                      <span class=\"token number\">120m</span>\nnasa<span class=\"token operator\">-</span>node<span class=\"token operator\">-</span>lb             <span class=\"token number\">10.32</span><span class=\"token number\">.0</span><span class=\"token number\">.2</span><span class=\"token punctuation\">:</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">10.42</span><span class=\"token number\">.0</span><span class=\"token number\">.3</span><span class=\"token punctuation\">:</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">10.46</span><span class=\"token number\">.0</span><span class=\"token number\">.2</span><span class=\"token punctuation\">:</span><span class=\"token number\">80</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> more<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>   <span class=\"token number\">36m</span></code></pre></div>\n<p>POS 정상기동, 서비스 정상기동, EndPoint에 정상적으로 Pod가 동기화 됨을 확인</p>\n<br/>\n<br/>\n<p>자 그럼 이제 서비스를 위한 정의는 모두 끝났습니다!!</p>\n<p>테스트를 하기전 GCP 방화벽에서 HTTP에 대한 PORT를 허용해줍니다!</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/93566868-ac6fb980-f9c8-11ea-87b7-828996360064.png\" alt=\"스크린샷, 2020-09-18 16-04-43\"></p>\n<br/>\n<br/>\n<p>모두 확인이 완료 되었으면 외부 ubuntu os에서 curl로 요청해봅시다!</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">curl <span class=\"token number\">34.84</span><span class=\"token number\">.172</span><span class=\"token number\">.31</span><span class=\"token punctuation\">:</span><span class=\"token number\">30850</span></code></pre></div>\n<br/>\n<p>LB SVC에서 외부 PORT가 30850으로 설정되어있어 해당 포트로 요청해야합니다!!</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/93567090-15573180-f9c9-11ea-9163-e5023b1dc46f.png\" alt=\"스크린샷, 2020-09-18 16-06-31\"></p>\n<p>정상적으로 LB SVC의 외부IP로 URL을 받아오네요!! 성공!!</p>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-service\">✔ Service</a></p>\n<ul>\n<li><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%85%9C%ED%94%8C%EB%A6%BF\">서비스 템플릿</a></li>\n<li><a href=\"#%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8\">엔드포인트</a></li>\n</ul>\n</li>\n<li><a href=\"#-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%84%B8%EC%85%98-%EC%96%B4%ED%94%BC%EB%8B%88%ED%8B%B0\">👍 서비스 세션 어피니티?</a></li>\n<li>\n<p><a href=\"#-service-type\">🐱‍🏍 Service Type</a></p>\n<ul>\n<li><a href=\"#external-name\">External name</a></li>\n<li><a href=\"#%ED%97%A4%EB%93%9C%EB%A6%AC%EC%8A%A4-%EC%84%9C%EB%B9%84%EC%8A%A4\">헤드리스 서비스</a></li>\n<li><a href=\"#%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%84%9C\">로드밸런서</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"머리말   이번 포스트에서는 쿠버네티스의 네트워크 및 내부 서비스들에 대해서 알아보겠습니다. ✔ Service 이전 포스트들에서 쿠버네티스 클러스터안에 컨트롤러들을 이용해서 POD를 정의했습니다.      POD 특성상 생성 및 정의 될때 지정되는 IP가 랜덤하고  또한 리스타트 때마다 IP가 변동됩니다.   위 두개의 이유로 POD는 로 호출이 어렵습니다. 또한 여러 POD에 같은 애플리케이션을 운용할 경우 이 POD 간의 로드밸런싱을 지원해줘야 하는데 이러한 기능들을 수행하는게  입니다.   간략한 서비스들의 기능을 요약해보면 아래 4가지 정도입니다. 서비스를 사용하게 되면 고정된 주소를 이용해서 접근이 가능해 집…","frontmatter":{"date":"June 29, 2021","title":"[Kubernetes] - 쿠버네티스의 Service","categories":"Kubernetes","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/kubernetes-service/"}},"next":{"id":"059e8eef-76f8-5d37-9aac-1ad3fc2d4868","html":"<p>머리말  </p>\n<p>이번 포스트에서는 자동적으로 POD 및 시스템을 관리 할 수 있는 컨트롤러에 대해서 알아보겠습니다</p>\n<hr>\n<h2 id=\"-라이브니스-프로브\" style=\"position:relative;\"><a href=\"#-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%8B%88%EC%8A%A4-%ED%94%84%EB%A1%9C%EB%B8%8C\" aria-label=\" 라이브니스 프로브 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ 라이브니스 프로브</h2>\n<p>라이브니스 프로브 개념</p>\n<p>사용자가 모든 오브젝트를 일일이 관리할 수는 없다.<br>\n관리하고자 하더라도 사용자의 사각지대에 있는 오브젝트를 실제 프로덕션 환경에서 관리하기 위해서는 수동 작업은 권장되지 않는다.</p>\n<p>실제 환경에서는 자동적으로 정상적이고 안정적인 상태가 유지되어야 한다.<br>\n쿠버네티스가 이러한 요구를 충족시키기 위해서 사용하는 것이 <code class=\"language-text\">라이브니스 프로브</code>이다.</p>\n<p>라이브니스 프로브는 파드에 의해 컨테이너를 동작시키고 동작중인 컨테이너의 상태를 주기적으로 모니터링한다.<br>\n파드에서 오류가 발생하면 해당 컨테이너를 재시작시킨다.<br>\n쿠버네티스의 핵심이라고 할 수 있는 동작이 바로 이 라이브니스 프로브 덕분에 가능한 것이다.</p>\n<p>​\n<br/></p>\n<p>라이브니스 프로브는 세 가지 방식으로 컨테이너의 상태를 모니터링한다.</p>\n<ul>\n<li><code class=\"language-text\">HTTP GET 프로브</code> : HTTP 요청 / 응답으로 확인</li>\n<li><code class=\"language-text\">TCP 소켓 프로브</code> : 포트 연결 시도해서 확인</li>\n<li><code class=\"language-text\">Exec 프로브</code> : 컨테이너 내부의 바이너리를 실행하고 종료 코드 확인  </li>\n</ul>\n<p>라이브니스 프로브는 현재 동작중인 파드의 상태를 감지하고 재시작 하는데서 그 역할을 다 하지만<br>\n여러 사유로 인해 파드가 삭제되거나 노드 자체에 장애가 발생하는 경우에는 파드를 재 시작 할 수 없다.<br>\n이러한 상황에 대비해 가용성을 높이기 위해서는 RC, RS, DS 등의 컨트롤러를 사용해야 한다.</p>\n<br/>\n<br/>\n<h3 id=\"라이브니스-프로브-생성\" style=\"position:relative;\"><a href=\"#%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%8B%88%EC%8A%A4-%ED%94%84%EB%A1%9C%EB%B8%8C-%EC%83%9D%EC%84%B1\" aria-label=\"라이브니스 프로브 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>라이브니스 프로브 생성</h3>\n<p>라이브니스 프로브 생성 - <code class=\"language-text\">정상 상태</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">apiVersion<span class=\"token punctuation\">:</span> <span class=\"token class-name\">v1</span>\nkind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Pod</span>\nmetadata<span class=\"token punctuation\">:</span>\nname<span class=\"token punctuation\">:</span> nasa<span class=\"token operator\">-</span>pod<span class=\"token operator\">-</span><span class=\"token class-name\">liveness</span>\nspec<span class=\"token punctuation\">:</span>\ncontainers<span class=\"token punctuation\">:</span>\n<span class=\"token operator\">-</span> image<span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span><span class=\"token class-name\">latest</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">nasa</span>\n    ports<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span> containerPort<span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n    protocol<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TCP</span>\n    livenessProbe<span class=\"token punctuation\">:</span>\n    httpGet<span class=\"token punctuation\">:</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token operator\">/</span>\n        port<span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span></code></pre></div>\n<p>HTTP GET 프로브를 사용하였으며, 경로는 / 포트는 8080이다.</p>\n<br/>\n<ul>\n<li>\n<p>컨피그 설명</p>\n<ul>\n<li><code class=\"language-text\">livenessProbe</code>: 라이브니스 프로브 정의 </li>\n<li><code class=\"language-text\">httpGet</code> : HTTP GET 프로브 정의</li>\n<li><code class=\"language-text\">tcpSocket</code> : TCP 소켓 프로브 정의 </li>\n<li><code class=\"language-text\">Exec</code>: Exec 프로브 정의</li>\n</ul>\n</li>\n</ul>\n<br/>\n<br/>\n<p>작성한 YAML 파일로 POD를 생성한다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl apply <span class=\"token operator\">-</span>f nasa<span class=\"token operator\">-</span>pod<span class=\"token operator\">-</span>liveness<span class=\"token punctuation\">.</span>yml \npod<span class=\"token operator\">/</span>nasa<span class=\"token operator\">-</span>pod<span class=\"token operator\">-</span>liveness created\n<span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> pods <span class=\"token operator\">--</span>watch\nNAME                READY   STATUS    RESTARTS   AGE\nnasa<span class=\"token operator\">-</span>pod<span class=\"token operator\">-</span>liveness   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          19s</code></pre></div>\n<p>라이브니스의 확인을 위해 <code class=\"language-text\">--watch</code> 옵션을 사용해 지속적으로 모니터링!</p>\n<br/>\n<br/>\n<p>정상적인 상태를 확인했으니 비정상 상태를 만들어 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">apiVersion: v1\nkind: Pod\nmetadata:\nname: nasa-pod-liveness-error\nspec:\ncontainers:\n- image: nginx:latest\n    name: nasa\n    ports:\n    - containerPort: 8081\n    protocol: TCP\n    livenessProbe:\n    httpGet:\n        path: /\n        port: 8082</code></pre></div>\n<p>위의 YAML파일과 모두 동일하지만 <code class=\"language-text\">PORT</code>를 임의로 다르게 주어 <code class=\"language-text\">error</code>상태 발생</p>\n<br/>\n<br/>\n<p>POD 를 생성 후 모니터링 해보겠습니다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl apply <span class=\"token operator\">-</span>f nasa<span class=\"token operator\">-</span>pod<span class=\"token operator\">-</span>livness<span class=\"token operator\">-</span>error<span class=\"token punctuation\">.</span>yml \npod<span class=\"token operator\">/</span>nasa<span class=\"token operator\">-</span>pod<span class=\"token operator\">-</span>liveness<span class=\"token operator\">-</span>error created</code></pre></div>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> pods <span class=\"token operator\">--</span>watch\nNAME                  READY   STATUS    RESTARTS   AGE\nnasa<span class=\"token operator\">-</span>pod<span class=\"token operator\">-</span>liveness   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          30s\nnasa<span class=\"token operator\">-</span>pod<span class=\"token operator\">-</span>liveness<span class=\"token operator\">-</span>error   <span class=\"token number\">0</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Pending   <span class=\"token number\">0</span>          0s\nnasa<span class=\"token operator\">-</span>pod<span class=\"token operator\">-</span>liveness<span class=\"token operator\">-</span>error   <span class=\"token number\">0</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Pending   <span class=\"token number\">0</span>          0s\nnasa<span class=\"token operator\">-</span>pod<span class=\"token operator\">-</span>liveness<span class=\"token operator\">-</span>error   <span class=\"token number\">0</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     ContainerCreating   <span class=\"token number\">0</span>          0s\nnasa<span class=\"token operator\">-</span>pod<span class=\"token operator\">-</span>liveness<span class=\"token operator\">-</span>error   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running             <span class=\"token number\">0</span>          5s\nnasa<span class=\"token operator\">-</span>pod<span class=\"token operator\">-</span>liveness<span class=\"token operator\">-</span>error   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running             <span class=\"token number\">1</span>          62s\nnasa<span class=\"token operator\">-</span>pod<span class=\"token operator\">-</span>liveness<span class=\"token operator\">-</span>error   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running             <span class=\"token number\">2</span>          2m1s\nnasa<span class=\"token operator\">-</span>pod<span class=\"token operator\">-</span>liveness<span class=\"token operator\">-</span>error   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running             <span class=\"token number\">3</span>          3m1s</code></pre></div>\n<br/>\n<br/>\n<p>WATCH로 모니터링중이던 터미널을 확인해보면 변화가 생겼다.<br>\nRESTARTS 필드가 0 에서 양수로 변경된 것은 라이브니스 프로브가 해당 파드를 이상이 있는 것으로 판단하고<br>\n재 시작 시도중임을 의미한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa<span class=\"token operator\">-</span>pod<span class=\"token operator\">-</span>liveness<span class=\"token operator\">-</span>error   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running             <span class=\"token number\">4</span>          4m2s\nnasa<span class=\"token operator\">-</span>pod<span class=\"token operator\">-</span>liveness<span class=\"token operator\">-</span>error   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running             <span class=\"token number\">5</span>          5m1s\nnasa<span class=\"token operator\">-</span>pod<span class=\"token operator\">-</span>liveness<span class=\"token operator\">-</span>error   <span class=\"token number\">0</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     CrashLoopBackOff    <span class=\"token number\">5</span>          5m58s</code></pre></div>\n<p>잠시 후에 다시 확인해보면 상태가 CrashLoopBackOff 인 것을 확인할 수 있다.</p>\n<br/>\n<br/>\n<p>POD의 Describe를 확인해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl describe pods nasa<span class=\"token operator\">-</span>pod<span class=\"token operator\">-</span>liveness<span class=\"token operator\">-</span>error\n    <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n    <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n    State<span class=\"token punctuation\">:</span>          <span class=\"token class-name\">Running</span>\n    Started<span class=\"token punctuation\">:</span>      Fri<span class=\"token punctuation\">,</span> <span class=\"token number\">17</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">:</span><span class=\"token number\">20</span> <span class=\"token operator\">+</span><span class=\"token number\">0000</span>\n    <span class=\"token class-name\">Last</span> State<span class=\"token punctuation\">:</span>     <span class=\"token class-name\">Terminated</span>\n    Reason<span class=\"token punctuation\">:</span>       Error\n    <span class=\"token class-name\">Exit</span> Code<span class=\"token punctuation\">:</span>    <span class=\"token number\">137</span>\n    Started<span class=\"token punctuation\">:</span>      Fri<span class=\"token punctuation\">,</span> <span class=\"token number\">17</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">11</span><span class=\"token punctuation\">:</span><span class=\"token number\">20</span> <span class=\"token operator\">+</span><span class=\"token number\">0000</span>\n    Finished<span class=\"token punctuation\">:</span>     Fri<span class=\"token punctuation\">,</span> <span class=\"token number\">17</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">:</span><span class=\"token number\">16</span> <span class=\"token operator\">+</span><span class=\"token number\">0000</span>\n    Ready<span class=\"token punctuation\">:</span>          True\n    <span class=\"token class-name\">Restart</span> Count<span class=\"token punctuation\">:</span>  <span class=\"token number\">3</span></code></pre></div>\n<br/>\n<br/>\n<p>Exit Code는 프로세스를 종료하기 위한 코드이다(137=128+9 , 9번 시그널 : SIGKILL)  </p>\n<p><code class=\"language-text\">종류</code></p>\n<ul>\n<li>delay</li>\n<li>timeout</li>\n<li>period 가 추가로 존재 한다.<br>\n</li>\n</ul>\n<p>컨테이너 실행 후로부터 모니터링을 시작하기까지 시간을 delay<br>\n모니터링사이에 시간 간격을 timeout으로 표기한다.<br>\n파드가 실행되고 어플리케이션이 제대로 동작하기까지 시간이 걸리므로 초기 지연 시간을 initialDlaySecond 로 정의할 수 있다.<br>\nEvent 필드는 파드의 상태를 시간대별로 확인할 수 있으며 이 경우 라이브니스 프로브에 문제가 있다는 사실을 확인할 수 있다.<br>\n이들은 모두 yaml파일에 정의할 수 있는 내용들이다.</p>\n<br/>\n<hr>\n<h2 id=\"-레플리카셋\" style=\"position:relative;\"><a href=\"#-%EB%A0%88%ED%94%8C%EB%A6%AC%EC%B9%B4%EC%85%8B\" aria-label=\" 레플리카셋 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✌ 레플리카셋</h2>\n<p>쿠버네티스가 처음 나왔을 때는 파드를 복제하고 항상성을 유지시키기 위한 수단은 <code class=\"language-text\">레플리케이션 컨트롤러</code>가 유일했습니다  </p>\n<p>그러나 레플리케이션 컨트롤러의 몇몇 문제점과 기능 개선을 위해 레플리카셋이라는 컨트롤러가 추가되었습니다.<br>\n최근에는 레플리케이션 컨트롤러를 사용하지 않고 대부분 레플리카셋을 사용하기에<br>\n이번 포스트에서는 레플리케이션 컨트롤러에 대해서 다루진 않겠습니다. 뭐 어짜피 둘이 거의 비슷합니다!</p>\n<p>​</p>\n<p>레플리케이션 컨트롤러와 레플리카셋의 비교</p>\n<ul>\n<li><code class=\"language-text\">파드의 다중 레이블 지원</code></li>\n<li><code class=\"language-text\">파드에 설정된 레이블의 키만 선택 가능</code></li>\n</ul>\n<p>레플리케이션 컨트롤러에서는 파드의 여러 레이블 중 하나의 레이블에 대해서만 레이블 셀렉터로 관리 파드를 지정할 수 있었고<br>\n반드시 레이블의 key=value가 모두 일치해야만 파드를 지정할 수 있었습니다.<br>\n그러나 레플리카셋은 다중 레이블을 지정할 수 있고 key만 가지고도 레이블을 지정할 수 있습니다.</p>\n<br/>\n<br/>\n<h3 id=\"레플리카셋-생성\" style=\"position:relative;\"><a href=\"#%EB%A0%88%ED%94%8C%EB%A6%AC%EC%B9%B4%EC%85%8B-%EC%83%9D%EC%84%B1\" aria-label=\"레플리카셋 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>레플리카셋 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">apiVersion<span class=\"token punctuation\">:</span> apps<span class=\"token operator\">/</span><span class=\"token class-name\">v1</span> \nkind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ReplicaSet</span> \nmetadata<span class=\"token punctuation\">:</span> \nname<span class=\"token punctuation\">:</span> replicaset<span class=\"token operator\">-</span><span class=\"token class-name\">nasa</span> \nspec<span class=\"token punctuation\">:</span> \nreplicas<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> \nselector<span class=\"token punctuation\">:</span> \n    matchLabels<span class=\"token punctuation\">:</span> \n    app<span class=\"token punctuation\">:</span> nasa<span class=\"token operator\">-</span>nginx<span class=\"token operator\">-</span>pods<span class=\"token operator\">-</span><span class=\"token class-name\">label</span> \ntemplate<span class=\"token punctuation\">:</span> \n    metadata<span class=\"token punctuation\">:</span> \n    name<span class=\"token punctuation\">:</span> nasa<span class=\"token operator\">-</span>nginx<span class=\"token operator\">-</span><span class=\"token class-name\">pod</span> \n    labels<span class=\"token punctuation\">:</span> \n        app<span class=\"token punctuation\">:</span> nasa<span class=\"token operator\">-</span>nginx<span class=\"token operator\">-</span>pods<span class=\"token operator\">-</span><span class=\"token class-name\">label</span> \n    spec<span class=\"token punctuation\">:</span> \n    containers<span class=\"token punctuation\">:</span> \n    <span class=\"token operator\">-</span> name<span class=\"token punctuation\">:</span> replicaset<span class=\"token operator\">-</span><span class=\"token class-name\">nasa</span> \n        image<span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span><span class=\"token class-name\">latest</span> \n        ports<span class=\"token punctuation\">:</span> \n        <span class=\"token operator\">-</span> containerPort<span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></code></pre></div>\n<p>레플리케이션 컨트롤러에서는 레이블 셀렉터 항목에 레이블을 직접 지정하지만<br>\n레플리카셋은 <code class=\"language-text\">matchLabels</code> 및 <code class=\"language-text\">matchExpressions</code> 필드로 <code class=\"language-text\">레이블을 선택</code>한다.<br>\n레플리카셋의 레이블 셀렉터는 kubectl explain replicaset.spec.selector로 지정할 수 있다.</p>\n<p>pod와 다르게 추가된 내용만 있습니다. replicas는 생성할 pod의 개수를 설정합니다.<br>\n그리고 레플리카가 포드를 생성할 때 사용할 템플릿을 정의합니다. </p>\n<br/>\n<br/>\n<p>생성 후 RS확인</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl apply <span class=\"token operator\">-</span>f nasa<span class=\"token operator\">-</span>rs<span class=\"token punctuation\">.</span>yml \nreplicaset<span class=\"token punctuation\">.</span>apps<span class=\"token operator\">/</span>replicaset<span class=\"token operator\">-</span>nasa created</code></pre></div>\n<br/>\n<br/>\n<p>레플리카셋 동작 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> replicasets<span class=\"token punctuation\">.</span>apps\nNAME              DESIRED   CURRENT   READY   AGE\nreplicaset<span class=\"token operator\">-</span>nasa   <span class=\"token number\">3</span>         <span class=\"token number\">3</span>         <span class=\"token number\">3</span>       3m9s</code></pre></div>\n<br/>\n<br/>\n<p>POD 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> po\nNAME                    READY   STATUS    RESTARTS   AGE\nreplicaset<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>7fvdx   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          2m21s\nreplicaset<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>gbft4   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          2m21s\nreplicaset<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>r84dt   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          2m21s</code></pre></div>\n<p>모두 정상적을 동작 한다!! 하지만 RS의 기능 중의 하나를 더 알아 봅시다!</p>\n<br/>\n<br/>\n<p>레플리카셋 <code class=\"language-text\">레이블 셀렉터</code> 사용</p>\n<ul>\n<li><code class=\"language-text\">matchLabels</code> 레이블 셀렉터</li>\n</ul>\n<p>matLabels 레이블 셀렉터는 오브젝트 파일에서 다음과 같은 형식으로 정의한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\nspec<span class=\"token punctuation\">:</span>\nselector<span class=\"token punctuation\">:</span>\n    matchLabels<span class=\"token punctuation\">:</span>\n    key<span class=\"token punctuation\">:</span> <span class=\"token keyword\">value</span>\n<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>matchLabels로 레이블 셀렉터를 사용하는 경우<br>\n레플리케이션 컨트롤러와 레플리카셋이 동일하게 동작한다.</p>\n<br/>\n<br/>\n<p>matchExpressions 레이블 셀렉터</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">spec<span class=\"token punctuation\">:</span>\nselector<span class=\"token punctuation\">:</span>\n    matchExpressions<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span> key<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>stirng<span class=\"token operator\">></span>\n    <span class=\"token keyword\">operator</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>In <span class=\"token operator\">|</span> NotIn <span class=\"token operator\">|</span> Exists <span class=\"token operator\">|</span> DoesNotExist<span class=\"token operator\">></span>\n    values<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span></code></pre></div>\n<p>위의 매치레이블과 다른 점은 <code class=\"language-text\">key</code>와 <code class=\"language-text\">values</code>를 따로 지정한다는 점이다.<br>\noperator 필드는 key와 value 사이의 연산을 담당하는 부분으로 아래 네 가지 중 하나를 선택해서 매칭시킬 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">In <span class=\"token punctuation\">:</span> 레이블의 키와 값이 지정된 값으로 일치해야 함\nNotIn<span class=\"token punctuation\">:</span> 레이블의 키와 값이 지정된 값과 일치하지 않아야 함\nExists<span class=\"token punctuation\">:</span> 레이블의 키가 포함되어야 함\nDoesNotExists<span class=\"token punctuation\">:</span> 레이블의 키가 포함되지 않아야 함</code></pre></div>\n<br/>\n<br/>\n<p>이번에는 같은 label을 갖고있는 replicas의 수를 증가시켜보겠습니다.<br>\nyaml 파일의 replicas를 4로 변경하고 다시 실행하면 변경된 것을 확인 할 수 있습니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">replicas<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span> </code></pre></div>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># vim nasa<span class=\"token operator\">-</span>rs<span class=\"token punctuation\">.</span>yml \n<span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># \n<span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl apply <span class=\"token operator\">-</span>f nasa<span class=\"token operator\">-</span>rs<span class=\"token punctuation\">.</span>yml \nreplicaset<span class=\"token punctuation\">.</span>apps<span class=\"token operator\">/</span>replicaset<span class=\"token operator\">-</span>nasa configured</code></pre></div>\n<br/>\n<p>이전에는 <code class=\"language-text\">created</code>라는 출력이 나왔는데<br>\n이번에는 <code class=\"language-text\">configured</code>라는 출력이 나왔습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> po\nNAME                    READY   STATUS    RESTARTS   AGE\nreplicaset<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>bpmbg   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          52s\nreplicaset<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>lkv4h   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          32s\nreplicaset<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>s2tlp   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          52s\nreplicaset<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>wxhq6   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          52s</code></pre></div>\n<p>POD도 확인해보면 이전에 생성되었던 POD는 종료되지 않고<br>\n새로운 POD만 추가 실행 된 것을 확인 할 수 있습니다.</p>\n<br/>\n<br/>\n<h3 id=\"동작-원리\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC\" aria-label=\"동작 원리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동작 원리</h3>\n<p>레플리카셋은 자동으로 복구해주고 생성을 확인하는 것을 보면 <code class=\"language-text\">tracking</code> 하고 있는 것 같습니다.</p>\n<p>이러한 것은 어떻게 이루어 지는 것일까요??</p>\n<p>이는 레플리카셋이 라벨셀렉터로 같은 라벨을 갖고 있는 포드들을 계속 확인합니다.<br>\n실제로 동일한 라벨이 설정한 라플리카 개수만큼 다시 복구해줍니다.<br>\n그리고 동일한 포드의 개수가 레플리카에 설정한 개수와 같다면 특별한 작업을 진행하지 않습니다. </p>\n<p>결론적으로 레플리카셋은 포드의 개수를 일정한 개수를 유지하는 기능을 합니다.</p>\n<br/>\n<br/>\n<p>그리고 추가로 pod의 metadata 변경도 가능합니다. </p>\n<p><code class=\"language-text\">edit</code> 옵션을 사용해 특정 POD의 라벨을 edit-test로 바꾸어 보았습니다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl edit pod replicaset<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>bpmbg\npod<span class=\"token operator\">/</span>replicaset<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>bpmbg edited\n<span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># \n<span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> po\nNAME                    READY   STATUS              RESTARTS   AGE\nreplicaset<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>72hgn   <span class=\"token number\">0</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     ContainerCreating   <span class=\"token number\">0</span>          4s\nreplicaset<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>bpmbg   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running             <span class=\"token number\">0</span>          6m5s\nreplicaset<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>lkv4h   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running             <span class=\"token number\">0</span>          5m45s\nreplicaset<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>s2tlp   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running             <span class=\"token number\">0</span>          6m5s\nreplicaset<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>wxhq6   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running             <span class=\"token number\">0</span>          6m5s\n<span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span>#\n<span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span>#\n<span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span>#\n<span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> po <span class=\"token operator\">--</span>show<span class=\"token operator\">-</span>labels\nNAME                    READY   STATUS    RESTARTS   AGE     LABELS\nreplicaset<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>72hgn   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          66s     app<span class=\"token operator\">=</span>nasa<span class=\"token operator\">-</span>nginx<span class=\"token operator\">-</span>pods<span class=\"token operator\">-</span>label\nreplicaset<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>bpmbg   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          7m7s    app<span class=\"token operator\">=</span>edit<span class=\"token operator\">-</span>test\nreplicaset<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>lkv4h   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          6m47s   app<span class=\"token operator\">=</span>nasa<span class=\"token operator\">-</span>nginx<span class=\"token operator\">-</span>pods<span class=\"token operator\">-</span>label\nreplicaset<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>s2tlp   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          7m7s    app<span class=\"token operator\">=</span>nasa<span class=\"token operator\">-</span>nginx<span class=\"token operator\">-</span>pods<span class=\"token operator\">-</span>label\nreplicaset<span class=\"token operator\">-</span>nasa<span class=\"token operator\">-</span>wxhq6   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          7m7s    app<span class=\"token operator\">=</span>nasa<span class=\"token operator\">-</span>nginx<span class=\"token operator\">-</span>pods<span class=\"token operator\">-</span>label</code></pre></div>\n<br/>\n<hr>\n<h2 id=\"-데몬셋\" style=\"position:relative;\"><a href=\"#-%EB%8D%B0%EB%AA%AC%EC%85%8B\" aria-label=\" 데몬셋 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👀 데몬셋</h2>\n<p>데몬셋은 모든 노드가 파드의 사본을 실행하도록 하는 역할을 한다.<br>\n쿠버네티스 클러스터에서 노드가 추가되면 파드도 추가된다.<br>\n노드가 클러스터에서 제거되면 해당 파드는 가비지(garbage)로 넘어간다.<br>\n데몬셋을 삭제하면 데몬셋이 생성한 파드들도 정리된다.  </p>\n<p>대몬셋의 정확한 용도는 다음과 같다.</p>\n<p>​</p>\n<ul>\n<li>모든 노드에서 클러스터 스토리지 데몬 실행</li>\n<li>모든 노드에서 로그 수집 데몬 실행</li>\n<li>모든 노드에서 노드 모니터링 데몬 실행</li>\n</ul>\n<p>​</p>\n<p>이러한 작업의 처리를 위해서 모든 노드 단위로 커버하는 데몬셋이 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">apiVersion<span class=\"token punctuation\">:</span> apps<span class=\"token operator\">/</span><span class=\"token class-name\">v1</span>\nkind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DaemonSet</span>\nmetadata<span class=\"token punctuation\">:</span>\n  name<span class=\"token punctuation\">:</span> nasa<span class=\"token operator\">-</span><span class=\"token class-name\">ds</span>\nspec<span class=\"token punctuation\">:</span>\n  selector<span class=\"token punctuation\">:</span>\n    matchLabels<span class=\"token punctuation\">:</span>\n      app<span class=\"token punctuation\">:</span> nasa<span class=\"token operator\">-</span><span class=\"token class-name\">ds</span>\n  template<span class=\"token punctuation\">:</span>\n    metadata<span class=\"token punctuation\">:</span>\n      labels<span class=\"token punctuation\">:</span>\n        app<span class=\"token punctuation\">:</span> nasa<span class=\"token operator\">-</span><span class=\"token class-name\">ds</span>\n    spec<span class=\"token punctuation\">:</span>\n      nodeSelector<span class=\"token punctuation\">:</span>\n        node<span class=\"token punctuation\">:</span> <span class=\"token class-name\">nasa</span>  \n      containers<span class=\"token punctuation\">:</span>\n      <span class=\"token operator\">-</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">nasa</span>\n        image<span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span><span class=\"token class-name\">latest</span>\n        ports<span class=\"token punctuation\">:</span>\n          <span class=\"token operator\">-</span> containerPort<span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></code></pre></div>\n<ul>\n<li>apiVersion apps/v1 → 쿠버네티스의 apps/v1 API를 사용 합니다.</li>\n<li>kind: DaemonSet → DaemonSet의 작업으로 명시 합니다.</li>\n<li>metadata.name → DaemonSet의 이름을 설정 합니다.</li>\n<li>metadata.namespace → 네임스페이스를 지정 합니다.</li>\n<li>metadata.labels → DaemonSet를 식별할 수 있는 레이블을 지정 합니다.</li>\n<li>spec.selector.matchLabels → 어떤 레이블의 파드를 선택하여 관리할 지 설정 합니다.</li>\n<li>spec.template.metadata.labels.name → 생성할 파드의 레이블을 파드명: ” ” 으로 지정 합니다.</li>\n<li>spec.template.spec.containers → 하위 옵션들은 컨테이너의 설정을 정의합니다.</li>\n</ul>\n<br/>\n<br/>\n<p>데몬 셋 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl apply <span class=\"token operator\">-</span>f nasa<span class=\"token operator\">-</span>ds<span class=\"token punctuation\">.</span>yml \ndaemonset<span class=\"token punctuation\">.</span>apps<span class=\"token operator\">/</span>nasa<span class=\"token operator\">-</span>ds created\n\n<span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> ds\nNAME      DESIRED   CURRENT   READY   UP<span class=\"token operator\">-</span>TO<span class=\"token operator\">-</span>DATE   AVAILABLE   NODE SELECTOR   AGE\nnasa<span class=\"token operator\">-</span>ds   <span class=\"token number\">0</span>         <span class=\"token number\">0</span>         <span class=\"token number\">0</span>       <span class=\"token number\">0</span>            <span class=\"token number\">0</span>           node<span class=\"token operator\">=</span>nasa       32s</code></pre></div>\n<p>시간이 충분이 지난 후에도 <code class=\"language-text\">DESIRED, CURRENT, READY</code> 탭의 값이 모두 0이다. 파드가 아예 생성되지 않는다.<br>\n이유는 정의할 때 노드 셀렉터로 node=nasa 레이블을 선택하도록 했기에 매칭되는 노드가 없으므로 아무 POD도 생성되지 않은 것이다.</p>\n<br/>\n<br/>\n<p>데몬 셋 동작을 위해 노드를 지정해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl label nodes nasa<span class=\"token operator\">-</span><span class=\"token class-name\">node1</span> node<span class=\"token operator\">=</span>nasa\nnode<span class=\"token operator\">/</span>nasa<span class=\"token operator\">-</span>node1 labeled</code></pre></div>\n<br/>\n<br/>\n<p>다시 한번 데몬 셋을 확인해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> nodes nasa<span class=\"token operator\">-</span>node1 <span class=\"token operator\">--</span>show<span class=\"token operator\">-</span>labels\nNAME         STATUS   ROLES    AGE   VERSION   LABELS\nnasa<span class=\"token operator\">-</span>node1   Ready    <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>   <span class=\"token number\">24d</span>   v1<span class=\"token punctuation\">.</span><span class=\"token number\">15.5</span>   <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span> <span class=\"token range operator\">..</span><span class=\"token range operator\">..</span> <span class=\"token punctuation\">,</span>node<span class=\"token operator\">=</span>nasa</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> daemonsets<span class=\"token punctuation\">.</span>apps \nNAME      DESIRED   CURRENT   READY   UP<span class=\"token operator\">-</span>TO<span class=\"token operator\">-</span>DATE   AVAILABLE   NODE SELECTOR   AGE\nnasa<span class=\"token operator\">-</span>ds   <span class=\"token number\">1</span>         <span class=\"token number\">1</span>         <span class=\"token number\">1</span>       <span class=\"token number\">1</span>            <span class=\"token number\">1</span>           node<span class=\"token operator\">=</span>nasa       6m1s</code></pre></div>\n<br/>\n<br/>\n<p>데몬 셋이 동작함에 의해 POD가 1개 생성 되었다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> pods\nNAME                    READY   STATUS    RESTARTS   AGE\nnasa<span class=\"token operator\">-</span>ds<span class=\"token operator\">-</span>7jsgd           <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          106s</code></pre></div>\n<br/>\n<br/>\n<p>테스트를 모두 완료했으니 NODE와 DS를 삭제한다!</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl label nodes nasa<span class=\"token operator\">-</span>node1 node<span class=\"token operator\">-</span>\nnode<span class=\"token operator\">/</span>nasa<span class=\"token operator\">-</span>node1 labeled</code></pre></div>\n<br/>\n<hr>\n<h2 id=\"-잡\" style=\"position:relative;\"><a href=\"#-%EC%9E%A1\" aria-label=\" 잡 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐱‍🏍 잡</h2>\n<p>JOB 컨트롤러는 파드의(컨테이너)의 어플리케이션(JOB) 실행이 완료되는 것에 초점을 맞춘 컨트롤러이다.<br>\n즉, 끝이 정해진 작업을 하는 어플리케이션을 잡 컨트롤러가 관리한다.<br>\n파드가 작업을 마치고 성공적으로 종료되면 잡 컨트롤러는 성공적으로 완료된 잡을 추적한다.<br>\n잡을 삭제하면 잡이 생성한 파드도 정리된다.<br>\n물론 파드가 중간에 실패하는 경우 잡 오브젝트는 새로운 파드를 가동시킨다.<br>\n잡은 임시 작업, 배치 작업에 유용하게 사용될 수  있다.</p>\n<p>​잡 컨트롤러는 RC, RS, DS처럼 계속 동작하는 방식이 아니라<br>\n재시작 정책(restartPolicy)을 기본값이 Always가 아닌 Onfailuer나 Never로 선언해야 한다.<br>\n이렇게 하면 잡 컨트롤러의 파드는 재실행되지 않는다.</p>\n<ul>\n<li>\n<p>job.spec.template.spec.restartPolicy </p>\n<ul>\n<li>Always : 종료/실패시 항상 재시작(default)</li>\n<li>Onfailure: 실패식 재시작 (정상 종료시 재시작하지 않음)</li>\n<li>Never : 종료 또는 오류 발생시 재시작하지 않음</li>\n</ul>\n</li>\n</ul>\n<br/>\n<br/>\n<p>잡 컨트롤러 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">apiVersion<span class=\"token punctuation\">:</span> batch<span class=\"token operator\">/</span><span class=\"token class-name\">v1</span>\nkind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Job</span>\nmetadata<span class=\"token punctuation\">:</span>\nname<span class=\"token punctuation\">:</span> nasa<span class=\"token operator\">-</span><span class=\"token class-name\">job</span>\nspec<span class=\"token punctuation\">:</span>\ntemplate<span class=\"token punctuation\">:</span>\n    metadata<span class=\"token punctuation\">:</span>\n    labels<span class=\"token punctuation\">:</span>\n        app<span class=\"token punctuation\">:</span> nasa<span class=\"token operator\">-</span><span class=\"token class-name\">job</span>\n    spec<span class=\"token punctuation\">:</span>\n    restartPolicy<span class=\"token punctuation\">:</span> <span class=\"token class-name\">OnFailure</span>\n    containers<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">nasa</span>\n        image<span class=\"token punctuation\">:</span> <span class=\"token class-name\">busybox</span>\n        command<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"sleep\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"60\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl apply <span class=\"token operator\">-</span>f nasa<span class=\"token operator\">-</span>jop<span class=\"token punctuation\">.</span>yml \njob<span class=\"token punctuation\">.</span>batch<span class=\"token operator\">/</span>nasa<span class=\"token operator\">-</span>job created</code></pre></div>\n<br/>\n<br/>\n<p>잡 컨트롤러를 확인해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> job<span class=\"token punctuation\">.</span>batch\nNAME       COMPLETIONS   DURATION   AGE\nnasa<span class=\"token operator\">-</span>job   <span class=\"token number\">0</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>           33s        33s\n\n\n<span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> pods\nNAME             READY   STATUS    RESTARTS   AGE\nnasa<span class=\"token operator\">-</span>job<span class=\"token operator\">-</span>84s8x   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Running   <span class=\"token number\">0</span>          40s</code></pre></div>\n<br/>\n<br/>\n<p>하나의 파드가 있고 아직 잡이 완료되지 않아서 COMPLETIONS에 0/1이라고 표기된다.<br>\n파드는 정상 동작중이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> job<span class=\"token punctuation\">.</span>batch\nNAME       COMPLETIONS   DURATION   AGE\nnasa<span class=\"token operator\">-</span>job   <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>           64s        104s\n<span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># \n\n\n<span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> pods\nNAME             READY   STATUS      RESTARTS   AGE\nnasa<span class=\"token operator\">-</span>job<span class=\"token operator\">-</span>84s8x   <span class=\"token number\">0</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Completed   <span class=\"token number\">0</span>          107s</code></pre></div>\n<p>잠시 후에 파드를 다시 확인 해보니 STATUS가 Completed로 표기되고  </p>\n<p>잡 컨트롤러에서도 확인해보니 COMPLETIONS가 1/1로 바뀌었다.<br>\n잡이 완료되었음을 알 수 있다.</p>\n<br/>\n<br/>\n<p>다중 잡 컨트롤러</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">spec<span class=\"token punctuation\">:</span>\ncompletions<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span></code></pre></div>\n<p><code class=\"language-text\">completions: 3</code> 설정만 YAML 파일에 추가해주면 여러 번의 작업을 값만 큼 순차적으로 실행한다.<br>\n하나의 파드가 생성되어 잡이 실행되고 완료되면 두 번째 파드가 생성되고 완료되고 ,<br>\n그 다음 파드가 생성되고 완료되기를 지정된 횟수만큼 반복하는 것이다.</p>\n<br/>\n<br/>\n<p>병렬 다중 잡 컨트롤러</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">spec<span class=\"token punctuation\">:</span>\ncompletions<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\nparallelism<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span></code></pre></div>\n<p>병렬로 처리하기 위해서는 <code class=\"language-text\">parallelism: 3</code> 설정을 추가해주면 된다<br>\n그럼 3개의 3이 동시에 3번의 작업을 진행한다!!</p>\n<br/>\n<hr>\n<h2 id=\"-크론잡\" style=\"position:relative;\"><a href=\"#-%ED%81%AC%EB%A1%A0%EC%9E%A1\" aria-label=\" 크론잡 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎶 크론잡</h2>\n<p>잡 컨트롤러에서 잡을 실행하는 목적은 끝이 있는 작업을 하는 어플리케이션 때문이다.<br>\n크론잡은 이름에서 알 수 있듯이 주기적으로 반복된 작업을 하며,<br>\n그 작업이 시작과 끝이 있는 작업일 때 사용한다. <code class=\"language-text\">리눅스의 crontab과 같다.</code>  </p>\n<br/>\n<br/>\n<p>이론 보다는 실습!! 바로 크론잡을 생성해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">apiVersion<span class=\"token punctuation\">:</span> batch<span class=\"token operator\">/</span><span class=\"token class-name\">v1beta1</span>\nkind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CronJob</span>\nmetadata<span class=\"token punctuation\">:</span>\nname<span class=\"token punctuation\">:</span> hello <span class=\"token class-name\">World</span>\nspec<span class=\"token punctuation\">:</span>\nschedule<span class=\"token punctuation\">:</span> <span class=\"token string\">\"*/1 * * * *\"</span>\njobTemplate<span class=\"token punctuation\">:</span>\n    spec<span class=\"token punctuation\">:</span>\n    template<span class=\"token punctuation\">:</span>\n        spec<span class=\"token punctuation\">:</span>\n        containers<span class=\"token punctuation\">:</span>\n        <span class=\"token operator\">-</span> name<span class=\"token punctuation\">:</span> hello <span class=\"token class-name\">World</span>\n            image<span class=\"token punctuation\">:</span> <span class=\"token class-name\">busybox</span>\n            args<span class=\"token punctuation\">:</span>\n            <span class=\"token operator\">-</span> <span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>sh\n            <span class=\"token operator\">-</span> <span class=\"token operator\">-</span>c\n            <span class=\"token operator\">-</span> date<span class=\"token punctuation\">;</span> echo Hello NASA<span class=\"token operator\">!</span> <span class=\"token keyword\">from</span> the Kubernetes <span class=\"token class-name\">cluster</span>\n        restartPolicy<span class=\"token punctuation\">:</span> OnFailure</code></pre></div>\n<br/>\n<p>가장 중요한 부분은 스케줄 필드로, cronjob.spec.schedule 필드를 사용해 주기적인 시간을 구성한다.<br>\n스케줄을 구성하는 값은 다섯 개의 필드로 구분되어 다음과 같은 순서이다.</p>\n<p><code class=\"language-text\">그냥 리눅스랑 똑같다!</code></p>\n<ul>\n<li>분</li>\n<li>시</li>\n<li>일</li>\n<li>월</li>\n<li>요일(0 : 일요일, 1: 월요일, 6: 토요일)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl apply <span class=\"token operator\">-</span>f nasa<span class=\"token operator\">-</span>cron<span class=\"token punctuation\">.</span>yml \ncronjob<span class=\"token punctuation\">.</span>batch<span class=\"token operator\">/</span>hello created</code></pre></div>\n<br/>\n<br/>\n<p>생성 후 크론 잡 컨트롤러 및 파드 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> cronjobs<span class=\"token punctuation\">.</span>batch\nNAME    SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE\nhello   <span class=\"token operator\">*</span><span class=\"token operator\">/</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token operator\">*</span> <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>   False     <span class=\"token number\">0</span>        <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>          28s</code></pre></div>\n<br/>\n<br/>\n<p>최초 생성된 직후 ACTIVE 상태의 잡은 없다.  마지막으로 동작한 LAST SCHEDULE도 없다.<br>\n잠시 기다린 후에 다시 조회해보면 다음과 같이 변한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> cronjobs<span class=\"token punctuation\">.</span>batch\nNAME    SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE\nhello   <span class=\"token operator\">*</span><span class=\"token operator\">/</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token operator\">*</span> <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>   False     <span class=\"token number\">1</span>        10s             <span class=\"token number\">4m</span></code></pre></div>\n<br/>\n<br/>\n<p>파드를 조회해보면 다음과 같다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span><span class=\"token class-name\">master</span> nasa<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> po\n\\NAME                     READY   STATUS      RESTARTS   AGE\nhello<span class=\"token operator\">-</span><span class=\"token number\">1600331820</span><span class=\"token operator\">-</span>5jmd4   <span class=\"token number\">0</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Completed   <span class=\"token number\">0</span>          2m36s\nhello<span class=\"token operator\">-</span><span class=\"token number\">1600331880</span><span class=\"token operator\">-</span>jhs6s   <span class=\"token number\">0</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Completed   <span class=\"token number\">0</span>          96s\nhello<span class=\"token operator\">-</span><span class=\"token number\">1600331940</span><span class=\"token operator\">-</span>kkzwh   <span class=\"token number\">0</span><span class=\"token operator\">/</span><span class=\"token number\">1</span>     Completed   <span class=\"token number\">0</span>          36s</code></pre></div>\n<br/>\n<hr>\n<h3 id=\"크론잡-컨트롤러의-제한사항\" style=\"position:relative;\"><a href=\"#%ED%81%AC%EB%A1%A0%EC%9E%A1-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC%EC%9D%98-%EC%A0%9C%ED%95%9C%EC%82%AC%ED%95%AD\" aria-label=\"크론잡 컨트롤러의 제한사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>크론잡 컨트롤러의 제한사항</h3>\n<p>크론잡 컨트롤러는 일정 실행시간마다 하나의 잡 오브젝트를 생성한다.<br>\n특정한 상황에서는 하나가 아닌 여러 개의 잡이 생성되는 경우도 있다.<br>\n이러한 상황을 제어하기 위해서 크론잡 컨트롤러에서는 잡의 제한사항을 지정할 수 있다.</p>\n<p>​</p>\n<ul>\n<li><code class=\"language-text\">cronjob.spec.startingDeadlineSeconds</code> : 시작 데드라인 시간<br>\n어떤 이유든 예정된 시간에 잡을 시작해야 하는 데드라인.<br>\n초단위로 입력해서 현재로부터 n초 안에 일정을 놓친 잡이 있는지 확인.</li>\n</ul>\n<p>​</p>\n<ul>\n<li>\n<p><code class=\"language-text\">cronjob.spec.concurrrencyPolicy</code> : 동시 실행 정책  </p>\n<ul>\n<li>Allow: 잡이 동시 실행될 수 있음(default)</li>\n<li>Forbid: 동시 실행 금지. 잡이 아직 완료되지 않은 경우 다음 잡을 건너 뜀.</li>\n<li>Replace: 현재 실행중인 잡을 취소하고 새 잡으로 교체  </li>\n</ul>\n<p>위 설정들을 쉽게 예를 들어보자면<br>\nstartingDeadlineSeconds가 100초이고, concurrencyPolicy가 Allow이면<br>\n이전에 놓친 잡이 있으면 해당 잡을 실행하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">spec<span class=\"token punctuation\">:</span>\nschedule<span class=\"token punctuation\">:</span> <span class=\"token string\">\"*/1 * * * *\"</span>\nstartingDeadlineSeconds<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\nconcurrencyPolicy<span class=\"token punctuation\">:</span> Forbid</code></pre></div>\n</li>\n</ul>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%8B%88%EC%8A%A4-%ED%94%84%EB%A1%9C%EB%B8%8C\">✔ 라이브니스 프로브</a></p>\n<ul>\n<li><a href=\"#%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%8B%88%EC%8A%A4-%ED%94%84%EB%A1%9C%EB%B8%8C-%EC%83%9D%EC%84%B1\">라이브니스 프로브 생성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%A0%88%ED%94%8C%EB%A6%AC%EC%B9%B4%EC%85%8B\">✌ 레플리카셋</a></p>\n<ul>\n<li><a href=\"#%EB%A0%88%ED%94%8C%EB%A6%AC%EC%B9%B4%EC%85%8B-%EC%83%9D%EC%84%B1\">레플리카셋 생성</a></li>\n<li><a href=\"#%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC\">동작 원리</a></li>\n</ul>\n</li>\n<li><a href=\"#-%EB%8D%B0%EB%AA%AC%EC%85%8B\">👀 데몬셋</a></li>\n<li><a href=\"#-%EC%9E%A1\">🐱‍🏍 잡</a></li>\n<li>\n<p><a href=\"#-%ED%81%AC%EB%A1%A0%EC%9E%A1\">🎶 크론잡</a></p>\n<ul>\n<li><a href=\"#%ED%81%AC%EB%A1%A0%EC%9E%A1-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC%EC%9D%98-%EC%A0%9C%ED%95%9C%EC%82%AC%ED%95%AD\">크론잡 컨트롤러의 제한사항</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 29, 2021","title":"[Kubernetes] - 쿠버네티스의 컨트롤러","categories":"Kubernetes","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/kubernetes-controller/"}},"prev":{"id":"624b3182-5fe2-5d6a-9dad-741527689b4e","html":"<p>머리말  </p>\n<p> 이번 포스트에서는 쿠버네틱스의 볼륨에 대해서 알아보자.</p>\n<hr>\n<h2 id=\"-쿠버네티스의-볼륨\" style=\"position:relative;\"><a href=\"#-%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4%EC%9D%98-%EB%B3%BC%EB%A5%A8\" aria-label=\" 쿠버네티스의 볼륨 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ 쿠버네티스의 볼륨</h2>\n<p>파드의 컨테이너는 이미지로부터 파일시스템을 제공받는다.<br>\n그러나 파드가 종료되면 파드 내의 <code class=\"language-text\">데이터(파일)</code>은 더 이상 사용 할 수 없게 된다.  </p>\n<p>컨트롤러에 의해 새로운 파드가 생성이 되면 이미지로 부터 새로운 파일 시스템을 제공받는다.<br>\n즉 컨테이너는 기본적으로 데이터를 유지하지 않으며, 이런 형태를 <code class=\"language-text\">상태가 없다(Stateless)</code> 라고 한다.</p>\n<p>파드는 새로 생성된 데이터를 보존하기 위해 <code class=\"language-text\">외부 저장소 볼륨</code>을 생성하고 이런 볼륨을 컨테이너에 <code class=\"language-text\">마운트</code>해서 사용한다.<br>\n볼륨은 여러 파드에서 <code class=\"language-text\">동시</code>에 접근이 가능하다.</p>\n<p>기본적인 볼륨의 <code class=\"language-text\">라이프사이클</code>은 파드의 <code class=\"language-text\">라이프사이클</code>과 같다. 파드가 생성되고 삭제됨에 따라 볼륨도 같이 생성되고 삭제된다.<br>\n그러나 파드가 재 시작되면 볼륨의 데이터는 삭제되지 않고 유지되며, 재시작 된 파드에게 해당 볼륨의 데이터를 다시 제공해준다.  </p>\n<p>그러나 새로 도입된 <code class=\"language-text\">PersistentVolume</code>, <code class=\"language-text\">PersistentVloumeClaim</code>을 사용하며 볼륨만의 라이프 사이클은 분리 할 수 있게 되어<br>\n파드의 로직과 별도로 <code class=\"language-text\">볼륨(스토리지)</code>을 사용 할 수 있게 되었다.</p>\n<br/>\n<hr>\n<h2 id=\"-pv-pvc\" style=\"position:relative;\"><a href=\"#-pv-pvc\" aria-label=\" pv pvc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✌ PV, PVC</h2>\n<h3 id=\"persistentvolume-pv\" style=\"position:relative;\"><a href=\"#persistentvolume-pv\" aria-label=\"persistentvolume pv permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(PersistentVolume, PV)</h3>\n<p>쿠버네티스에서 볼륨을 사용하는 구조는 2개로 분리되어 있습니다. PV는 볼륨 자체를 의미합니다.<br>\n클러스터내에서 리소스로 다뤄집니다. POD 하고는 별개로 관리되고 별도의 생명주기를 가지고 있습니다.  </p>\n<br/>\n<h3 id=\"persistentvolumeclaim-pvc\" style=\"position:relative;\"><a href=\"#persistentvolumeclaim-pvc\" aria-label=\"persistentvolumeclaim pvc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(PersistentVolumeClaim, PVC)</h3>\n<p>PVC는 사용자가 PV에 하는 요청입니다.<br>\n사용하고 싶은 용량은 얼마인지 읽기/쓰기는 어떤 모드로 설정하고 싶은지 등을 정해서 요청합니다.  </p>\n<br/>\n<h3 id=\"내용\" style=\"position:relative;\"><a href=\"#%EB%82%B4%EC%9A%A9\" aria-label=\"내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내용</h3>\n<p>쿠버네티스는 볼륨을 포드에 직접할당하는 방식이 아니라 이렇게 중간에 PVC를 둠으로써 POD와 스토리지를 분리했습니다.<br>\n이런 구조는 각자의 상황에 맞게 다양한 스토리지를 사용할 수 있게 해줍니다.<br>\n클라우드 서비스를 사용하는 경우에는 본인이 사용하는 클라우드 서비스에서 제공해주는 볼륨 서비스를 사용할 수도 있고,<br>\n사설로 직접 구축해서 사용중인 스토리지가 있다면 그걸 사용할 수도 있습니다.<br>\n이렇게 다양한 스토리지를 PV로 사용할 수 있지만 포드에 직접 연결하는게 아니라<br>\nPVC를 통해서 사용하기 때문에 포드는 자신이 어떤 스토리지를 사용하는지 신경쓰지 않아도 됩니다.</p>\n<br/>\n<hr>\n<h2 id=\"-pv-pvc-생명주기\" style=\"position:relative;\"><a href=\"#-pv-pvc-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0\" aria-label=\" pv pvc 생명주기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍 PV, PVC 생명주기</h2>\n<p>PV-PVC의 로직은 다음 그림에서 보이는 것 같은 로직입니다.<br>\n<img src=\"https://user-images.githubusercontent.com/69498804/90230067-f4447380-de53-11ea-8205-814fa67be805.png\" alt=\"스크린샷, 2020-08-14 17-30-59\"></p>\n<br/>\n<p>PV와 PVC는 다음 그림에서 보이는 것 같은 생명주기를 가집니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/90209833-5470f080-de27-11ea-813a-45442d6dd942.png\" alt=\"스크린샷, 2020-08-14 12-11-40\"></p>\n<h3 id=\"프로비저닝provisioning\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EB%B9%84%EC%A0%80%EB%8B%9Dprovisioning\" aria-label=\"프로비저닝provisioning permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로비저닝(Provisioning)</h3>\n<p>PV를 사용하기 위해선 먼저 PV가 만들어져 있어야 합니다.<br>\n이 PV를 만드는 단계를 <code class=\"language-text\">프로비저닝</code>이라고 합니다.  </p>\n<p>PV 프로비저닝 방법에는 2가지가 있습니다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">정적(static)</code> : PV를 미리 만들어두고 사용한다.  </p>\n<p>정적으로 PV를 준비한다는건 클러스터 관리자가 미리 적정용량의 PV를 만들어 두고<br>\n사용자들의 요청이 있으면 미리 만들어둔 PV를 할당해 주는 방식입니다.<br>\n사용할 수 있는 스토리지 용량에 제한이 있을 때 유용하게 사용할 수 있는 방법입니다.<br>\n사용자들에게 미리 만들어둔 PV의 용량이 100기가라면 150기가를 사용요청들은 실패하게 됩니다.<br>\n큰 용량 스토리지를 사용한다고 해도 만들어둔 PV의 용량이 150기가이상 되는 것이 없다면 요청이 실패하게 됩니다.  </p>\n</li>\n<li>\n<p><code class=\"language-text\">동적(dynamic)</code> : 요청이 있을때마다 PV를 만드는 방법.</p>\n<p>동적으로 PV를 준비하는건 미리 PV를 준비해두는 것이 아니고<br>\n사용자가 PVC를 통해서 요청을 했을때 PV를 생성해서 제공해 주는 방식입니다.<br>\n쿠버네티스 클러스터를 위해 1테라짜리 스토리지를 준비해 뒀다고 하면<br>\n사용자가 필요할 때 원하는 용량만큼을 생성해서 사용할 수 있습니다.<br>\n정적 PV생성과 달리 한번에 200기가 짜리도 필요하면 만들어 쓸 수 있습니다.<br>\n동적 프로비저닝을 위해서 PVC는 <code class=\"language-text\">스토리지클래스(StorageClasses)</code>를 사용합니다.<br>\n스토리지클래스를 이용해서 원하는 스토리지에 PV를 생성합니다.</p>\n</li>\n</ul>\n<br/>\n<br/>\n<h3 id=\"바인딩binding\" style=\"position:relative;\"><a href=\"#%EB%B0%94%EC%9D%B8%EB%94%A9binding\" aria-label=\"바인딩binding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>바인딩(Binding)</h3>\n<ul>\n<li>PV를 PVC에 연결시키는 단계 입니다.  </li>\n<li>PVC는 사용자가 요청하는 볼륨을 PV에 요청하고 PV는 그에 맞는 볼륨이 있으면 할당해주게 됩니다.  </li>\n<li>만약 PVC가 요청하는 볼륨이 PV에 없다면 해당 요청은 무한정 남아있게 되고,<br>\nPVC가 요청하는 볼륨이 PV에 생성되면 그 요청은 받아들여져 할당해주게 됩니다.</li>\n<li>PVC와 PV는 ClaimRef를 사용하는 1:1 관계이며 바인딩이 정상적으로 완료될 경우 bound 상태가 됩니다.</li>\n</ul>\n<br/>\n<br/>\n<h3 id=\"사용-using\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9-using\" aria-label=\"사용 using permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용 (using)</h3>\n<ul>\n<li>Pod는 PVC를 볼륨으로 사용 합니다.<br>\n클러스터는 PVC를 확인하여 바인딩된 PV를 찾고 해당 볼륨을 Pod에서 사용할 수 있도록 해줍니다.</li>\n<li>만약 Pod가 사용중인 PVC를 삭제하려고 하면 Storage Object in Use Protection에 의해 삭제되지 않습니다.<br>\n만약 삭제 요청을 하였다면 Pod가 PVC를 사용하지 않을때까지 삭제 요청은 연기 됩니다.</li>\n</ul>\n<br/>\n<br/>\n<h3 id=\"회수-reclamiming\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EC%88%98-reclamiming\" aria-label=\"회수 reclamiming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회수 (Reclamiming)</h3>\n<ul>\n<li>\n<p>PV는 기존에 사용했던 PVC가 아니더라도 다른 PVC로 재활용이 가능 합니다.<br>\n때문에 사용이 종료된 PVC를 삭제할 때, 사용했던 PV의 데이터를 어떻게 처리할지에 대한 설정을 하게 됩니다.</p>\n<ul>\n<li><code class=\"language-text\">Retain</code> : PV의 데이터를 그대로 보존 합니다.</li>\n<li><code class=\"language-text\">Recycle</code> : 재사용하게될 경우 기존의 PV 데이터들을 모두 삭제 후 재사용 합니다.</li>\n<li><code class=\"language-text\">Delete</code> : 사용이 종료되면 해당 볼륨을 삭제 합니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"-pv-pvc-생성\" style=\"position:relative;\"><a href=\"#-pv-pvc-%EC%83%9D%EC%84%B1\" aria-label=\" pv pvc 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐱‍🏍 PV, PVC 생성</h2>\n<h3 id=\"pv-생성\" style=\"position:relative;\"><a href=\"#pv-%EC%83%9D%EC%84%B1\" aria-label=\"pv 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PV 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">apiVersion<span class=\"token punctuation\">:</span> <span class=\"token class-name\">v1</span>\nkind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">PersistentVolume</span>\nmetadata<span class=\"token punctuation\">:</span>\nname<span class=\"token punctuation\">:</span> dev<span class=\"token operator\">-</span><span class=\"token class-name\">pv</span>\nspec<span class=\"token punctuation\">:</span>\ncapacity<span class=\"token punctuation\">:</span>\n    storage<span class=\"token punctuation\">:</span> 2Gi\nvolumeMode<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Filesystem</span>\naccessModes<span class=\"token punctuation\">:</span>\n<span class=\"token operator\">-</span> <span class=\"token class-name\">ReadWriteOnce</span>\nstorageClassName<span class=\"token punctuation\">:</span> <span class=\"token class-name\">manual</span>\npersistentVolumeReclaimPolicy<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Delete</span>\nhostPath<span class=\"token punctuation\">:</span>\n    path<span class=\"token punctuation\">:</span> <span class=\"token operator\">/</span>tmp<span class=\"token operator\">/</span>log_backup</code></pre></div>\n<ul>\n<li><code class=\"language-text\">path</code>: /tmp/log_backup</li>\n<li><code class=\"language-text\">spec.capacity.storage</code> → 사용할 용량을 2GB로 설정 합니다.</li>\n<li><code class=\"language-text\">spec.volumeMode</code> → 볼륨을 Filesystem으로 사용 합니다.</li>\n<li><code class=\"language-text\">spec.accessModes</code> → Pod의 접근 제어를 합니다.</li>\n<li><code class=\"language-text\">ReadWriteOnce</code> : 하나의 Pod에서만 읽고 쓸 수 있습니다.</li>\n<li><code class=\"language-text\">ReadOnlyMany</code> : 여러개의 Pod에서 읽을 수 있습니다.</li>\n<li><code class=\"language-text\">ReadWriteMany</code> : 여러개의 Pod에서 읽고 쓸 수 있습니다.</li>\n<li><code class=\"language-text\">spec.storageClassName</code> → 스토리지 클래스를 지정, 클래스에 맞는 PVC와 연결</li>\n<li><code class=\"language-text\">spec.persistentVolumeReclaimPolicy</code> → Delete는 볼륨의 사용이 종료되면 볼륨을 삭제 합니다. 회수 단계에서 설명한 필드</li>\n<li><code class=\"language-text\">hostPath</code> → 노드에 저장되는 디렉토리를 설정 합니다.</li>\n</ul>\n<br/>\n<p><code class=\"language-text\">accessModes</code>는 볼륨의 읽기/쓰기에 관한 옵션을 지정합니다.<br>\n볼륨은 한번에 하나의 accessModes만 설정할 수 있고 다음 3가지중 하나를 지정할 수 있습니다.  </p>\n<ul>\n<li><code class=\"language-text\">ReadWriteOnce</code> : 하나의 노드가 볼륨을 읽기/쓰기 가능하게 마운트할 수 있음.</li>\n<li><code class=\"language-text\">ReadOnlyMany</code> : 여러개의 노드가 읽기 전용으로 마운트할 수 있음.</li>\n<li><code class=\"language-text\">ReadWriteMany</code> : 여러개의 노드가 읽기/쓰기 가능할게 마운트할 수 있음</li>\n</ul>\n<br/>\n<br/>\n<p>해당 파일로 생성 후 정상 PV 확인  - 아직 PVC가 생성이 되지 않아 <code class=\"language-text\">STATUS</code>가 <code class=\"language-text\">Available</code>임.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/90222701-914cdf80-de47-11ea-9243-f774920b9047.png\" alt=\"스크린샷, 2020-08-14 16-02-05\"></p>\n<p><code class=\"language-text\">pv</code>의 상태는 <code class=\"language-text\">Available</code>을 포함해서 다음 4가지가 있습니다.  </p>\n<ul>\n<li>Available : PVC에서 사용할 수 있게 준비된 상태</li>\n<li>Bound : 특정 PVC에 연결된 상태</li>\n<li>Released : PVC는 삭제된 상태이고 PV는 아직 초기화되지 않은 상태</li>\n<li>Failed : 자동 초기화가 실패한 상태</li>\n</ul>\n<br/>\n<br/>\n<h3 id=\"pvc-생성\" style=\"position:relative;\"><a href=\"#pvc-%EC%83%9D%EC%84%B1\" aria-label=\"pvc 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PVC 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">apiVersion<span class=\"token punctuation\">:</span> <span class=\"token class-name\">v1</span>\nkind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">PersistentVolumeClaim</span>\nmetadata<span class=\"token punctuation\">:</span>\nname<span class=\"token punctuation\">:</span> dev<span class=\"token operator\">-</span><span class=\"token class-name\">pvc</span>\nspec<span class=\"token punctuation\">:</span>\naccessModes<span class=\"token punctuation\">:</span>\n<span class=\"token operator\">-</span> <span class=\"token class-name\">ReadWriteOnce</span>\nvolumeMode<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Filesystem</span>\nresources<span class=\"token punctuation\">:</span>\n    requests<span class=\"token punctuation\">:</span>\n    storage<span class=\"token punctuation\">:</span> 1Gi\nstorageClassName<span class=\"token punctuation\">:</span> manual</code></pre></div>\n<ul>\n<li><code class=\"language-text\">accessModes</code>: (PV와 동일) 어떤 모드로 연결할지 지정합니다. [ReadWriteOnce, ReadOnlyMany, ReadWriteMany] 등</li>\n<li><code class=\"language-text\">volumeMode</code>: PV와 동일) 파일시스템인지 블록 디바이스인지를 filesystem, raw등을 통해 설정할 수 있습니다.  </li>\n<li><code class=\"language-text\">resources</code>: 얼만큼의 자원을 사용할 것인지에 대한 요청(request)을 입력합니다. (여기서는 1기가를 요청했습니다)<br>\n앞에서 만들어둔 PV의 용량이 2기가였기 때문에 현재 PVC에서 사용할 수 있습니다.<br>\n만약에 PVC가 requests의 storage에 2기가 이상의 용량을 입력했다면 거기에 맞는 PV가 없어 PVC는 Pending상태로 남습니다. </li>\n<li><code class=\"language-text\">storageClassName</code>: 사용할 스토리지클래스를 명시해 줍니다.</li>\n</ul>\n<br/>\n<br/>\n<p>*해당 파일로 생성 후 정상 PV,PVC 확인<br>\nPV &#x3C;-> PVC가 연결되어 <code class=\"language-text\">STATUS</code>가 <code class=\"language-text\">BOUND</code>로 바뀐 것을 확인.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/90222946-07e9dd00-de48-11ea-8191-1df12fc5beae.png\" alt=\"스크린샷, 2020-08-14 16-05-48\"></p>\n<br/>\n<br/>\n<p><code class=\"language-text\">PVC 를 사용할 DEP 생성 후 확인</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">apiVersion<span class=\"token punctuation\">:</span> apps<span class=\"token operator\">/</span><span class=\"token class-name\">v1</span>\nkind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Deployment</span>\nmetadata<span class=\"token punctuation\">:</span>\nname<span class=\"token punctuation\">:</span> test<span class=\"token operator\">-</span><span class=\"token class-name\">deployment</span>\nlabels<span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">:</span> test<span class=\"token operator\">-</span><span class=\"token class-name\">deployment</span>\nspec<span class=\"token punctuation\">:</span>\nreplicas<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\nselector<span class=\"token punctuation\">:</span>\n    matchLabels<span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">:</span> test<span class=\"token operator\">-</span><span class=\"token class-name\">deployment</span>\ntemplate<span class=\"token punctuation\">:</span>\n    metadata<span class=\"token punctuation\">:</span>\n    labels<span class=\"token punctuation\">:</span>\n        app<span class=\"token punctuation\">:</span> test<span class=\"token operator\">-</span><span class=\"token class-name\">deployment</span>\n    spec<span class=\"token punctuation\">:</span>\n    containers<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span> name<span class=\"token punctuation\">:</span> test<span class=\"token operator\">-</span><span class=\"token class-name\">deployment</span>\n        image<span class=\"token punctuation\">:</span> <span class=\"token class-name\">nginx</span>\n        ports<span class=\"token punctuation\">:</span>\n        <span class=\"token operator\">-</span> containerPort<span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n        volumeMounts<span class=\"token punctuation\">:</span>\n        <span class=\"token operator\">-</span> mountPath<span class=\"token punctuation\">:</span> <span class=\"token string\">\"/var/log/test.log\"</span>\n        name<span class=\"token punctuation\">:</span> dev<span class=\"token operator\">-</span><span class=\"token class-name\">volume</span>\n    volumes<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span> name<span class=\"token punctuation\">:</span> dev<span class=\"token operator\">-</span><span class=\"token class-name\">volume</span>\n        persistentVolumeClaim<span class=\"token punctuation\">:</span>\n        claimName<span class=\"token punctuation\">:</span> dev<span class=\"token operator\">-</span>pvc    <span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>pvc 의 이름을 입력</code></pre></div>\n<ul>\n<li><code class=\"language-text\">spec.template.spec.containers.volumeMounts</code>: 볼륨 마운트할 컨테이너 안의 경로를 작성하고<br>\n이 경로를 저장한 볼륨 마운트 정보를 dev-volume 이라는 이름으로 지정합니다.  </li>\n<li><code class=\"language-text\">spec.template.spec.volumes</code>: 위에 작성한 컨테이너에서 사용할 볼륨 마운트 이름(dev-volume)을 가져오고<br>\n이 정보와 연결 요청을 보낼 pvc를 2번에서 생성한 <code class=\"language-text\">dev-pvc</code>로 지정 합니다.</li>\n</ul>\n<br/>\n<br/>\n<h3 id=\"파일-생성-테스트\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"파일 생성 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일 생성 테스트</h3>\n<p><code class=\"language-text\">MASTER</code> 서버의 PV-PATH 경로에 다음과 같은 파일을 만들었었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">vagrant@kube<span class=\"token operator\">-</span>master1<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span><span class=\"token operator\">/</span>wonseok$ ls <span class=\"token operator\">-</span>alrt <span class=\"token operator\">/</span>pv<span class=\"token operator\">-</span>pvc<span class=\"token operator\">/</span>pv<span class=\"token operator\">-</span>pvc<span class=\"token operator\">-</span>test<span class=\"token punctuation\">.</span>txt\n<span class=\"token operator\">-</span>rw<span class=\"token operator\">-</span>r<span class=\"token operator\">--</span>r<span class=\"token operator\">--</span> <span class=\"token number\">1</span> root root <span class=\"token number\">12</span> Aug <span class=\"token number\">14</span> <span class=\"token number\">07</span><span class=\"token punctuation\">:</span><span class=\"token number\">35</span> <span class=\"token operator\">/</span>pv<span class=\"token operator\">-</span>pvc<span class=\"token operator\">/</span>pv<span class=\"token operator\">-</span>pvc<span class=\"token operator\">-</span>test<span class=\"token punctuation\">.</span>txt\nvagrant@kube<span class=\"token operator\">-</span>master1<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span><span class=\"token operator\">/</span>wonseok$ cat <span class=\"token operator\">/</span>pv<span class=\"token operator\">-</span>pvc<span class=\"token operator\">/</span>pv<span class=\"token operator\">-</span>pvc<span class=\"token operator\">-</span>test<span class=\"token punctuation\">.</span>txt \nPV<span class=\"token operator\">-</span>PVC<span class=\"token operator\">-</span>TEST\nvagrant@kube<span class=\"token operator\">-</span>master1<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span><span class=\"token operator\">/</span>wonseok$ </code></pre></div>\n<br/>\n<br/>\n \n새로 만들어진 PODS에 ``/home/pv-pvs`` 디렉토리가 자동 생성되었고  \n    ``pv-pvc-txt`` 파일의 내용도 들어있는 것을 확인.\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">vagrant@kube<span class=\"token operator\">-</span>master1<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span><span class=\"token operator\">/</span>wonseok$ kubectl exec <span class=\"token operator\">-</span>it pod<span class=\"token operator\">/</span>nasa1515<span class=\"token operator\">-</span>deployment<span class=\"token operator\">-</span>b664c7ff5<span class=\"token operator\">-</span>jh677 bas\n\nroot@nasa1515<span class=\"token operator\">-</span>deployment<span class=\"token operator\">-</span>b664c7ff5<span class=\"token operator\">-</span>jh677<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span># ls <span class=\"token operator\">-</span>lart <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>pv<span class=\"token operator\">-</span>pvs\ntotal <span class=\"token number\">12</span>\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x <span class=\"token number\">2</span> root root <span class=\"token number\">4096</span> Aug <span class=\"token number\">14</span> <span class=\"token number\">07</span><span class=\"token punctuation\">:</span><span class=\"token number\">33</span> <span class=\"token punctuation\">.</span>\n<span class=\"token operator\">-</span>rw<span class=\"token operator\">-</span>r<span class=\"token operator\">--</span>r<span class=\"token operator\">--</span> <span class=\"token number\">1</span> root root   <span class=\"token number\">12</span> Aug <span class=\"token number\">14</span> <span class=\"token number\">07</span><span class=\"token punctuation\">:</span><span class=\"token number\">33</span> pv<span class=\"token operator\">-</span>pvc<span class=\"token punctuation\">.</span>txt\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x <span class=\"token number\">1</span> root root <span class=\"token number\">4096</span> Aug <span class=\"token number\">14</span> <span class=\"token number\">07</span><span class=\"token punctuation\">:</span><span class=\"token number\">43</span> <span class=\"token range operator\">..</span>\nroot@nasa1515<span class=\"token operator\">-</span>deployment<span class=\"token operator\">-</span>b664c7ff5<span class=\"token operator\">-</span>jh677<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span># \nroot@nasa1515<span class=\"token operator\">-</span>deployment<span class=\"token operator\">-</span>b664c7ff5<span class=\"token operator\">-</span>jh677<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span># cat <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>pv<span class=\"token operator\">-</span>pvs<span class=\"token operator\">/</span>pv<span class=\"token operator\">-</span>pvc<span class=\"token punctuation\">.</span>txt\nPV<span class=\"token operator\">-</span>PVC TEST</code></pre></div>\n<br/>\n<br/>\n<p>PV와 PVC는 파드와 서비스를 연결할 때처럼 레이블 / 셀렉터를 사용할 수도 있다.</p>\n<p>PV</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">apiVersion<span class=\"token punctuation\">:</span> <span class=\"token class-name\">v1</span>\nkind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">PersistentVolume</span>\nmetadata<span class=\"token punctuation\">:</span>\nname<span class=\"token punctuation\">:</span> pv<span class=\"token operator\">-</span>hostpath<span class=\"token operator\">-</span><span class=\"token class-name\">label</span>\nlabels<span class=\"token punctuation\">:</span>\n    location<span class=\"token punctuation\">:</span> local             <span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token class-name\">local</span>\nspec<span class=\"token punctuation\">:</span>\ncapacity<span class=\"token punctuation\">:</span>\n    storage<span class=\"token punctuation\">:</span> 2Gi\nvolumeMode<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Filesystem</span>\naccessModes<span class=\"token punctuation\">:</span>\n<span class=\"token operator\">-</span> <span class=\"token class-name\">ReadWriteOnce</span>\nstorageClassName<span class=\"token punctuation\">:</span> <span class=\"token class-name\">manual</span>\npersistentVolumeReclaimPolicy<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Delete</span>\nhostPath<span class=\"token punctuation\">:</span>\n    path<span class=\"token punctuation\">:</span> <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>nasa1515</code></pre></div>\n<br/>\n<br/>\n<p>PVC</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">kind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">PersistentVolumeClaim</span>\napiVersion<span class=\"token punctuation\">:</span> <span class=\"token class-name\">v1</span>\nmetadata<span class=\"token punctuation\">:</span>\nname<span class=\"token punctuation\">:</span> pvc<span class=\"token operator\">-</span>hostpath<span class=\"token operator\">-</span><span class=\"token class-name\">label</span>\nspec<span class=\"token punctuation\">:</span>\naccessModes<span class=\"token punctuation\">:</span>\n<span class=\"token operator\">-</span> <span class=\"token class-name\">ReadWriteOnce</span>\nvolumeMode<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Filesystem</span>\nresources<span class=\"token punctuation\">:</span>\n    requests<span class=\"token punctuation\">:</span>\n    storage<span class=\"token punctuation\">:</span> 1Gi\nstorageClassName<span class=\"token punctuation\">:</span> <span class=\"token class-name\">manual</span>\nselector<span class=\"token punctuation\">:</span>\n    matchLabels<span class=\"token punctuation\">:</span>\n    location<span class=\"token punctuation\">:</span> local            <span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>local</code></pre></div>\n<br/>\n<hr>\n<h2 id=\"-볼륨-플러그인\" style=\"position:relative;\"><a href=\"#-%EB%B3%BC%EB%A5%A8-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8\" aria-label=\" 볼륨 플러그인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌹 볼륨 플러그인</h2>\n<p>쿠버네티스 에서 사용할 수 있는 볼륨 플러그인은 무수히 많다. </p>\n<p>[몇가지 예시]  </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/90215628-25627b00-de37-11ea-8d8e-98d0b2dfcfd2.png\" alt=\"스크린샷, 2020-08-14 14-04-52\"></p>\n<br/>\n<br/>\n<p>대표적인 3가지는 아래 가지가 있다.</p>\n<p>empty : 임시로 데이터를 저장하는 빈 볼륨  </p>\n<ul>\n<li>호스트의 디스크를 임시로 컨테이너 볼륨에 할당해서 사용한다.  </li>\n<li>파드가 사라지면 emprtDir 에 할당했던 컨테이너 볼륨의 데이터도 사라진다.</li>\n<li>단순히 컨테이너를 재시작 했을 때 데이터를 보존하는 역할이다.</li>\n<li>메모리와 디스크를 함께쓰는 대용량 데이터 계산을 하는 경우와 연산 결과를 중간 저장용 필요할 때 사용한다.</li>\n</ul>\n<br/>\n<br/>\n<p>[아래의 예시는 두 개의 컨테이너가 하나의 Pod에서 emptyDir을 공유하는 것을 보여준다]</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token number\">1</span> apiVersion<span class=\"token punctuation\">:</span> v1\n<span class=\"token number\">2</span> kind<span class=\"token punctuation\">:</span> Pod\n<span class=\"token number\">3</span> metadata<span class=\"token punctuation\">:</span>\n<span class=\"token number\">4</span> name<span class=\"token punctuation\">:</span> test<span class=\"token operator\">-</span>pod\n<span class=\"token number\">5</span> spec<span class=\"token punctuation\">:</span>\n<span class=\"token number\">6</span> containers<span class=\"token punctuation\">:</span>\n<span class=\"token number\">7</span>    <span class=\"token operator\">-</span> image<span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">14.04</span>\n<span class=\"token number\">8</span>    name<span class=\"token punctuation\">:</span> ubuntu<span class=\"token operator\">-</span>container              <span class=\"token operator\">--</span><span class=\"token operator\">-</span> 우분투라는 이름의 pods\n<span class=\"token number\">9</span>    command<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"tail\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-f\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/dev/null\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">10</span>    volumeMounts<span class=\"token punctuation\">:</span>\n<span class=\"token number\">11</span>        <span class=\"token operator\">-</span> mountPath<span class=\"token punctuation\">:</span> <span class=\"token operator\">/</span>data\n<span class=\"token number\">12</span>        name<span class=\"token punctuation\">:</span> my<span class=\"token operator\">-</span>empty<span class=\"token operator\">-</span>volume\n<span class=\"token number\">13</span>\n<span class=\"token number\">14</span>    <span class=\"token operator\">-</span> image<span class=\"token punctuation\">:</span> nginx                     <span class=\"token operator\">--</span><span class=\"token operator\">-</span> nginx라는 이름의 pods\n<span class=\"token number\">15</span>    name<span class=\"token punctuation\">:</span> nginx<span class=\"token operator\">-</span>containe\n<span class=\"token number\">16</span>    volumeMounts<span class=\"token punctuation\">:</span>\n<span class=\"token number\">17</span>        <span class=\"token operator\">-</span> mountPath<span class=\"token punctuation\">:</span> <span class=\"token operator\">/</span>data\n<span class=\"token number\">18</span>        name<span class=\"token punctuation\">:</span> my<span class=\"token operator\">-</span>empty<span class=\"token operator\">-</span>volume\n<span class=\"token number\">19</span>\n<span class=\"token number\">20</span> volumes<span class=\"token punctuation\">:</span>\n<span class=\"token number\">21</span>    <span class=\"token operator\">-</span> name<span class=\"token punctuation\">:</span> my<span class=\"token operator\">-</span>empty<span class=\"token operator\">-</span>volume\n<span class=\"token number\">22</span>    emptyDir<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>                 <span class=\"token operator\">--</span><span class=\"token operator\">--</span>empty에 대한 설정</code></pre></div>\n<br/>\n<ul>\n<li><code class=\"language-text\">spec.containers.volumeMounts.mountPath</code>: 실행될 컨테이너 안에 마운트할 경로 입니다.<br>\n컨테이너 안에 해당 디렉토리가 없더라도 자동으로 생성 해줍니다</li>\n<li><code class=\"language-text\">spec.containers.volumeMounts.mountPath</code>: 마운트할 볼륨의 이름 입니다.  </li>\n<li><code class=\"language-text\">spec.voluems</code>: 위에 작성한 my-empty-volume을 사용하도록 지정 해줍니다.</li>\n</ul>\n<br/>\n<br/>\n<p>PODS 생성 후 정상 구동 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa1515<span class=\"token punctuation\">]</span># kubectl create <span class=\"token operator\">-</span>f emp<span class=\"token punctuation\">.</span>yaml\npod<span class=\"token operator\">/</span>emp<span class=\"token operator\">-</span>pod created\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n<span class=\"token punctuation\">[</span>root@nasa1515<span class=\"token punctuation\">]</span># kubectl <span class=\"token keyword\">get</span> po\nNAME                                   READY     STATUS    RESTARTS   AGE\nemp<span class=\"token operator\">-</span>pod                                 <span class=\"token number\">2</span><span class=\"token operator\">/</span><span class=\"token number\">2</span>       Running   <span class=\"token number\">0</span>          39s</code></pre></div>\n<br/>\n<br/>\n<p>한 컨테이너에서 /data에 파일을 생성할 경우 다른 컨테이너에서도 해당 파일에서 접근할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>root@nasa1515<span class=\"token punctuation\">]</span># docker ps <span class=\"token operator\">|</span> grep ubuntu\n78a266359307        ubuntu@nasa1515<span class=\"token punctuation\">:</span>885bb6705b0<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span> \n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n<span class=\"token punctuation\">[</span>root@nasa1515<span class=\"token punctuation\">]</span># docker exec <span class=\"token operator\">-</span>it <span class=\"token number\">78</span> bash\nroot@emp<span class=\"token operator\">-</span>pod<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span># ls\nbin  boot  data  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  <span class=\"token keyword\">var</span>\nroot@emp<span class=\"token operator\">-</span>pod<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span># cd data<span class=\"token operator\">/</span>\nroot@emp<span class=\"token operator\">-</span>pod<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>data# echo test <span class=\"token operator\">>></span> Test\nroot@emp<span class=\"token operator\">-</span>pod<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>data# exit\nexit\n\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n<span class=\"token punctuation\">[</span>root@nasa1515# docker ps <span class=\"token operator\">|</span> grep nginx\n7c72d8409845        nginx@nasa1515<span class=\"token punctuation\">:</span>d85914d547a6<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">[</span>root@nasa1515<span class=\"token punctuation\">]</span># docker exec <span class=\"token operator\">-</span>it 7c bash\nroot@test<span class=\"token operator\">-</span>pod<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span># ls data<span class=\"token operator\">/</span>\nTest</code></pre></div>\n<br/>\n<br/>\n<h3 id=\"hostpath--파드가-실행된-호스트의-파일이나-디렉토리를-파드에-마운트한다\" style=\"position:relative;\"><a href=\"#hostpath--%ED%8C%8C%EB%93%9C%EA%B0%80-%EC%8B%A4%ED%96%89%EB%90%9C-%ED%98%B8%EC%8A%A4%ED%8A%B8%EC%9D%98-%ED%8C%8C%EC%9D%BC%EC%9D%B4%EB%82%98-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC%EB%A5%BC-%ED%8C%8C%EB%93%9C%EC%97%90-%EB%A7%88%EC%9A%B4%ED%8A%B8%ED%95%9C%EB%8B%A4\" aria-label=\"hostpath  파드가 실행된 호스트의 파일이나 디렉토리를 파드에 마운트한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>hostPath : 파드가 실행된 호스트의 파일이나 디렉토리를 파드에 마운트한다.</h3>\n<ul>\n<li>hostpath는 호스트의 디렉터리를 Pod와 공유해 사용하는 방식이다.</li>\n<li>컨테이너 재시작시 데이터를 보존하는 역할이다.</li>\n<li>도커 스웜 모드의 호스트 볼륨 마운트와 비슷한 방식이라고 생각하면 쉽다.  </li>\n<li>Pod가 삭제되어도 hostpath에 저장된 파일들은 호스트에 저장되어 남아있게 된다. </li>\n<li>그러나 당연하게도 컨테이너가 할당될 특정 호스트를 nodeSelector를 통해 지정해주지 않으면<br>\n매번 컨테이너가 다른 호스트에 할당되므로 이 방식은 persistent storage와는 거리가 있다고 볼 수 있다.</li>\n</ul>\n<br/>\n<br/>\n<p>hostpath는 아래와 같이 정의해 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">apiVersion<span class=\"token punctuation\">:</span> <span class=\"token class-name\">v1</span>\nkind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Pod</span>\nmetadata<span class=\"token punctuation\">:</span>\nname<span class=\"token punctuation\">:</span> nasa1515<span class=\"token operator\">-</span>hostpath<span class=\"token operator\">-</span><span class=\"token class-name\">pod</span>\nspec<span class=\"token punctuation\">:</span>\ncontainers<span class=\"token punctuation\">:</span>\n<span class=\"token operator\">-</span> name<span class=\"token punctuation\">:</span> nasa1515<span class=\"token operator\">-</span>hostpath<span class=\"token operator\">-</span><span class=\"token class-name\">pod</span>\n    image<span class=\"token punctuation\">:</span> arisu1000<span class=\"token operator\">/</span>simple<span class=\"token operator\">-</span>container<span class=\"token operator\">-</span>app<span class=\"token punctuation\">:</span><span class=\"token class-name\">latest</span>\n    volumeMounts<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span> mountPath<span class=\"token punctuation\">:</span> <span class=\"token operator\">/</span>test<span class=\"token operator\">-</span><span class=\"token class-name\">volume</span>\n    name<span class=\"token punctuation\">:</span> hostpath<span class=\"token operator\">-</span><span class=\"token class-name\">vol</span>\n    ports<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span> containerPort<span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\nvolumes<span class=\"token punctuation\">:</span>\n<span class=\"token operator\">-</span> name<span class=\"token punctuation\">:</span> hostpath<span class=\"token operator\">-</span><span class=\"token class-name\">vol</span>\n    hostPath<span class=\"token punctuation\">:</span>\n    path<span class=\"token punctuation\">:</span> <span class=\"token operator\">/</span><span class=\"token class-name\">tmp</span>\n    type<span class=\"token punctuation\">:</span> Directory</code></pre></div>\n<ul>\n<li><code class=\"language-text\">spec.containers.volumeMounts.mountPath</code>: 실행된 컨테이너 안에 마운트할 경로 입니다.<br>\n컨테이너 안에 해당 디렉토리가 없더라도 자동으로 생성 해줍니다. </li>\n<li><code class=\"language-text\">spec.containers.volumeMounts.name</code>: 마운트할 볼륨의 이름 입니다.</li>\n<li><code class=\"language-text\">spec.voluems.name</code>: 위에 작성한 hostpath-volume을 사용하도록 지정 해줍니다.</li>\n<li><code class=\"language-text\">spec.voluems.hostPath</code>: 노드에 마운트할 경로를 정해주고 해당 경로는 Directory 라는것을 명시 합니다.<br>\n해당 디렉토리는 노드에 생성되어 있어야 하며, DirectoryOrCreate를 사용하면 디렉토리를 생성 해줍니다.</li>\n</ul>\n<br/>\n<br/>\n<h3 id=\"nfs-서버\" style=\"position:relative;\"><a href=\"#nfs-%EC%84%9C%EB%B2%84\" aria-label=\"nfs 서버 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NFS 서버</h3>\n<p>호스트에 설정한 NFS 디렉토리를 공유하는 네트워크 볼륨 공유이다.</p>\n<ul>\n<li>NFS 볼륨은 기존에 사용하는 NFS 서버를 파드에 마운트한다.</li>\n<li><code class=\"language-text\">.spec.containers[].securityContext</code> 는 컨테이너의 보안 설정을 한다.</li>\n</ul>\n<br/>\n<br/>\n<p>컨테이너가 실행중인 호스트 장치의 접근권한을 설정하는 priviledged 필드값으로<br>\n모든 호스트 장치에 접근할 수 있도록 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">apiVersion<span class=\"token punctuation\">:</span> apps<span class=\"token operator\">/</span><span class=\"token class-name\">v1</span>\nkind<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Deployment</span>\nmetadata<span class=\"token punctuation\">:</span>\nname<span class=\"token punctuation\">:</span> nfs<span class=\"token operator\">-</span><span class=\"token class-name\">server</span>\nlabels<span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">:</span> nfs<span class=\"token operator\">-</span><span class=\"token class-name\">server</span>\nspec<span class=\"token punctuation\">:</span>\nreplicas<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\nselector<span class=\"token punctuation\">:</span>\n    matchLabels<span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">:</span> nfs<span class=\"token operator\">-</span><span class=\"token class-name\">server</span>\ntemplate<span class=\"token punctuation\">:</span>\n    metadata<span class=\"token punctuation\">:</span>\n    labels<span class=\"token punctuation\">:</span>\n        app<span class=\"token punctuation\">:</span> nfs<span class=\"token operator\">-</span><span class=\"token class-name\">server</span>\n    spec<span class=\"token punctuation\">:</span>\n    containers<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span> name<span class=\"token punctuation\">:</span> nfs<span class=\"token operator\">-</span><span class=\"token class-name\">server</span>\n        image<span class=\"token punctuation\">:</span> arisu1000<span class=\"token operator\">/</span>nfs<span class=\"token operator\">-</span>server<span class=\"token punctuation\">:</span><span class=\"token class-name\">latest</span>\n        ports<span class=\"token punctuation\">:</span>\n        <span class=\"token operator\">-</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">nfs</span>\n        containerPort<span class=\"token punctuation\">:</span> <span class=\"token number\">2049</span>             <span class=\"token operator\">--</span>nfs 연결 Port\n        <span class=\"token operator\">-</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">mountd</span>\n        containerPort<span class=\"token punctuation\">:</span> <span class=\"token number\">20048</span>\n        <span class=\"token operator\">-</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">rpcbind</span>\n        containerPort<span class=\"token punctuation\">:</span> <span class=\"token number\">111</span>\n        securityContext<span class=\"token punctuation\">:</span>\n        privileged<span class=\"token punctuation\">:</span> <span class=\"token class-name\">true</span>\n        volumeMounts<span class=\"token punctuation\">:</span>\n        <span class=\"token operator\">-</span> mountPath<span class=\"token punctuation\">:</span> <span class=\"token operator\">/</span><span class=\"token class-name\">exports</span>\n        name<span class=\"token punctuation\">:</span> hostpath<span class=\"token operator\">-</span><span class=\"token class-name\">vol</span>\n    volumes<span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">-</span> name<span class=\"token punctuation\">:</span> hostpath<span class=\"token operator\">-</span><span class=\"token class-name\">vol</span>\n        hostPath<span class=\"token punctuation\">:</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token operator\">/</span><span class=\"token class-name\">tmp</span>\n        type<span class=\"token punctuation\">:</span> Directory</code></pre></div>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4%EC%9D%98-%EB%B3%BC%EB%A5%A8\">✔ 쿠버네티스의 볼륨</a></li>\n<li>\n<p><a href=\"#-pv-pvc\">✌ PV, PVC</a></p>\n<ul>\n<li><a href=\"#persistentvolume-pv\">(PersistentVolume, PV)</a></li>\n<li><a href=\"#persistentvolumeclaim-pvc\">(PersistentVolumeClaim, PVC)</a></li>\n<li><a href=\"#%EB%82%B4%EC%9A%A9\">내용</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-pv-pvc-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0\">👍 PV, PVC 생명주기</a></p>\n<ul>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EB%B9%84%EC%A0%80%EB%8B%9Dprovisioning\">프로비저닝(Provisioning)</a></li>\n<li><a href=\"#%EB%B0%94%EC%9D%B8%EB%94%A9binding\">바인딩(Binding)</a></li>\n<li><a href=\"#%EC%82%AC%EC%9A%A9-using\">사용 (using)</a></li>\n<li><a href=\"#%ED%9A%8C%EC%88%98-reclamiming\">회수 (Reclamiming)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-pv-pvc-%EC%83%9D%EC%84%B1\">🐱‍🏍 PV, PVC 생성</a></p>\n<ul>\n<li><a href=\"#pv-%EC%83%9D%EC%84%B1\">PV 생성</a></li>\n<li><a href=\"#pvc-%EC%83%9D%EC%84%B1\">PVC 생성</a></li>\n<li><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1-%ED%85%8C%EC%8A%A4%ED%8A%B8\">파일 생성 테스트</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%B3%BC%EB%A5%A8-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8\">🌹 볼륨 플러그인</a></p>\n<ul>\n<li><a href=\"#hostpath--%ED%8C%8C%EB%93%9C%EA%B0%80-%EC%8B%A4%ED%96%89%EB%90%9C-%ED%98%B8%EC%8A%A4%ED%8A%B8%EC%9D%98-%ED%8C%8C%EC%9D%BC%EC%9D%B4%EB%82%98-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC%EB%A5%BC-%ED%8C%8C%EB%93%9C%EC%97%90-%EB%A7%88%EC%9A%B4%ED%8A%B8%ED%95%9C%EB%8B%A4\">hostPath : 파드가 실행된 호스트의 파일이나 디렉토리를 파드에 마운트한다.</a></li>\n<li><a href=\"#nfs-%EC%84%9C%EB%B2%84\">NFS 서버</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 29, 2021","title":"[Kubernetes] - 쿠버네티스의 Volume","categories":"Kubernetes","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/kubernetes-volume/"}},"site":{"siteMetadata":{"siteUrl":"https://nasa1515.com","comments":{"utterances":{"repo":"nasa1515/nasablog"}}}}},"pageContext":{"slug":"/kubernetes-service/","nextSlug":"/kubernetes-controller/","prevSlug":"/kubernetes-volume/"}},"staticQueryHashes":["1073350324","2938748437"]}