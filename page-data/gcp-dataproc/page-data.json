{"componentChunkName":"component---src-templates-blog-template-js","path":"/gcp-dataproc/","result":{"data":{"cur":{"id":"f1eefdc3-7c74-544e-b4c9-728dcf1c72c7","html":"<p>머리말  </p>\n<p>이번에는 DataProc(Hadoop/Spark)를 사용하여\n대용량의 데이터를 처리하는 방법에 대해서 다룹니다. 물론 파이썬을 첨가해서  </p>\n<hr>\n<h2 id=\"-dataproc에-대해서\" style=\"position:relative;\"><a href=\"#-dataproc%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C\" aria-label=\" dataproc에 대해서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ DataProc에 대해서..</h2>\n<p><em>Dataproc은 일괄 처리, 쿼리, 스트리밍, 머신 러닝에 오픈소스 데이터 도구를 활용할 수 있는 관리형 Spark 및 Hadoop 서비스입니다.</em><br>\n즉 지금까지 귀찮게 Spark, Hadoop을 연동하는 과정을 없애고 사용만하면 되는 서비스라고 볼 수 있습니다.  </p>\n<p>여기서 DataFlow와 DataProc의 차이에 대해서 궁금증이 생겼는데<br>\n두 툴 모두 ETL을 하는 툴에 대해서는 공통점을 가지고 있지만<br>\nDataFlow는 Serverless 서비스로 Streaming, Batch Flow를 Code로 관리하고 싶으면 사용하고<br>\nDataProc은 기존에 HDFS 같은 Hadoop EcoSystem에 종속되어 있는 시스템을 가지고 있다면 사용하기 좋다고 합니다.</p>\n<br/>\n<hr>\n<h2 id=\"-dataproc-cluster-생성\" style=\"position:relative;\"><a href=\"#-dataproc-cluster-%EC%83%9D%EC%84%B1\" aria-label=\" dataproc cluster 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✌ DataProc Cluster 생성</h2>\n<br/>\n<ul>\n<li>\n<p>GCP 탐색 메뉴 > Dataproc > 클러스터 선택 > 클러스터 만들기</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116354676-b8134080-a833-11eb-8b5a-249126ff2798.png\" alt=\"다운로드\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>클러스터 필드 설정 (이름을 제외한 나머지 부분은 기본값)</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116355090-4f789380-a834-11eb-8880-311c70b982b2.JPG\" alt=\"캡처\"></p>\n<br/>\n</li>\n<li>\n<p>프로비저닝 과정을 3분정도 거치고 다음과 같이 생성이 완료됩니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116356531-5b655500-a836-11eb-873e-f5701fbc4d9a.JPG\" alt=\"2\"></p>\n</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"-data-준비하기\" style=\"position:relative;\"><a href=\"#-data-%EC%A4%80%EB%B9%84%ED%95%98%EA%B8%B0\" aria-label=\" data 준비하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🙌 Data 준비하기</h2>\n<p>이번 포스트에서는 BigQuery에서 공개적으로 제공하는 DataSet을 이용합니다.  </p>\n<p>Dataproc Cluster는 GCS Connector를 기본으로 제공하여<br>\n다른 설정없이 GCS에 있는 데이터에 바로 액세스가 가능합니다.<br>\n저는 이를 이용해서 BigQuery의 공개 DataSet의 특정 테이블을 Cloud Storage로 Export하여<br>\nExport한 데이터에 바로 접근하여 사용, 퍼포먼스 테스트를 해보겠습니다.  </p>\n<br/>\n<ul>\n<li>\n<p>데이터 정보  </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116357157-24437380-a837-11eb-9047-048e8e5a018d.JPG\" alt=\"캡처3\"></p>\n<ul>\n<li>Table ID : bigquery-public-data:covid19<em>weathersource</em>com.postal<em>code</em>day_history</li>\n<li>Table 크기 : 약 300 </li>\n</ul>\n<br/>\n</li>\n<li>\n<p>데이터 형식 </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116357277-476e2300-a837-11eb-920c-682f3e9dfa19.JPG\" alt=\"캡처4\"></p>\n<p>데이터의 내용은 나라 별 COVID-19의 기상상태 데이터입니다.  </p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>Cloude Storage 생성 (GCS) - 쿼리 결과 데이러(CSV)틑 쌓는 곳  </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116358291-720cab80-a838-11eb-8d31-a13169891652.JPG\" alt=\"캡처5\"></p>\n<ul>\n<li>Region을 Bigquery와 맞춰주어야 합니다. </li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>BigQuery DataSet, Table 생성 (쿼리 결과 데이터를 쌓는 곳)</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116358650-d7609c80-a838-11eb-8791-4acddef9cb46.JPG\" alt=\"캡처6\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>저는 Python으로 간단한 코드를 작성해서 다음과 같이 데이터를 분류했습니다.  </p>\n<p>공개 DataSet에서 쿼리 결과를 다른 테이블에 저장하는 코드 </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> google<span class=\"token punctuation\">.</span>cloud <span class=\"token keyword\">import</span> bigquery\n\n<span class=\"token comment\"># Construct a BigQuery client object.</span>\nclient <span class=\"token operator\">=</span> bigquery<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># TODO(developer): Set table_id to the ID of the destination table.</span>\ntable_id <span class=\"token operator\">=</span> <span class=\"token string\">\"lws-cloocus.ustest.ustable\"</span>\n\njob_config <span class=\"token operator\">=</span> bigquery<span class=\"token punctuation\">.</span>QueryJobConfig<span class=\"token punctuation\">(</span>destination<span class=\"token operator\">=</span>table_id<span class=\"token punctuation\">)</span>\n\nsql <span class=\"token operator\">=</span> <span class=\"token string\">'SELECT * FROM `bigquery-public-data.covid19_weathersource_com.postal_code_day_history` LIMIT 34230421'</span>\n\n<span class=\"token comment\"># Start the query, passing in the extra configuration.</span>\nquery_job <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> job_config<span class=\"token operator\">=</span>job_config<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Make an API request.</span>\nquery_job<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Wait for the job to complete.</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Query results loaded to the table {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>table_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>아셔야 하는 건 Table을 복사하는 것과 데이터만(쿼리결과)복사하는 것은 다릅니다.<br>\nTable을 그대로 복사하게되면 Table의 정보까지 저장됩니다..</li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>해당 Code를 실행시키게 되면 다음과 같이 특정 Table에 쿼리결과가 저장됩니다.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116361301-c9f8e180-a83b-11eb-90fb-a61cfbbd8fc9.JPG\" alt=\"캡처\"></p>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p>쿼리결과가 저장되어있는 Table의 데이터를 csv로 변환해서 GCS로 저장  </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Source option</span>\nproject <span class=\"token operator\">=</span> <span class=\"token string\">\"lws-cloocus\"</span>\ndataset_id <span class=\"token operator\">=</span> <span class=\"token string\">\"ustest\"</span>\ntable_id <span class=\"token operator\">=</span> <span class=\"token string\">\"ustable\"</span>\n\n\n<span class=\"token comment\"># 용량 많은 Table (1G이상)은 * 정규표현식으로 Table 읽어서 csv화 시켜야 함.</span>\ndestination_uri <span class=\"token operator\">=</span> <span class=\"token string\">\"gs://{}/{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>bucket_name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"result*.csv\"</span><span class=\"token punctuation\">)</span>\ndataset_ref <span class=\"token operator\">=</span> bigquery<span class=\"token punctuation\">.</span>DatasetReference<span class=\"token punctuation\">(</span>project<span class=\"token punctuation\">,</span> dataset_id<span class=\"token punctuation\">)</span>\ntable_ref <span class=\"token operator\">=</span> dataset_ref<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">(</span>table_id<span class=\"token punctuation\">)</span>\n\nextract_job <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>extract_table<span class=\"token punctuation\">(</span>\n    table_ref<span class=\"token punctuation\">,</span>\n    destination_uri<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\"># Location must match that of the source table.</span>\n    location<span class=\"token operator\">=</span><span class=\"token string\">\"US\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># API request</span>\nextract_job<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Waits for job to complete.</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"Exported {}:{}.{} to {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>project<span class=\"token punctuation\">,</span> dataset_id<span class=\"token punctuation\">,</span> table_id<span class=\"token punctuation\">,</span> destination_uri<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>BigQeury에서 Data를 export 할 때 한번에 1GB 단위까지 밖에 지원되지 않습니다.<br>\n때문에 * 와일드카드를 사용해서 CSV File을 분리해줘야 합니다.  </li>\n</ul>\n<br/>\n</li>\n<li>\n<p>해당 코드를 실행시키면 다음과 같이 GCS에 Data가 저장됩니다.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116361977-8783d480-a83c-11eb-8d1e-5d447ce71323.JPG\" alt=\"캡처3\"></p>\n<ul>\n<li>다음과 같이 용량이 일정하게 나눠서 저장됩니다.  </li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>저장된 CSV File을 Local로 다운받아서 NotePad로 확인해보죠  </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116362297-ddf11300-a83c-11eb-8944-4694fb94bd4e.JPG\" alt=\"23\"></p>\n<ul>\n<li>다음과 같이 맨 윗줄은 헤더 정보, 나머지는 데이터 값만 저장됩니다.  </li>\n</ul>\n</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"-jupyter-notebook-연결\" style=\"position:relative;\"><a href=\"#-jupyter-notebook-%EC%97%B0%EA%B2%B0\" aria-label=\" jupyter notebook 연결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍 Jupyter Notebook 연결</h2>\n<p>이제 간단한 쿼리 테스트를 진행하기 위해 Jupyter Notebook을 연결 하려고 했는데…<br>\n보니깐 Cluster를 잘못 생성했네요 아래 구성요소 GW를 사용하는 옵션을 체크해야합니다.  </p>\n<ul>\n<li>\n<p>구성요소 게이트웨이 </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116366348-2a3e5200-a841-11eb-81c1-c83a9f629154.JPG\" alt=\"캡처\"></p>\n<ul>\n<li>게이트웨이 옵션 체크</li>\n<li>구성요소에서 Jupyter Notebook 체크 </li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>클러스터가 새롭게 만들어졌다면 클러스터 정보-> 웹 인터페이스로 접속합니다.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116367440-527a8080-a842-11eb-9843-2fdb4cfdecfa.JPG\" alt=\"캡처3\"></p>\n<ul>\n<li>그럼 다음과 같이 JupyterLab GW link가 생기고 접속합니다.  </li>\n</ul>\n<br/>\n</li>\n<li>\n<p>그럼 다음과 같이 DataProc Cluster와 연결된 Jupyter Page에 접속이 가능합니다. </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116367646-85bd0f80-a842-11eb-8005-406031f0ca44.JPG\" alt=\"캡처4\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>이 후에 GCS에 저장된 csv를 읽는 것도 가능합니다.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116504392-21a65400-a8f3-11eb-9e7e-8295718c17e2.JPG\" alt=\"33333\"></p>\n<br/>\n</li>\n<li>\n<p>저는 쿼리 결과 시간이나, table 형태로 결과를 보고 싶어서 extension을 추가 설치 했습니다. </p>\n<br/>\n<ul>\n<li>\n<p>Jupyter에서 Terminal 창을 연 뒤 아래 명령어로 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># pip install jupyterlab_execute_time</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>설치가 완료 된 뒤 연결된 WEB을 새로고침 하면 execure-time 이 설치되어 있습니다.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116510416-d5154580-a8ff-11eb-86ff-8ea55e585217.JPG\" alt=\"캡처444\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>그 후 Settings - Advanced Settings editor - Notebook에 아래 코드를 추가합니다.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116514663-4b1cab00-a906-11eb-9071-34c3d15fc616.JPG\" alt=\"22222222\"></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>그럼 다음과 같이 쿼리 실행 시간이 출력됩니다.!</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116514759-6be50080-a906-11eb-9860-534243a6388f.JPG\" alt=\"3213121\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>저는 필요해보이는 추가 Extention을 더 설치해줬습니다.  </p>\n<br/>\n<ul>\n<li>variableinspector</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># pip install lckr-jupyterlab-variableinspector</span></code></pre></div>\n<br/>\n<ul>\n<li>TOC</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># jupyter nbextension enable toc2/main</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"-pyspark-test\" style=\"position:relative;\"><a href=\"#-pyspark-test\" aria-label=\" pyspark test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👏 Pyspark Test</h2>\n<p>위에서도 Test를 해봤지만 그래도 몇가지 pyspark 함수를 사용해보겠습니다.  </p>\n<br/>\n<ul>\n<li>\n<p>CSV File 읽어오기 (GCS에 있는)  </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># df = spark.read.csv(\"gs://nasa_us/\", header=True, inferSchema=True)</span></code></pre></div>\n<ul>\n<li>gs://nasa_us/ 경로에 있는 모든 파일을 읽습니다.  </li>\n<li>read.csv 옵션인 header, inferSchema를 사용했습니다.  </li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116836339-17d96500-ac01-11eb-9ab5-707e5ae65e2c.JPG\" alt=\"2221313\"></p>\n<ul>\n<li>약 45.96s 가 소요 되었습니다.  </li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>해당 DataFrame의 Row 반환 </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># df.show(10)    -- Row 10개 반환</span>\n<span class=\"token comment\"># df.count()     -- Row 갯수 반환</span></code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116836737-ac909280-ac02-11eb-8dcc-dac053327581.JPG\" alt=\"11111\"></p>\n<ul>\n<li>show에는 546ms 가 소요 되었습니다.</li>\n<li>count에는 13.81s 가 소요 되었습니다.  </li>\n</ul>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>해당 DataFrame의 Summary 값 반환</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># df.summary().show()</span></code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116841196-68f25480-ac13-11eb-872b-1fc2019bdc29.JPG\" alt=\"222222\"></p>\n<ul>\n<li>Summary에는 4m 16.06s 가 소요 되었습니다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며…</h2>\n<p>DataProc을 사용해보면서 Spark에 대해서도 다시 알아 갈 생각입니다.<br>\n그래서 다음 포스트에서는 Pyspark의 문법에 대해서 포스팅 예정입니다.  </p>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-dataproc%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C\">✔ DataProc에 대해서..</a></li>\n<li><a href=\"#-dataproc-cluster-%EC%83%9D%EC%84%B1\">✌ DataProc Cluster 생성</a></li>\n<li><a href=\"#-data-%EC%A4%80%EB%B9%84%ED%95%98%EA%B8%B0\">🙌 Data 준비하기</a></li>\n<li><a href=\"#-jupyter-notebook-%EC%97%B0%EA%B2%B0\">👍 Jupyter Notebook 연결</a></li>\n<li><a href=\"#-pyspark-test\">👏 Pyspark Test</a></li>\n<li><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\">마치며…</a></li>\n</ul>\n</div>","excerpt":"머리말   이번에는 DataProc(Hadoop/Spark)를 사용하여 \n대용량의 데이터를 처리하는 방법에 대해서 다룹니다. 물론 파이썬을 첨가해서   ✔ DataProc에 대해서.. Dataproc은 일괄 처리, 쿼리, 스트리밍, 머신 러닝에 오픈소스 데이터 도구를 활용할 수 있는 관리형 Spark 및 Hadoop 서비스입니다. 즉 지금까지 귀찮게 Spark, Hadoop을 연동하는 과정을 없애고 사용만하면 되는 서비스라고 볼 수 있습니다.   여기서 DataFlow와 DataProc의 차이에 대해서 궁금증이 생겼는데 두 툴 모두 ETL을 하는 툴에 대해서는 공통점을 가지고 있지만 DataFlow는 Serverles…","frontmatter":{"date":"September 08, 2021","title":"[DATA, GCP] - GCP DataProc spark Cluster로 ETL 후 BigQuery에 적재","categories":"CLOUD DATA","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/gcp-dataproc/"}},"next":{"id":"899a2ae9-4b12-5939-9578-b5831fff8cb9","html":"<p>머리말  </p>\n<p>요 근래 블로그 Rebuild, 업무 등등등…너무 바쁜 하루였습니다. (🤦‍♂️ 아직도 바쁘긴 하지만;;)<br>\n그래도 주말, 퇴근 이후에 기술공부 하는 시간 중에 쪼끔이나마 짬을내 블로그 업데이트를 하려고 노력중입니다!!<br>\n이번 포스트에서는 Azure의 DataFactory의 이론적인 내용과 실제 Oracle DB의 데이터를 수집하는 내용입니다.</p>\n<hr>\n<h2 id=\"-azure-datafactory\" style=\"position:relative;\"><a href=\"#-azure-datafactory\" aria-label=\" azure datafactory permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ Azure DataFactory?</h2>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/136335857-f2cd40c3-07b9-4991-b3c4-116438c1fe11.png\" alt=\"image\">\n데이터 이동을 오케스트레이션하고 데이터를 변환하는 데이터 워크플로를 만들 수 있는 클라우드 기반 ETL 및 데이터 통합 서비스<br>\n서로 다른 데이터 저장소의 데이터를 수집할 수 있는 데이터 기반 워크플로(파이프라인이라고 함)를 만들고 예약할 수 있습니다.<br>\n데이터 흐름을 사용하거나 컴퓨팅 서비스(예: Azure HDInsight Hadoop, Azure Databricks 및 Azure SQL Database)를 사용해<br>\n데이터를 시각적으로 변환하는 복잡한 ETL 프로세스를 작성할 수 있습니다.</p>\n<p>라고 이론적으로는 써있는데 그냥 GCP의 DataFusion과 비슷한 아이 같습니다.<br>\n복잡하게 이론보다는 실습을 해보면서 깨닫는게 좋을 것 같습니다.  </p>\n<br/>\n<hr>\n<h2 id=\"-구축-예정-architecture\" style=\"position:relative;\"><a href=\"#-%EA%B5%AC%EC%B6%95-%EC%98%88%EC%A0%95-architecture\" aria-label=\" 구축 예정 architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👌 구축 예정 Architecture</h2>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/136305623-de2ac3d2-18b7-4284-a976-e1413686acde.png\" alt=\"image\"></p>\n<p>On-Premise 같이 네트워크가 격리되어있는 환경을 만들고 싶었습니다.<br>\n때문에 Azure에서는 Subnet으로 비슷한 환경을 구성해서 Private 환경으로 DataFactory를 구성합니다.<br>\n총 서브넷 종류 및 용도는 다음과 같습니다.</p>\n<ul>\n<li>Subnet 01 [Private] (Oracle VM) - On-premise의 역할</li>\n<li>Subnet 02 [Private] (DataFactory) - Private 환경의 수집</li>\n<li>Subnet 03 [Private] (Jump Server) - Pirvate 환경에 접속하기 위한 Jump</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"-datafactory-생성\" style=\"position:relative;\"><a href=\"#-datafactory-%EC%83%9D%EC%84%B1\" aria-label=\" datafactory 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✌ DataFactory 생성.</h2>\n<p>DataFactory 생성은 <a href=\"https://docs.microsoft.com/ko-kr/azure/data-factory/quickstart-create-data-factory-portal\">공식DOCS</a>를 보고 진행합니다.</p>\n<br/>\n<ul>\n<li>\n<p>DataFactory를 동일 RG등의 개인설정에 맞춰서 생성합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/135404274-8671e65e-26c3-4ffa-b589-9ab418aba4a9.png\" alt=\"image\"></p>\n<br/>\n</li>\n<li>\n<p>다만 Private 하게 DataFactory Resource가 동작할 수 있도록 Network 부분은 Private EndPoint로 지정해야 합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/136308452-5bb43348-50bb-4486-bffb-8ef401507385.png\" alt=\"image\"></p>\n</li>\n</ul>\n<p>이 외의 설정은 건드실 필요 없습니다.</p>\n<br/>\n<hr>\n<h2 id=\"-oracle-db-구축-azure-vm\" style=\"position:relative;\"><a href=\"#-oracle-db-%EA%B5%AC%EC%B6%95-azure-vm\" aria-label=\" oracle db 구축 azure vm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍 Oracle DB 구축 (Azure VM)</h2>\n<ul>\n<li>Oracle DB 구축방법의 경우 <a href=\"https://docs.microsoft.com/ko-kr/azure/virtual-machines/workloads/oracle/oracle-database-quick-create\">공식 DOCS</a>를 보시고 설치하시면 됩니다.</li>\n</ul>\n<br/>\n<p>Azrue VM 생성 (Azure에서 제공해주는 Oracle DB Image를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">az vm create \\\n    <span class=\"token operator\">--</span>resource<span class=\"token operator\">-</span><span class=\"token keyword\">group</span> nasatest \\\n    <span class=\"token operator\">--</span>name nasa<span class=\"token operator\">-</span>oracle \\\n    <span class=\"token operator\">--</span><span class=\"token class-name\">image</span> Oracle<span class=\"token punctuation\">:</span>oracle<span class=\"token operator\">-</span>database<span class=\"token operator\">-</span><span class=\"token number\">19</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span>oracle<span class=\"token operator\">-</span>database<span class=\"token operator\">-</span><span class=\"token number\">19</span><span class=\"token operator\">-</span><span class=\"token number\">0904</span><span class=\"token punctuation\">:</span>latest \\\n    <span class=\"token operator\">--</span>size Standard_DS2_v2 \\\n    <span class=\"token operator\">--</span>admin<span class=\"token operator\">-</span>username nasa1515 \\\n    <span class=\"token operator\">--</span>admin<span class=\"token operator\">-</span>password @dldnjstjr123 \\\n    <span class=\"token operator\">--</span><span class=\"token keyword\">public</span><span class=\"token operator\">-</span>ip<span class=\"token operator\">-</span>address<span class=\"token operator\">-</span>allocation <span class=\"token keyword\">static</span> \\\n    <span class=\"token operator\">--</span><span class=\"token keyword\">public</span><span class=\"token operator\">-</span>ip<span class=\"token operator\">-</span>address<span class=\"token operator\">-</span>dns<span class=\"token operator\">-</span>name nasa<span class=\"token operator\">-</span>dns</code></pre></div>\n<br/>\n<p>Oracle Data FILE용 디스크 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">az vm disk attach <span class=\"token operator\">--</span>name disk01 <span class=\"token operator\">--</span><span class=\"token keyword\">new</span> <span class=\"token operator\">--</span>resource<span class=\"token operator\">-</span><span class=\"token keyword\">group</span> nasatest <span class=\"token operator\">--</span>size<span class=\"token operator\">-</span>gb <span class=\"token number\">64</span> <span class=\"token operator\">--</span>sku StandardSSD_LRS <span class=\"token operator\">--</span>vm<span class=\"token operator\">-</span>name nasa<span class=\"token operator\">-</span>oracle</code></pre></div>\n<br/>\n<p>연결을 위한 Port 방화벽 수정</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">az network nsg rule create \\\n    <span class=\"token operator\">--</span>resource<span class=\"token operator\">-</span><span class=\"token keyword\">group</span> nasatest \\\n    <span class=\"token operator\">--</span>nsg<span class=\"token operator\">-</span>name nasa<span class=\"token operator\">-</span>oracleNSG \\\n    <span class=\"token operator\">--</span>name nasa<span class=\"token operator\">-</span>oracle \\\n    <span class=\"token operator\">--</span>protocol tcp \\\n    <span class=\"token operator\">--</span>priority <span class=\"token number\">1001</span> \\\n    <span class=\"token operator\">--</span>destination<span class=\"token operator\">-</span>port<span class=\"token operator\">-</span>range <span class=\"token number\">1521</span></code></pre></div>\n<br/>\n<p>이제 기본적인 설정은 완료되었으니 VM에 접속 한 뒤 몇가지 사항을 확인합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># sudo su -</span>\n<span class=\"token preprocessor property\"># ls -alt /dev/sd*|head -1</span>\n<span class=\"token punctuation\">[</span>root@nasa<span class=\"token operator\">-</span>oracle <span class=\"token operator\">~</span><span class=\"token punctuation\">]</span># ls <span class=\"token operator\">-</span>alt <span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>sd<span class=\"token operator\">*</span><span class=\"token operator\">|</span>head <span class=\"token operator\">-</span><span class=\"token number\">1</span>\nbrw<span class=\"token operator\">-</span>rw<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token punctuation\">.</span> <span class=\"token number\">1</span> root disk <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span> Sep <span class=\"token number\">29</span> <span class=\"token number\">07</span><span class=\"token punctuation\">:</span><span class=\"token number\">31</span> <span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>sdc</code></pre></div>\n<br/>\n<p>추가한 Disk를 합치기 위해 디스크 설정 작업을 진행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># parted /dev/sdc mklabel gpt</span>\n<span class=\"token preprocessor property\"># parted -a optimal /dev/sdc mkpart primary 0GB 64GB   </span>\n<span class=\"token preprocessor property\"># parted /dev/sdc print</span>\n\nModel<span class=\"token punctuation\">:</span> Msft <span class=\"token return-type class-name\">Virtual</span> Disk <span class=\"token punctuation\">(</span>scsi<span class=\"token punctuation\">)</span>\nDisk <span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>sdc<span class=\"token punctuation\">:</span> <span class=\"token number\">68</span><span class=\"token punctuation\">.</span>7GB\n<span class=\"token return-type class-name\">Sector</span> size <span class=\"token punctuation\">(</span>logical<span class=\"token operator\">/</span>physical<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> 512B<span class=\"token operator\">/</span>4096B\n<span class=\"token class-name\">Partition</span> Table<span class=\"token punctuation\">:</span> gpt\n<span class=\"token class-name\">Disk</span> Flags<span class=\"token punctuation\">:</span>\n\nNumber  Start   End     Size    File system  Name     Flags\n <span class=\"token number\">1</span>      1049kB  <span class=\"token number\">64</span><span class=\"token punctuation\">.</span>0GB  <span class=\"token number\">64</span><span class=\"token punctuation\">.</span>0GB               primary\n\n\n<span class=\"token preprocessor property\"># mkfs -t ext4 /dev/sdc1</span>\n<span class=\"token preprocessor property\"># mkdir /u02</span>\n<span class=\"token preprocessor property\"># mount /dev/sdc1 /u02</span>\n<span class=\"token preprocessor property\"># chmod 777 /u02</span></code></pre></div>\n<br/>\n<p>fstab 및 hosts 파일 수정해줍니다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># echo </span><span class=\"token string\">\"/dev/sdc1               /u02                    ext4    defaults        0 0\"</span> <span class=\"token operator\">>></span> <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>fstab\n<span class=\"token preprocessor property\"># echo </span><span class=\"token string\">\"&lt;Public IP> &lt;VMname>.eastus.cloudapp.azure.com &lt;VMname>\"</span> <span class=\"token operator\">>></span> <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>hosts</code></pre></div>\n<br/>\n<p>VM 내의 방화벽 Port를 열어줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># firewall-cmd --zone=public --add-port=1521/tcp --permanent</span>\n<span class=\"token preprocessor property\"># firewall-cmd --zone=public --add-port=5502/tcp --permanent</span>\n<span class=\"token preprocessor property\"># firewall-cmd --reload</span></code></pre></div>\n<br/>\n<p>Database 만들기</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># sudo su - oracle</span>\n<span class=\"token preprocessor property\"># lsnrctl start</span>\nLSNRCTL <span class=\"token keyword\">for</span> Linux<span class=\"token punctuation\">:</span> Version <span class=\"token number\">19.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span> <span class=\"token operator\">-</span> Production <span class=\"token keyword\">on</span> <span class=\"token number\">20</span><span class=\"token operator\">-</span>OCT<span class=\"token operator\">-</span><span class=\"token number\">2020</span> <span class=\"token number\">01</span><span class=\"token punctuation\">:</span><span class=\"token number\">58</span><span class=\"token punctuation\">:</span><span class=\"token number\">18</span>\n\nCopyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token number\">1991</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2019</span><span class=\"token punctuation\">,</span> Oracle<span class=\"token punctuation\">.</span>  All rights reserved<span class=\"token punctuation\">.</span>\n\nStarting <span class=\"token operator\">/</span>u01<span class=\"token operator\">/</span>app<span class=\"token operator\">/</span>oracle<span class=\"token operator\">/</span>product<span class=\"token operator\">/</span><span class=\"token number\">19.0</span><span class=\"token number\">.0</span><span class=\"token operator\">/</span>dbhome_1<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>tnslsnr<span class=\"token punctuation\">:</span> please wait<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n\nTNSLSNR <span class=\"token keyword\">for</span> Linux<span class=\"token punctuation\">:</span> Version <span class=\"token number\">19.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span> <span class=\"token operator\">-</span> Production\nLog messages written to <span class=\"token operator\">/</span>u01<span class=\"token operator\">/</span>app<span class=\"token operator\">/</span>oracle<span class=\"token operator\">/</span>diag<span class=\"token operator\">/</span>tnslsnr<span class=\"token operator\">/</span>vmoracle19c<span class=\"token operator\">/</span>listener<span class=\"token operator\">/</span>alert<span class=\"token operator\">/</span>log<span class=\"token punctuation\">.</span>xml\n<span class=\"token class-name\">Listening</span> <span class=\"token keyword\">on</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>DESCRIPTION<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ADDRESS<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>PROTOCOL<span class=\"token operator\">=</span>tcp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>HOST<span class=\"token operator\">=</span>vmoracle19c<span class=\"token punctuation\">.</span>eastus<span class=\"token punctuation\">.</span>cloudapp<span class=\"token punctuation\">.</span>azure<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>PORT<span class=\"token operator\">=</span><span class=\"token number\">1521</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token return-type class-name\">Connecting</span> to <span class=\"token punctuation\">(</span>ADDRESS<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>PROTOCOL<span class=\"token operator\">=</span>tcp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>HOST<span class=\"token operator\">=</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>PORT<span class=\"token operator\">=</span><span class=\"token number\">1521</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nSTATUS of the LISTENER\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\nAlias                     LISTENER\nVersion                   TNSLSNR <span class=\"token keyword\">for</span> Linux<span class=\"token punctuation\">:</span> Version <span class=\"token number\">19.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span> <span class=\"token operator\">-</span> Production\nStart Date                <span class=\"token number\">20</span><span class=\"token operator\">-</span>OCT<span class=\"token operator\">-</span><span class=\"token number\">2020</span> <span class=\"token number\">01</span><span class=\"token punctuation\">:</span><span class=\"token number\">58</span><span class=\"token punctuation\">:</span><span class=\"token number\">18</span>\nUptime                    <span class=\"token number\">0</span> days <span class=\"token number\">0</span> hr<span class=\"token punctuation\">.</span> <span class=\"token number\">0</span> min<span class=\"token punctuation\">.</span> <span class=\"token number\">0</span> sec\nTrace Level               off\n<span class=\"token class-name\">Security</span>                  ON<span class=\"token punctuation\">:</span> Local OS Authentication\nSNMP                      OFF\nListener Log File         <span class=\"token operator\">/</span>u01<span class=\"token operator\">/</span>app<span class=\"token operator\">/</span>oracle<span class=\"token operator\">/</span>diag<span class=\"token operator\">/</span>tnslsnr<span class=\"token operator\">/</span>vmoracle19c<span class=\"token operator\">/</span>listener<span class=\"token operator\">/</span>alert<span class=\"token operator\">/</span>log<span class=\"token punctuation\">.</span>xml\nListening Endpoints Summary<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">(</span>DESCRIPTION<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ADDRESS<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>PROTOCOL<span class=\"token operator\">=</span>tcp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>HOST<span class=\"token operator\">=</span>vmoracle19c<span class=\"token punctuation\">.</span>eastus<span class=\"token punctuation\">.</span>cloudapp<span class=\"token punctuation\">.</span>azure<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>PORT<span class=\"token operator\">=</span><span class=\"token number\">1521</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nThe listener supports no services\nThe command completed successfully\n\n<span class=\"token preprocessor property\"># mkdir /u02/oradata</span></code></pre></div>\n<br/>\n<p>DB 생성도우미로 Database 생성.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">dbca <span class=\"token operator\">-</span>silent \\\n   <span class=\"token operator\">-</span>createDatabase \\\n   <span class=\"token operator\">-</span>templateName General_Purpose<span class=\"token punctuation\">.</span>dbc \\\n   <span class=\"token operator\">-</span>gdbname nasatest \\\n   <span class=\"token operator\">-</span>sid nasatest \\\n   <span class=\"token operator\">-</span>responseFile NO_VALUE \\\n   <span class=\"token operator\">-</span>characterSet AL32UTF8 \\\n   <span class=\"token operator\">-</span>sysPassword @dldnjstjr123 \\\n   <span class=\"token operator\">-</span>systemPassword @dldnjstjr123 \\\n   <span class=\"token operator\">-</span>createAsContainerDatabase <span class=\"token boolean\">false</span> \\\n   <span class=\"token operator\">-</span>databaseType MULTIPURPOSE \\\n   <span class=\"token operator\">-</span>automaticMemoryManagement <span class=\"token boolean\">false</span> \\\n   <span class=\"token operator\">-</span>storageType FS \\\n   <span class=\"token operator\">-</span>datafileDestination <span class=\"token string\">\"/u02/oradata/\"</span> \\\n   <span class=\"token operator\">-</span>ignorePreReqs\n\n\n\ndbca <span class=\"token operator\">-</span>ignorePrereqFailure <span class=\"token operator\">-</span>silent <span class=\"token operator\">-</span>createDatabase <span class=\"token operator\">-</span>templateName General_Purpose<span class=\"token punctuation\">.</span>dbc <span class=\"token operator\">-</span>gdbName ORCL <span class=\"token operator\">-</span><span class=\"token class-name\">nodeinfo</span> node1<span class=\"token punctuation\">,</span>node2 <span class=\"token operator\">-</span>characterset AL32UTF8\n\nPrepare <span class=\"token keyword\">for</span> db operation\n<span class=\"token number\">10</span><span class=\"token operator\">%</span> complete\nCopying database files\n<span class=\"token number\">40</span><span class=\"token operator\">%</span> complete\nCreating <span class=\"token keyword\">and</span> starting Oracle instance\n<span class=\"token number\">42</span><span class=\"token operator\">%</span> complete\n<span class=\"token number\">46</span><span class=\"token operator\">%</span> complete\n<span class=\"token number\">50</span><span class=\"token operator\">%</span> complete\n<span class=\"token number\">54</span><span class=\"token operator\">%</span> complete\n<span class=\"token number\">60</span><span class=\"token operator\">%</span> complete\nCompleting Database Creation\n<span class=\"token number\">66</span><span class=\"token operator\">%</span> complete\n<span class=\"token number\">69</span><span class=\"token operator\">%</span> complete\n<span class=\"token number\">70</span><span class=\"token operator\">%</span> complete\nExecuting Post Configuration Actions\n<span class=\"token number\">100</span><span class=\"token operator\">%</span> complete\nDatabase creation complete<span class=\"token punctuation\">.</span> For details check the <span class=\"token class-name\">logfiles</span> at<span class=\"token punctuation\">:</span>\n <span class=\"token operator\">/</span>u01<span class=\"token operator\">/</span>app<span class=\"token operator\">/</span>oracle<span class=\"token operator\">/</span>cfgtoollogs<span class=\"token operator\">/</span>dbca<span class=\"token operator\">/</span><span class=\"token class-name\">oratest1<span class=\"token punctuation\">.</span>\nDatabase</span> Information<span class=\"token punctuation\">:</span>\nGlobal <span class=\"token class-name\">Database</span> Name<span class=\"token punctuation\">:</span>oratest1\n<span class=\"token return-type class-name\">System</span> <span class=\"token function\">Identifier</span><span class=\"token punctuation\">(</span>SID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>oratest1\nLook at the log file <span class=\"token string\">\"/u01/app/oracle/cfgtoollogs/dbca/oratest1/oratest1.log\"</span> <span class=\"token keyword\">for</span> further details<span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">[</span>oracle@nasa<span class=\"token operator\">-</span>oracle <span class=\"token operator\">~</span><span class=\"token punctuation\">]</span>$</code></pre></div>\n<br/>\n<p>오라클 환경 변수 설정</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># ORACLE_SID=nasatest; export ORACLE_SID</span>\n<span class=\"token preprocessor property\"># echo </span><span class=\"token string\">\"export ORACLE_SID=nasatest\"</span> <span class=\"token operator\">>></span> <span class=\"token operator\">~</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>bashrc</code></pre></div>\n<br/>\n<p>Oracle db init 등록</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># sed -i 's/:N/:Y/' /etc/oratab</span></code></pre></div>\n<br/>\n<p>/etc/init.d/dbora 파일 생성 후 아래 내용 추가</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\">#!/bin/sh</span>\n<span class=\"token preprocessor property\"># chkconfig: 345 99 10</span>\n<span class=\"token preprocessor property\"># Description: Oracle auto start-stop script.</span>\n<span class=\"token preprocessor property\">#</span>\n<span class=\"token preprocessor property\"># Set ORA_HOME to be equivalent to $ORACLE_HOME.</span>\nORA_HOME<span class=\"token operator\">=</span><span class=\"token operator\">/</span>u01<span class=\"token operator\">/</span>app<span class=\"token operator\">/</span>oracle<span class=\"token operator\">/</span>product<span class=\"token operator\">/</span><span class=\"token number\">19.0</span><span class=\"token number\">.0</span><span class=\"token operator\">/</span><span class=\"token class-name\">dbhome_1</span>\nORA_OWNER<span class=\"token operator\">=</span>oracle\n\n<span class=\"token keyword\">case</span> <span class=\"token string\">\"$1\"</span> <span class=\"token keyword\">in</span>\n'start'<span class=\"token punctuation\">)</span>\n    <span class=\"token preprocessor property\"># Start the Oracle databases:</span>\n    <span class=\"token preprocessor property\"># The following command assumes that the Oracle sign-in</span>\n    <span class=\"token preprocessor property\"># will not prompt the user for any values.</span>\n    <span class=\"token preprocessor property\"># Remove </span><span class=\"token string\">\"&amp;\"</span> <span class=\"token keyword\">if</span> you don't want startup <span class=\"token keyword\">as</span> <span class=\"token class-name\">a</span> background process<span class=\"token punctuation\">.</span>\n    su <span class=\"token operator\">-</span> $ORA_OWNER <span class=\"token operator\">-</span>c <span class=\"token string\">\"$ORA_HOME/bin/dbstart $ORA_HOME\"</span> <span class=\"token operator\">&amp;</span>\n    touch <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span><span class=\"token keyword\">lock</span><span class=\"token operator\">/</span>subsys<span class=\"token operator\">/</span>dbora\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\n'stop'<span class=\"token punctuation\">)</span>\n    <span class=\"token preprocessor property\"># Stop the Oracle databases:</span>\n    <span class=\"token preprocessor property\"># The following command assumes that the Oracle sign-in</span>\n    <span class=\"token preprocessor property\"># will not prompt the user for any values.</span>\n    su <span class=\"token operator\">-</span> $ORA_OWNER <span class=\"token operator\">-</span>c <span class=\"token string\">\"$ORA_HOME/bin/dbshut $ORA_HOME\"</span> <span class=\"token operator\">&amp;</span>\n    rm <span class=\"token operator\">-</span>f <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span><span class=\"token keyword\">lock</span><span class=\"token operator\">/</span>subsys<span class=\"token operator\">/</span>dbora\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\nesac</code></pre></div>\n<br/>\n<p>권한 변경 및 Link 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># chgrp dba /etc/init.d/dbora</span>\n<span class=\"token preprocessor property\"># chmod 750 /etc/init.d/dbora</span>\n<span class=\"token preprocessor property\"># ln -s /etc/init.d/dbora /etc/rc.d/rc0.d/K01dbora</span>\n<span class=\"token preprocessor property\"># ln -s /etc/init.d/dbora /etc/rc.d/rc3.d/S99dbora</span>\n<span class=\"token preprocessor property\"># ln -s /etc/init.d/dbora /etc/rc.d/rc5.d/S99dbora</span></code></pre></div>\n<br/>\n<p>Oracle Develop 연결을 위한 DB User 생성. (DataFactory에서는 sys user로 바로 연결이 되지 않습니다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># sqlplus sys as sysdba</span>\n\nSQL<span class=\"token operator\">*</span>Plus<span class=\"token punctuation\">:</span> Release <span class=\"token number\">19.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span> <span class=\"token operator\">-</span> Production <span class=\"token keyword\">on</span> Thu Sep <span class=\"token number\">30</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">44</span><span class=\"token punctuation\">:</span><span class=\"token number\">51</span> <span class=\"token number\">2021</span>\nVersion <span class=\"token number\">19.3</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span>\n\nCopyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token number\">1982</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2019</span><span class=\"token punctuation\">,</span> Oracle<span class=\"token punctuation\">.</span>  All rights <span class=\"token class-name\">reserved<span class=\"token punctuation\">.</span>\n\nEnter</span> password<span class=\"token punctuation\">:</span>\n\n<span class=\"token class-name\">Connected</span> to<span class=\"token punctuation\">:</span>\nOracle Database 19c Enterprise Edition Release <span class=\"token number\">19.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span> <span class=\"token operator\">-</span> Production\nVersion <span class=\"token number\">19.3</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span>\n\nSQL<span class=\"token operator\">></span> CREATE USER nasa1515 IDENTIFIED <span class=\"token class-name\">BY</span> qwer1234<span class=\"token punctuation\">;</span>\nUser created<span class=\"token punctuation\">.</span>\n\nSQL<span class=\"token operator\">></span> grant all privileges <span class=\"token class-name\">to</span> nasa1515<span class=\"token punctuation\">;</span>\nGrant succeeded<span class=\"token punctuation\">.</span>\n\nSQL<span class=\"token operator\">></span> exit</code></pre></div>\n<br/>\n<p>생성한 DB USER로 접속해 Test 데이터 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># sqlplus nasa1515</span>\n\nSQL<span class=\"token operator\">*</span>Plus<span class=\"token punctuation\">:</span> Release <span class=\"token number\">19.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span> <span class=\"token operator\">-</span> Production <span class=\"token keyword\">on</span> Thu Sep <span class=\"token number\">30</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">42</span><span class=\"token punctuation\">:</span><span class=\"token number\">44</span> <span class=\"token number\">2021</span>\nVersion <span class=\"token number\">19.3</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span>\n\nCopyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token number\">1982</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2019</span><span class=\"token punctuation\">,</span> Oracle<span class=\"token punctuation\">.</span>  All rights <span class=\"token class-name\">reserved<span class=\"token punctuation\">.</span>\n\nEnter</span> password<span class=\"token punctuation\">:</span>\n\n<span class=\"token class-name\">Connected</span> to<span class=\"token punctuation\">:</span>\nOracle Database 19c Enterprise Edition Release <span class=\"token number\">19.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span> <span class=\"token operator\">-</span> Production\nVersion <span class=\"token number\">19.3</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span>\n\nSQL<span class=\"token operator\">></span> CREATE <span class=\"token return-type class-name\">TABLE</span> test <span class=\"token punctuation\">(</span> <span class=\"token return-type class-name\">seq</span> <span class=\"token function\">NUMBER</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token class-name\">NOT</span> NULL <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nTable created<span class=\"token punctuation\">.</span>\n\nSQL<span class=\"token operator\">></span> insert <span class=\"token keyword\">into</span> <span class=\"token return-type class-name\">test</span> values <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token number\">1</span> row created<span class=\"token punctuation\">.</span>\n\nSQL<span class=\"token operator\">></span> insert <span class=\"token keyword\">into</span> <span class=\"token return-type class-name\">test</span> values <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token number\">1</span> row created<span class=\"token punctuation\">.</span>\n\nSQL<span class=\"token operator\">></span> insert <span class=\"token keyword\">into</span> <span class=\"token return-type class-name\">test</span> values <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token number\">1</span> row created<span class=\"token punctuation\">.</span>\n\nSQL<span class=\"token operator\">></span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> test<span class=\"token punctuation\">;</span>\n\n       SEQ\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n         <span class=\"token number\">1</span>\n         <span class=\"token number\">2</span>\n         <span class=\"token number\">3</span></code></pre></div>\n<br/>\n<p>연결 용 Oracle 완료</p>\n<br/>\n<hr>\n<h2 id=\"🤦♂️-azure-infra-network-구성\" style=\"position:relative;\"><a href=\"#%F0%9F%A4%A6%E2%99%82%EF%B8%8F-azure-infra-network-%EA%B5%AC%EC%84%B1\" aria-label=\"🤦♂️ azure infra network 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤦‍♂️ Azure Infra (Network) 구성</h2>\n<br/>\n<h3 id=\"azure-network-logic\" style=\"position:relative;\"><a href=\"#azure-network-logic\" aria-label=\"azure network logic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Azure Network Logic</h3>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/136329888-548f3328-886d-47f5-a6a5-e803e6584096.png\" alt=\"image\"></p>\n<ul>\n<li>DataFactory에서 Private한 Self-hoted VM을 사용하기 위해선 둘 간의 Private Endpoint 설정이 필요합니다.</li>\n</ul>\n<br/>\n<br/>\n<p>위를 재현하기 위한 연결을 위한 VPC의 Subnet의 경우 다음과 같이 나눠 분리하였습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/136308851-a864141d-2dde-48dc-8f31-b1d328f2ebc1.png\" alt=\"image\"></p>\n<ul>\n<li>pub-01 : jumpserver가 Public IP를 할당 받을 Subnet</li>\n<li>Pri-01 : DataFactory와 연결된 self-hosted VM이 사용 할 Subnet</li>\n</ul>\n<br/>\n<br/>\n<h3 id=\"vpc-endpoint-생성\" style=\"position:relative;\"><a href=\"#vpc-endpoint-%EC%83%9D%EC%84%B1\" aria-label=\"vpc endpoint 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VPC Endpoint 생성</h3>\n<p>자세한 설정의 경우 <a href=\"\">공식 DOC</a> 확인 하시면 됩니다.<br>\n저는 Private 연결 시 필요한 구성에 대해서만 설명하겠습니다.</p>\n<br/>\n<p>Azure Potal에서 Private link Service로 접속한 뒤 Private endpoint Tab으로 이동 후 ADD 합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/136330216-b9d5e688-101b-4972-a4c2-2fc98701f420.png\" alt=\"image\"></p>\n<br/>\n<br/>\n<p>Basics Tab에서는 기본 정보를 입력하고, Resource Tab에서 아래와 같이 설정합니다.\n<img src=\"https://user-images.githubusercontent.com/69498804/136331315-4813eae8-90fa-4a91-8685-90cdd8a0b4e7.png\" alt=\"image\"></p>\n<ul>\n<li>Subscription</li>\n<li>Resource Type</li>\n<li>Resource</li>\n<li>Target sub-resource (해당 설정의 경우 Self-Hosted VM을 사용하려면 datafactory로 고정입니다.)</li>\n</ul>\n<br/>\n<br/>\n<p>Configuration Tab에서는 아래와 같이 설정합니다.\n<img src=\"https://user-images.githubusercontent.com/69498804/136331788-54a9972d-b228-4930-9410-1781d796882e.png\" alt=\"image\"></p>\n<ul>\n<li>subnet : self-hosted VM의 Subnet을 선택</li>\n<li>Resource Group : Self-hoted VM이 위치하고 있는 RG 선택</li>\n</ul>\n<br/>\n<br/>\n<p>그럼 다음과 같이 생성된 Endpoint를 확인 할 수 있습니다.\n<img src=\"https://user-images.githubusercontent.com/69498804/136331888-f721eb44-1850-402a-a24c-b9d85ec7dfc1.png\" alt=\"image\"></p>\n<br/>\n<br/>\n<p>추가적으로 DataFactory Instance -> Network Tab에서도 endpoint 연결을 확인할 수 있습니다.\n<img src=\"https://user-images.githubusercontent.com/69498804/136331932-4a19e1a3-cf21-43b1-b170-7d35bc33fd40.png\" alt=\"image\"></p>\n<br/>\n<hr>\n<h2 id=\"-databricks-self-hosted-vm-연동\" style=\"position:relative;\"><a href=\"#-databricks-self-hosted-vm-%EC%97%B0%EB%8F%99\" aria-label=\" databricks self hosted vm 연동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>😂 DataBricks Self-hosted VM 연동</h2>\n<br/>\n<p>접속 루트 : Azure Data Factory Studio → 관리 → 통합런타임 → 새로만들기 → Azure, 자체 호스팅 → 자체 호스팅 → 생성\n<img src=\"https://user-images.githubusercontent.com/69498804/136332154-3d59c2fd-55fd-4d40-8de9-4715078d8fd0.png\" alt=\"image\"></p>\n<br/>\n<br/>\n<p>생성되면 아직 연결이 되지 않은 자체 호스팅 런타임이 생성되는데 접속하여<br>\n통합 런타임 파일은 다운한 뒤 설정 Tab의 Key 값을 저장해둡니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/136332397-1e076bef-c666-4551-8eae-cee4986fccee.png\" alt=\"image\"></p>\n<br/>\n<br/>\n<p>이제 JumpServer -> Self-hosted VM으로 RDP 접속 후 Self-Hosted에 다운로드 받은 런타임 파일을 설치 합니다.<br>\n설치가 완료되면 아래와 같은 intergration Runtime manager가 실행되는데 아까 저장해둔 Key 값을 입력하여 연결합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/136332713-79287322-d5bf-42c6-b09d-8f297dc4a318.png\" alt=\"image\"></p>\n<br/>\n<br/>\n<p>정상적으로 Private endpoint 설정을 했다면 아래와 같이 Runtime이 추가됩니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/136332894-38051fbd-717f-443e-8352-3631d0b4cebe.png\" alt=\"image\"></p>\n<br/>\n<hr>\n<h2 id=\"-oracle-data-ingestion\" style=\"position:relative;\"><a href=\"#-oracle-data-ingestion\" aria-label=\" oracle data ingestion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>😜 Oracle Data Ingestion</h2>\n<br/>\n<p>DataFactory -> Factory Resource -> Data Set -> create -> Oracle 검색!</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/136333296-1259339c-afc3-4a61-9a67-fa1ed1b6a87e.png\" alt=\"image\"></p>\n<br/>\n<br/>\n<p>이후 연결정보에 대한 값은 위에서 생성한 Oracle의 SID 값이나 DB 접속 정보를 입력합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/136334629-2d3c334d-2ed4-4fae-b603-7f97d9679ac1.png\" alt=\"image\"></p>\n<ul>\n<li>연결테스트 결과 : 정상!</li>\n</ul>\n<br/>\n<br/>\n<p>추가 속성설정 부분에서는 위에서 생성한 Table 값을 넣어줍니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/136334743-9d7b839b-3214-4b1c-911d-80fedf9f2fcb.png\" alt=\"image\"></p>\n<br/>\n<br/>\n<p>연결을 마치게 되면 Oracle DataSet이 생성이 되고, 해당 데이터를 확인 할 수 있습니다.\n<img src=\"https://user-images.githubusercontent.com/69498804/136335374-af3c07bd-b888-4618-beb8-1f740877625b.png\" alt=\"image\"></p>\n<br/>\n<p>이제 DataFactory의 파이프라인에서 Flow (ETL), Data Migration 등 다양한 작업을 진행할 수 있습니다.\n<img src=\"https://user-images.githubusercontent.com/69498804/136335528-cf52026c-c431-4186-ad6b-bb509b0b2c90.png\" alt=\"image\"></p>\n<p>-> 해당 부분은 다음 포스트에서 더 자세히 정리하도록 하겠습니다.</p>\n<br/>\n<hr>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며…</h2>\n<p>GCP의 경우 DataFlow, Proc 등 많은 Resource 들을 사용해봤지만 이제 Azure 쪽의 Data Rosouce를 사용해보려고 합니다.<br>\n다음 포스트에서 뵙겠습니다.</p>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-azure-datafactory\">✔ Azure DataFactory?</a></li>\n<li><a href=\"#-%EA%B5%AC%EC%B6%95-%EC%98%88%EC%A0%95-architecture\">👌 구축 예정 Architecture</a></li>\n<li><a href=\"#-datafactory-%EC%83%9D%EC%84%B1\">✌ DataFactory 생성.</a></li>\n<li><a href=\"#-oracle-db-%EA%B5%AC%EC%B6%95-azure-vm\">👍 Oracle DB 구축 (Azure VM)</a></li>\n<li>\n<p><a href=\"#%F0%9F%A4%A6%E2%99%82%EF%B8%8F-azure-infra-network-%EA%B5%AC%EC%84%B1\">🤦‍♂️ Azure Infra (Network) 구성</a></p>\n<ul>\n<li><a href=\"#azure-network-logic\">Azure Network Logic</a></li>\n<li><a href=\"#vpc-endpoint-%EC%83%9D%EC%84%B1\">VPC Endpoint 생성</a></li>\n</ul>\n</li>\n<li><a href=\"#-databricks-self-hosted-vm-%EC%97%B0%EB%8F%99\">😂 DataBricks Self-hosted VM 연동</a></li>\n<li><a href=\"#-oracle-data-ingestion\">😜 Oracle Data Ingestion</a></li>\n<li><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\">마치며…</a></li>\n</ul>\n</div>","frontmatter":{"date":"September 05, 2021","title":"[DATA, AZURE] Azure DataFactory로 Oracle Data 수집하기","categories":"CLOUD DATA","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/azure-datafactory/"}},"prev":{"id":"c0b1f1d9-1ce1-51df-9998-f2fdcca0e5a7","html":"<p>머리말  </p>\n<p>저번 포스트에서 DataProc에 대한 설명과 간단한 사용법을 다뤄봤었습니다.<br>\n이번에는 DataProc Cluster에 Pyspark Script를 사용해서\n자동화 JOB을 만들어 보겠습니다. 파이썬을 첨가해서  </p>\n<hr>\n<h2 id=\"-data\" style=\"position:relative;\"><a href=\"#-data\" aria-label=\" data permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ Data</h2>\n<p>Data의 경우에는 이전 포스트에서 다뤘었던 Covid-19의 기상 데이터를 기반으로 진행합니다.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116961186-9e637480-acdd-11eb-906f-9e340165dee1.JPG\" alt=\"12312312\"></p>\n<ul>\n<li>용량 : 약 51GB</li>\n<li>행 : 542,304,210</li>\n</ul>\n<br/>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116961225-bfc46080-acdd-11eb-930e-ec68574417e5.JPG\" alt=\"2222\"></p>\n<ul>\n<li>데이터 형식 요약</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"-python-script\" style=\"position:relative;\"><a href=\"#-python-script\" aria-label=\" python script permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍 Python Script</h2>\n<p>위의 데이터에서 특정 그룹(나라, 날짜) 별로 MAX,MIN,AVG 값들의 평균 값을 구하는 스크립트 </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pyspark<span class=\"token punctuation\">.</span>context <span class=\"token keyword\">import</span> SparkContext\n<span class=\"token keyword\">from</span> pyspark<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span>session <span class=\"token keyword\">import</span> SparkSession\nsc <span class=\"token operator\">=</span> SparkContext<span class=\"token punctuation\">(</span><span class=\"token string\">'local'</span><span class=\"token punctuation\">)</span>\nspark <span class=\"token operator\">=</span> SparkSession<span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>spark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n\nread_path <span class=\"token operator\">=</span> <span class=\"token string\">\"gs://nasa_us/\"</span>\nwrite_path <span class=\"token operator\">=</span> <span class=\"token string\">'gs://proc_result/result/'</span>\n\n\n<span class=\"token comment\"># def for columns cheange</span>\n\n<span class=\"token comment\"># ------------------------------------------------------------------</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">renameCols</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">,</span> old_columns<span class=\"token punctuation\">,</span> new_columns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> old_col<span class=\"token punctuation\">,</span>new_col <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>old_columns<span class=\"token punctuation\">,</span>new_columns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        df <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>withColumnRenamed<span class=\"token punctuation\">(</span>old_col<span class=\"token punctuation\">,</span>new_col<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> df\n\n\n<span class=\"token comment\"># Old_columns</span>\nold_columns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'avg(min_temperature_air_2m_f)'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'avg(max_temperature_air_2m_f)'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'avg(avg_temperature_air_2m_f)'</span>\n                <span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># New_columns</span>\nnew_columns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'temperature_air_min_avg'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'temperature_air_max_avg'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'temperature_air_avg_avg'</span>\n                <span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># --------------------------------------------</span>\n<span class=\"token comment\"># ----------------------</span>\n\n<span class=\"token comment\"># Read CSV from GCS</span>\ndf <span class=\"token operator\">=</span> spark<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">.</span>csv<span class=\"token punctuation\">(</span>read_path<span class=\"token punctuation\">,</span> header<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> inferSchema<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># data transform</span>\ndf <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span><span class=\"token string\">'country'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'date'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>agg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'min_temperature_air_2m_f'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'avg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'max_temperature_air_2m_f'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'avg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'avg_temperature_air_2m_f'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'avg'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\ndf2 <span class=\"token operator\">=</span> renameCols<span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">,</span> old_columns<span class=\"token punctuation\">,</span> new_columns<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Write CSV to GCS</span>\ndf2<span class=\"token punctuation\">.</span>coalesce<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">.</span>option<span class=\"token punctuation\">(</span><span class=\"token string\">\"header\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">(</span><span class=\"token string\">\"overwrite\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>csv<span class=\"token punctuation\">(</span>write_path<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>간단 설명 : GCS에서 CSV Format의 Data를 읽고 ETL 작업 후 결과를 GCS에 저장  </li>\n<li>Bigquery Table Data를 csv화 시키고 GCS에 저장하는 방법은 <a href=\"https://nasa1515.tech/gcp_dataproc/\">이전포스트</a>를 확인하세요</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"-dataproc-job-생성\" style=\"position:relative;\"><a href=\"#-dataproc-job-%EC%83%9D%EC%84%B1\" aria-label=\" dataproc job 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👌 DataProc Job 생성</h2>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116962299-91945000-ace0-11eb-8e8f-20ea0f9f5b15.JPG\" alt=\"333\"></p>\n<ul>\n<li>위와 같이 DataProc - JOB -> 작업 제출로 JOB을 생성합니다.  </li>\n</ul>\n<br/>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116962386-c6a0a280-ace0-11eb-96f5-aaaad00c4588.JPG\" alt=\"44444\"></p>\n<ul>\n<li>Cluster는 실행 할 Cluster를 지정합니다.</li>\n<li>작업 유형은 Pyspark를 선택합니다. </li>\n<li>Python File의 경우 미리 GCS에 올려놓고 지정하면 됩니다.  </li>\n</ul>\n<br/>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116962498-12ebe280-ace1-11eb-835a-2b85ed26c91c.JPG\" alt=\"캡처55555\"></p>\n<ul>\n<li>위와 같이 해당 작업이 생성되면서 실행되게 되고<br>\nJOB의 완료 된 후에는 결과 및 로그가 출력되게 됩니다.  </li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"-결과-확인\" style=\"position:relative;\"><a href=\"#-%EA%B2%B0%EA%B3%BC-%ED%99%95%EC%9D%B8\" aria-label=\" 결과 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐱‍🏍 결과 확인</h2>\n<p>Script 실행대로 GCS에 ETL 결과 파일이 다음과 같이 저장되었습니다.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116962590-5c3c3200-ace1-11eb-8614-8e54e3664677.JPG\" alt=\"66666666\"></p>\n<br/>\n<p>그럼 해당 CSV 파일을 기반으로 BigQuery에 Table을 만들어 보겠습니다.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116962680-a0c7cd80-ace1-11eb-84fa-c3e8ca5a092b.JPG\" alt=\"65446565464\"></p>\n<br/>\n<p>데이터를 확인해보면 Script에서 실행 된 ETL 결과만 남아있는 것을 확인 가능합니다.</p>\n<ul>\n<li>\n<p>스키마 데이터</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116963266-59424100-ace3-11eb-9d2a-e3549f04bcae.JPG\" alt=\"77777\"></p>\n<br/>\n</li>\n<li>\n<p>결과 데이터</p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/116963305-76770f80-ace3-11eb-800d-7cb6f0762ef5.JPG\" alt=\"캡처332131\"></p>\n<br/>\n</li>\n</ul>\n<h2 id=\"끝\" style=\"position:relative;\"><a href=\"#%EB%81%9D\" aria-label=\"끝 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>끝!</h2>\n<hr>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며…</h2>\n<p>DataProc에 대해서는 어떻게 사용하는지 대충 알아 본 것 같습니다.<br>\n그래서 다음 포스트에서는 Proc과 동일한 서비스를 제공하는 DataBricks를 사용해보겠습니다.  </p>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-data\">✔ Data</a></li>\n<li><a href=\"#-python-script\">👍 Python Script</a></li>\n<li><a href=\"#-dataproc-job-%EC%83%9D%EC%84%B1\">👌 DataProc Job 생성</a></li>\n<li><a href=\"#-%EA%B2%B0%EA%B3%BC-%ED%99%95%EC%9D%B8\">🐱‍🏍 결과 확인</a></li>\n<li><a href=\"#%EB%81%9D\">끝!</a></li>\n<li><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\">마치며…</a></li>\n</ul>\n</div>","frontmatter":{"date":"September 10, 2021","title":"[DATA, GCP] - GCP DataProc 2탄 Pyspark JOB Access","categories":"CLOUD DATA","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/gcp-dataproc2/"}},"site":{"siteMetadata":{"siteUrl":"https://nasa1515.com","comments":{"utterances":{"repo":"nasa1515/nasablog"}}}}},"pageContext":{"slug":"/gcp-dataproc/","nextSlug":"/azure-datafactory/","prevSlug":"/gcp-dataproc2/"}},"staticQueryHashes":["1073350324","2938748437"]}