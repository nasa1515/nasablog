{"componentChunkName":"component---src-templates-blog-template-js","path":"/linux-sed/","result":{"data":{"cur":{"id":"18adfc92-7a37-5216-a788-0d0c92aaa9d9","html":"<p>머리말  </p>\n<p>이미 2년정도 실무를 경험하면서 스크립트는 지겹도록 작성해서 이미 익숙한 명령어이지만<br>\n이 명령어도 쓰는 옵션만 쓰고 쓰지 않았던 옵션에 대해서는 상세하게 알지 못했습니다.<br>\n이번 포스트를 쓰면서 머리속에 지식을 박아넣습니다..</p>\n<hr>\n<h2 id=\"-sedstreamlined-editor-\" style=\"position:relative;\"><a href=\"#-sedstreamlined-editor-\" aria-label=\" sedstreamlined editor  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ Sed(streamlined editor) ?</h2>\n<p><code class=\"language-text\">sed</code>는 대화형 기능이 없는 편집기입니다.  </p>\n<ul>\n<li>명령행에서 직접 편집 명령어와 파일을 지정하여 작업한 후 결과를 화면으로 확인합니다.  </li>\n<li>sed 편집기는 원본을 손상하지 않는다.  </li>\n<li>리다이렉션을 이용하여 편집 결과를 파일로 저장하여 확인할 수 있다.  </li>\n<li>sed 명령어는 <code class=\"language-text\">streamlined editor</code>를 의미합니다. streamlined = ‘능률적인’을 의미하듯 정말 편한 명령어입니다.</li>\n</ul>\n<p><code class=\"language-text\">sed</code> 명령어의 형식은 다음과 같습니다  </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ sed <span class=\"token punctuation\">[</span>옵션<span class=\"token punctuation\">]</span> 스크립트 입력파일<span class=\"token number\">1</span> <span class=\"token punctuation\">[</span>입력파일<span class=\"token number\">2</span> <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<br/>\n<hr>\n<h2 id=\"-sed-동작\" style=\"position:relative;\"><a href=\"#-sed-%EB%8F%99%EC%9E%91\" aria-label=\" sed 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✌ Sed 동작</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">패턴 스페이스(Pattern space)</code>와 <code class=\"language-text\">홀드 스페이스(hold space)</code>  </p>\n<p>sed 명령어는 동작시 내부적으로 두개의 워크스페이스를 사용하는데,<br>\n(마치 우리 복사 붙여넣기의 임시 저장소 클립보드와 같다)<br>\n이 두 버퍼를 <code class=\"language-text\">패턴 스페이스(=패턴 버퍼)</code>와 <code class=\"language-text\">홀드 스페이스(=홀드 버퍼)</code>라고 합니다.</p>\n<p><img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&#x26;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbnZHd6%2FbtqEsDE9VUa%2FpmR81oKgh75TFjJuMNsGQ1%2Fimg.png\"></p>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">패턴 버퍼</code>: sed가 파일을 라인단위로 읽을 때 그 읽힌 라인이 저장되는 임시 공간<br>\n우리가 sed명령어로 출력하라는 명령을 주면 여기 있는 버퍼 내용을 출력하는거고,<br>\n뭔가 조작을 하면 여기 저장되어 있는 내용을 조작하는 겁니다. <code class=\"language-text\">원본을 건드는게 아닙니다.</code><br>\n즉 이 버퍼는 현재 내가 담고 있는 정보를 갖고 있겠죠. 텍스트 1라인에서 2라인으로 넘어가 글을 읽게 되면<br>\n여기 패턴 버퍼에는 2라인 현재 내용이 저장되겠죠. </p>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">홀드 버퍼</code> : 홀드 스페이스는 패턴 버퍼처럼 짧은 순간 임시 버퍼가 아니라<br>\n좀 더 오랜 기간 가지고 있는 저장소입니다.<br>\n2라인 작업중이더라도 1라인을 기억하고 있을 수 있는 거예요.</p>\n<p>즉, 어떤 내용을 홀드 스페이스에 저장하면,<br>\nsed가 다음 행을 읽더라도 나중에 내가 원할 때 불러와서 재사용할 수 있는 버퍼가 홀드 버퍼가 됩니다. </p>\n</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"-sed-사용법\" style=\"position:relative;\"><a href=\"#-sed-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\" sed 사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍 Sed 사용법</h2>\n<ul>\n<li>\n<p>사용법 설명을 위해서 특정 정보가 들어가 있는 파일을 준비 했습니다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">student@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span><span class=\"token operator\">/</span>다운로드$ cat employees \nEMPLOYEE_ID\tFIRST_NAME\tLAST_NAME\tEMAIL\tPHONE_NUMBER\tHIRE_DATE\tJOB_ID\tSALARY\tCOMMISSION_PCT\tMANAGER_ID\tDEPARTMENT_ID\n<span class=\"token number\">100</span>\tSteven\tKing\tSKING\t<span class=\"token number\">515.123</span><span class=\"token number\">.4567</span>\t<span class=\"token number\">03</span><span class=\"token operator\">/</span><span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">17</span>\tAD_PRES\t<span class=\"token number\">24000</span>\t\t\t<span class=\"token number\">90</span>\n<span class=\"token number\">101</span>\tNeena\tKochhar\tNKOCHHAR\t<span class=\"token number\">515.123</span><span class=\"token number\">.4568</span>\t<span class=\"token number\">05</span><span class=\"token operator\">/</span><span class=\"token number\">09</span><span class=\"token operator\">/</span><span class=\"token number\">21</span>\tAD_VP\t<span class=\"token number\">17000</span>\t\t<span class=\"token number\">100</span>\t<span class=\"token number\">90</span>\n<span class=\"token number\">102</span>\tLex\tDe Haan\tLDEHAAN\t<span class=\"token number\">515.123</span><span class=\"token number\">.4569</span>\t<span class=\"token number\">01</span><span class=\"token operator\">/</span><span class=\"token number\">01</span><span class=\"token operator\">/</span><span class=\"token number\">13</span>\tAD_VP\t<span class=\"token number\">17000</span>\t\t<span class=\"token number\">100</span>\t<span class=\"token number\">90</span>\n<span class=\"token number\">103</span>\tAlexander\tHunold\tAHUNOLD\t<span class=\"token number\">590.423</span><span class=\"token number\">.4567</span>\t<span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">01</span><span class=\"token operator\">/</span><span class=\"token number\">03</span>\tIT_PROG\t<span class=\"token number\">9000</span>\t\t<span class=\"token number\">102</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">104</span>\tBruce\tErnst\tBERNST\t<span class=\"token number\">590.423</span><span class=\"token number\">.4568</span>\t<span class=\"token number\">07</span><span class=\"token operator\">/</span><span class=\"token number\">05</span><span class=\"token operator\">/</span><span class=\"token number\">21</span>\tIT_PROG\t<span class=\"token number\">6000</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">105</span>\tDavid\tAustin\tDAUSTIN\t<span class=\"token number\">590.423</span><span class=\"token number\">.4569</span>\t<span class=\"token number\">05</span><span class=\"token operator\">/</span><span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">25</span>\tIT_PROG\t<span class=\"token number\">4800</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">106</span>\tValli\tPataballa\tVPATABAL\t<span class=\"token number\">590.423</span><span class=\"token number\">.4560</span>\t<span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">05</span>\tIT_PROG\t<span class=\"token number\">4800</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">107</span>\tDiana\tLorentz\tDLORENTZ\t<span class=\"token number\">590.423</span><span class=\"token number\">.5567</span>\t<span class=\"token number\">07</span><span class=\"token operator\">/</span><span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">07</span>\tIT_PROG\t<span class=\"token number\">4200</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">108</span>\tNancy\tGreenberg\tNGREENBE\t<span class=\"token number\">515.124</span><span class=\"token number\">.4569</span>\t<span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">08</span><span class=\"token operator\">/</span><span class=\"token number\">17</span>\tFI_MGR\t<span class=\"token number\">12008</span>\t\t<span class=\"token number\">101</span>\t<span class=\"token number\">100</span>\n<span class=\"token number\">109</span>\tDaniel\tFaviet\tDFAVIET\t<span class=\"token number\">515.124</span><span class=\"token number\">.4169</span>\t<span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">08</span><span class=\"token operator\">/</span><span class=\"token number\">16</span>\tFI_ACCOUNT\t<span class=\"token number\">9000</span>\t\t<span class=\"token number\">108</span>\t<span class=\"token number\">100</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<h3 id=\"sed-명령어-자주쓰는-대표적-사용법\" style=\"position:relative;\"><a href=\"#sed-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%9E%90%EC%A3%BC%EC%93%B0%EB%8A%94-%EB%8C%80%ED%91%9C%EC%A0%81-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"sed 명령어 자주쓰는 대표적 사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>sed 명령어 자주쓰는 대표적 사용법</h3>\n<p>편집기 기능을 모두 수행할 수 있다보니 sed의 <code class=\"language-text\">subcommand</code><br>\n즉 sed와 같이 쓰이는 명령어 조합이 굉장히 많습니다.</p>\n<p>자세한 옵션들은 하단에 쭉 다루도록하고 대표적으로 자주 쓰이는 명령어 조합부터 일단 살펴보겠습니다.  </p>\n</li>\n</ul>\n<br/>\n<h3 id=\"특정-범위만큼-파일내용-출력하기\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%A0%95-%EB%B2%94%EC%9C%84%EB%A7%8C%ED%81%BC-%ED%8C%8C%EC%9D%BC%EB%82%B4%EC%9A%A9-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0\" aria-label=\"특정 범위만큼 파일내용 출력하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특정 범위만큼 파일내용 출력하기</h3>\n<ol>\n<li>\n<p><code class=\"language-text\">sed -n '1p' employees;</code><br>\nemployees파일에서 첫 번째 행만 출력해서 화면에 보여준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">student@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>won<span class=\"token operator\">/</span>script$ sed <span class=\"token operator\">-</span>n '1p' employees \nEMPLOYEE_ID\tFIRST_NAME\tLAST_NAME\tEMAIL\tPHONE_NUMBER\tHIRE_DATE\tJOB_ID\tSALARY\tCOMMISSION_PCT\tMANAGER_ID\tDEPARTMENT_ID</code></pre></div>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">sed -n '1,3p' employees;</code><br>\nemployees파일에서 1~3라인 범위의 내용을 출력해서 보여준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">student@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>won<span class=\"token operator\">/</span>script$ sed <span class=\"token operator\">-</span>n '<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>3p' employees \nEMPLOYEE_ID\tFIRST_NAME\tLAST_NAME\tEMAIL\tPHONE_NUMBER\tHIRE_DATE\tJOB_ID\tSALARY\tCOMMISSION_PCT\tMANAGER_ID\tDEPARTMENT_ID\n<span class=\"token number\">100</span>\tSteven\tKing\tSKING\t<span class=\"token number\">515.123</span><span class=\"token number\">.4567</span>\t<span class=\"token number\">03</span><span class=\"token operator\">/</span><span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">17</span>\tAD_PRES\t<span class=\"token number\">24000</span>\t\t\t<span class=\"token number\">90</span>\n<span class=\"token number\">101</span>\tNeena\tKochhar\tNKOCHHAR\t<span class=\"token number\">515.123</span><span class=\"token number\">.4568</span>\t<span class=\"token number\">05</span><span class=\"token operator\">/</span><span class=\"token number\">09</span><span class=\"token operator\">/</span><span class=\"token number\">21</span>\tAD_VP\t<span class=\"token number\">17000</span>\t\t<span class=\"token number\">100</span>\t<span class=\"token number\">90</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">sed -n '8,$p' employees;</code><br>\nemployees파일에서 8라인부터 파일끝까지 출력해서 보여준다. <code class=\"language-text\">$는 '끝'을 의미</code>합니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">student@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>won<span class=\"token operator\">/</span>script$ sed <span class=\"token operator\">-</span>n '<span class=\"token number\">8</span><span class=\"token punctuation\">,</span>$p' employees \n<span class=\"token number\">106</span>\tValli\tPataballa\tVPATABAL\t<span class=\"token number\">590.423</span><span class=\"token number\">.4560</span>\t<span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">05</span>\tIT_PROG\t<span class=\"token number\">4800</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">107</span>\tDiana\tLorentz\tDLORENTZ\t<span class=\"token number\">590.423</span><span class=\"token number\">.5567</span>\t<span class=\"token number\">07</span><span class=\"token operator\">/</span><span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">07</span>\tIT_PROG\t<span class=\"token number\">4200</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">108</span>\tNancy\tGreenberg\tNGREENBE\t<span class=\"token number\">515.124</span><span class=\"token number\">.4569</span>\t<span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">08</span><span class=\"token operator\">/</span><span class=\"token number\">17</span>\tFI_MGR\t<span class=\"token number\">12008</span>\t\t<span class=\"token number\">101</span>\t<span class=\"token number\">100</span>\n<span class=\"token number\">109</span>\tDaniel\tFaviet\tDFAVIET\t<span class=\"token number\">515.124</span><span class=\"token number\">.4169</span>\t<span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">08</span><span class=\"token operator\">/</span><span class=\"token number\">16</span>\tFI_ACCOUNT\t<span class=\"token number\">9000</span>\t\t<span class=\"token number\">108</span>\t<span class=\"token number\">100</span></code></pre></div>\n<p>3번 명령같은 경우 첫번째 헤더가 나오지 않아 어떤 데이터인지 구분하기가 힘드네요</p>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">sed -n -e '1p' -e '8,$p' employees</code><br>\n여러개의 편집 명령을 실행할 때 <code class=\"language-text\">-e 옵션</code>을 씁니다. 다음에 오는 것도 편집 명령어라는걸 알려줍니다.\n첫 번째 행과 8~끝 행 두 부분을 출력해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">student@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>won<span class=\"token operator\">/</span>script$ sed <span class=\"token operator\">-</span>n <span class=\"token operator\">-</span>e '1p' <span class=\"token operator\">-</span>e '<span class=\"token number\">8</span><span class=\"token punctuation\">,</span>$p' employees \nEMPLOYEE_ID\tFIRST_NAME\tLAST_NAME\tEMAIL\tPHONE_NUMBER\tHIRE_DATE\tJOB_ID\tSALARY\tCOMMISSION_PCT\tMANAGER_ID\tDEPARTMENT_ID\n<span class=\"token number\">106</span>\tValli\tPataballa\tVPATABAL\t<span class=\"token number\">590.423</span><span class=\"token number\">.4560</span>\t<span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">05</span>\tIT_PROG\t<span class=\"token number\">4800</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">107</span>\tDiana\tLorentz\tDLORENTZ\t<span class=\"token number\">590.423</span><span class=\"token number\">.5567</span>\t<span class=\"token number\">07</span><span class=\"token operator\">/</span><span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">07</span>\tIT_PROG\t<span class=\"token number\">4200</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">108</span>\tNancy\tGreenberg\tNGREENBE\t<span class=\"token number\">515.124</span><span class=\"token number\">.4569</span>\t<span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">08</span><span class=\"token operator\">/</span><span class=\"token number\">17</span>\tFI_MGR\t<span class=\"token number\">12008</span>\t\t<span class=\"token number\">101</span>\t<span class=\"token number\">100</span>\n<span class=\"token number\">109</span>\tDaniel\tFaviet\tDFAVIET\t<span class=\"token number\">515.124</span><span class=\"token number\">.4169</span>\t<span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">08</span><span class=\"token operator\">/</span><span class=\"token number\">16</span>\tFI_ACCOUNT\t<span class=\"token number\">9000</span>\t\t<span class=\"token number\">108</span>\t<span class=\"token number\">100</span></code></pre></div>\n<p>위 실습한 명령에서의 <code class=\"language-text\">p는 print의 약자로 출력</code>을 의미합니다.<br>\n컴마 <code class=\"language-text\">(`)</code>는 주소 범위를 지정해요.</p>\n<ul>\n<li>sed는 원본을 건드리지 않습니다.<br>\n그런고로 sed로 작업한 부분만 억제해서 출력시키고 싶다면 <code class=\"language-text\">-n옵션</code>을 써줘야해요.<br>\n그래서 보통 <code class=\"language-text\">-n옵션</code>은 <code class=\"language-text\">p</code>와 항상 같이 사용됩니다.</li>\n</ul>\n</li>\n</ol>\n<br/>\n<h3 id=\"특정-단어로-시작하는-행들만-추출하기\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%A0%95-%EB%8B%A8%EC%96%B4%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%ED%96%89%EB%93%A4%EB%A7%8C-%EC%B6%94%EC%B6%9C%ED%95%98%EA%B8%B0\" aria-label=\"특정 단어로 시작하는 행들만 추출하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특정 단어로 시작하는 행들만 추출하기</h3>\n<p>보통 로그파일의 경우 데이터들의 구별하기 위해 <code class=\"language-text\">unique</code>한 값이 맨앞에 붙는 경우가 많습니다.</p>\n<p>예를들어 <code class=\"language-text\">log20200816</code> 이라는 파일이 있는데 이 날짜에 처리된 거래들이 기록된다고 합시다.<br>\n당연히 거래를 구분하는 유니크값으로 상품코드, 거래코드등이 붙을 겁니다.</p>\n<br/>\n<ol>\n<li>\n<p><code class=\"language-text\">sed -n '/^107/p' employees</code><br>\nemployees파일에서 107로 <code class=\"language-text\">시작</code>하는 행만 출력해서 화면에 보여준다.<br>\n여기서 ’^‘는 메타문자로 ‘시작’을 의미합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">student@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>won<span class=\"token operator\">/</span>script$ sed <span class=\"token operator\">-</span>n '<span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token number\">107</span><span class=\"token operator\">/</span>p' employees \n<span class=\"token number\">107</span>\tDiana\tLorentz\tDLORENTZ\t<span class=\"token number\">590.423</span><span class=\"token number\">.5567</span>\t<span class=\"token number\">07</span><span class=\"token operator\">/</span><span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">07</span>\tIT_PROG\t<span class=\"token number\">4200</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">sed -n '/103/p' employees</code><br>\nemployees파일에서 103을 <code class=\"language-text\">포함</code>하고 있는 행들을 출력해서 보여준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">student@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>won<span class=\"token operator\">/</span>script$ sed <span class=\"token operator\">-</span>n '<span class=\"token operator\">/</span><span class=\"token number\">103</span><span class=\"token operator\">/</span>p' employees \n<span class=\"token number\">103</span>\tAlexander\tHunold\tAHUNOLD\t<span class=\"token number\">590.423</span><span class=\"token number\">.4567</span>\t<span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">01</span><span class=\"token operator\">/</span><span class=\"token number\">03</span>\tIT_PROG\t<span class=\"token number\">9000</span>\t\t<span class=\"token number\">102</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">104</span>\tBruce\tErnst\tBERNST\t<span class=\"token number\">590.423</span><span class=\"token number\">.4568</span>\t<span class=\"token number\">07</span><span class=\"token operator\">/</span><span class=\"token number\">05</span><span class=\"token operator\">/</span><span class=\"token number\">21</span>\tIT_PROG\t<span class=\"token number\">6000</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">105</span>\tDavid\tAustin\tDAUSTIN\t<span class=\"token number\">590.423</span><span class=\"token number\">.4569</span>\t<span class=\"token number\">05</span><span class=\"token operator\">/</span><span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">25</span>\tIT_PROG\t<span class=\"token number\">4800</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">106</span>\tValli\tPataballa\tVPATABAL\t<span class=\"token number\">590.423</span><span class=\"token number\">.4560</span>\t<span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">05</span>\tIT_PROG\t<span class=\"token number\">4800</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">107</span>\tDiana\tLorentz\tDLORENTZ\t<span class=\"token number\">590.423</span><span class=\"token number\">.5567</span>\t<span class=\"token number\">07</span><span class=\"token operator\">/</span><span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">07</span>\tIT_PROG\t<span class=\"token number\">4200</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span></code></pre></div>\n</li>\n</ol>\n<br/>\n<h3 id=\"파일에서-공백으로-이루어지거나-빈줄-제거하기\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC%EC%97%90%EC%84%9C-%EA%B3%B5%EB%B0%B1%EC%9C%BC%EB%A1%9C-%EC%9D%B4%EB%A3%A8%EC%96%B4%EC%A7%80%EA%B1%B0%EB%82%98-%EB%B9%88%EC%A4%84-%EC%A0%9C%EA%B1%B0%ED%95%98%EA%B8%B0\" aria-label=\"파일에서 공백으로 이루어지거나 빈줄 제거하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일에서 공백으로 이루어지거나 빈줄 제거하기</h3>\n<br/>\n<ol>\n<li>\n<p><code class=\"language-text\">sed '/^$/d' employees</code><br>\nemployees파일에서 빈 라인들을 지운 후 내용을 출력해준다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">student@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>won<span class=\"token operator\">/</span>script$ sed '<span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token operator\">&amp;</span><span class=\"token operator\">/</span>d' employees \nEMPLOYEE_ID\tFIRST_NAME\tLAST_NAME\tEMAIL\tPHONE_NUMBER\tHIRE_DATE\tJOB_ID\tSALARY\tCOMMISSION_PCT\tMANAGER_ID\tDEPARTMENT_ID\n<span class=\"token number\">100</span>\tSteven\tKing\tSKING\t<span class=\"token number\">515.123</span><span class=\"token number\">.4567</span>\t<span class=\"token number\">03</span><span class=\"token operator\">/</span><span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">17</span>\tAD_PRES\t<span class=\"token number\">24000</span>\t\t\t<span class=\"token number\">90</span>\n<span class=\"token number\">101</span>\tNeena\tKochhar\tNKOCHHAR\t<span class=\"token number\">515.123</span><span class=\"token number\">.4568</span>\t<span class=\"token number\">05</span><span class=\"token operator\">/</span><span class=\"token number\">09</span><span class=\"token operator\">/</span><span class=\"token number\">21</span>\tAD_VP\t<span class=\"token number\">17000</span>\t\t<span class=\"token number\">100</span>\t<span class=\"token number\">90</span>\n<span class=\"token number\">102</span>\tLex\tDe Haan\tLDEHAAN\t<span class=\"token number\">515.123</span><span class=\"token number\">.4569</span>\t<span class=\"token number\">01</span><span class=\"token operator\">/</span><span class=\"token number\">01</span><span class=\"token operator\">/</span><span class=\"token number\">13</span>\tAD_VP\t<span class=\"token number\">17000</span>\t\t<span class=\"token number\">100</span>\t<span class=\"token number\">90</span>\n<span class=\"token number\">103</span>\tAlexander\tHunold\tAHUNOLD\t<span class=\"token number\">590.423</span><span class=\"token number\">.4567</span>\t<span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">01</span><span class=\"token operator\">/</span><span class=\"token number\">03</span>\tIT_PROG\t<span class=\"token number\">9000</span>\t\t<span class=\"token number\">102</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">104</span>\tBruce\tErnst\tBERNST\t<span class=\"token number\">590.423</span><span class=\"token number\">.4568</span>\t<span class=\"token number\">07</span><span class=\"token operator\">/</span><span class=\"token number\">05</span><span class=\"token operator\">/</span><span class=\"token number\">21</span>\tIT_PROG\t<span class=\"token number\">6000</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">105</span>\tDavid\tAustin\tDAUSTIN\t<span class=\"token number\">590.423</span><span class=\"token number\">.4569</span>\t<span class=\"token number\">05</span><span class=\"token operator\">/</span><span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">25</span>\tIT_PROG\t<span class=\"token number\">4800</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">106</span>\tValli\tPataballa\tVPATABAL\t<span class=\"token number\">590.423</span><span class=\"token number\">.4560</span>\t<span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">05</span>\tIT_PROG\t<span class=\"token number\">4800</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">107</span>\tDiana\tLorentz\tDLORENTZ\t<span class=\"token number\">590.423</span><span class=\"token number\">.5567</span>\t<span class=\"token number\">07</span><span class=\"token operator\">/</span><span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">07</span>\tIT_PROG\t<span class=\"token number\">4200</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">108</span>\tNancy\tGreenberg\tNGREENBE\t<span class=\"token number\">515.124</span><span class=\"token number\">.4569</span>\t<span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">08</span><span class=\"token operator\">/</span><span class=\"token number\">17</span>\tFI_MGR\t<span class=\"token number\">12008</span>\t\t<span class=\"token number\">101</span>\t<span class=\"token number\">100</span>\n<span class=\"token number\">109</span>\tDaniel\tFaviet\tDFAVIET\t<span class=\"token number\">515.124</span><span class=\"token number\">.4169</span>\t<span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">08</span><span class=\"token operator\">/</span><span class=\"token number\">16</span>\tFI_ACCOUNT\t<span class=\"token number\">9000</span>\t\t<span class=\"token number\">108</span>\t<span class=\"token number\">100</span></code></pre></div>\n<p>추가적으로 빈 라인들을 삭제한 후 결과를 파일로 저장 하고 싶다면 아래 형식을 사용합니다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">sed '<span class=\"token operator\">/</span><span class=\"token operator\">^</span>$<span class=\"token operator\">/</span>d' employees <span class=\"token operator\">></span> new_employees   \n<span class=\"token preprocessor property\"># </span><span class=\"token string\">\" > \"</span><span class=\"token punctuation\">(</span>다이렉션<span class=\"token punctuation\">)</span>은 덮어쓰기 기능을 합니다<span class=\"token punctuation\">.</span>\n<span class=\"token preprocessor property\"># </span><span class=\"token string\">\" >> \"</span> <span class=\"token punctuation\">(</span>리다이렉션<span class=\"token punctuation\">)</span>의 경우 기존 파일이 존재하면 덧붙이게 된다<span class=\"token punctuation\">.</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">sed '/^ *$/d' employees > new_employees</code><br>\n빈 라인들이나 공백으로 채워진 행들을 삭제한 후 파일로 저장합니다.  </p>\n<p>보이는 <code class=\"language-text\">*</code>는 메타문자로 앞의 문자를 0개 이상 찾습니다.<br>\n행의 시작이 0개 이상의 공백으로 이뤄지다 끝을 맺으니 공백이거나 빈 줄을 찾아낸다는 의미가 됩니다.</p>\n<p>위의 예제에서의 <code class=\"language-text\">'d'</code> 서브명령어는 <code class=\"language-text\">delete</code>의 약자로 <code class=\"language-text\">삭제</code>를 의미합니다.<br>\n<code class=\"language-text\">'/'</code>사이의 단어르 포함한 모든 줄을 삭제시키는 의미입니다.<br>\n<code class=\"language-text\">^</code> 는 행의 처음을 의미하고 <code class=\"language-text\">$</code>는 행의 끝을 의미하니까 행의 처음과 끝이 같이 만나있는 것인 빈 줄을 의미합니다.  </p>\n</li>\n</ol>\n<br/>\n<hr>\n<h3 id=\"단어-치환\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%96%B4-%EC%B9%98%ED%99%98\" aria-label=\"단어 치환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단어 치환</h3>\n<ol>\n<li>\n<p><code class=\"language-text\">sed 's/IT_PROG/DEVELOPER/g' employees</code><br>\n<code class=\"language-text\">IT_PROG</code>라고 되어있는 단어를 <code class=\"language-text\">DEVELOPER</code>로 변경  </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">student@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>won<span class=\"token operator\">/</span>script$ sed 's<span class=\"token operator\">/</span>IT_PROG<span class=\"token operator\">/</span>DEVELOPER<span class=\"token operator\">/</span>g' employees \nEMPLOYEE_ID\tFIRST_NAME\tLAST_NAME\tEMAIL\tPHONE_NUMBER\tHIRE_DATE\tJOB_ID\tSALARY\tCOMMISSION_PCT\tMANAGER_ID\tDEPARTMENT_ID\n<span class=\"token number\">100</span>\tSteven\tKing\tSKING\t<span class=\"token number\">515.123</span><span class=\"token number\">.4567</span>\t<span class=\"token number\">03</span><span class=\"token operator\">/</span><span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">17</span>\tAD_PRES\t<span class=\"token number\">24000</span>\t\t\t<span class=\"token number\">90</span>\n<span class=\"token number\">101</span>\tNeena\tKochhar\tNKOCHHAR\t<span class=\"token number\">515.123</span><span class=\"token number\">.4568</span>\t<span class=\"token number\">05</span><span class=\"token operator\">/</span><span class=\"token number\">09</span><span class=\"token operator\">/</span><span class=\"token number\">21</span>\tAD_VP\t<span class=\"token number\">17000</span>\t\t<span class=\"token number\">100</span>\t<span class=\"token number\">90</span>\n<span class=\"token number\">102</span>\tLex\tDe Haan\tLDEHAAN\t<span class=\"token number\">515.123</span><span class=\"token number\">.4569</span>\t<span class=\"token number\">01</span><span class=\"token operator\">/</span><span class=\"token number\">01</span><span class=\"token operator\">/</span><span class=\"token number\">13</span>\tAD_VP\t<span class=\"token number\">17000</span>\t\t<span class=\"token number\">100</span>\t<span class=\"token number\">90</span>\n<span class=\"token number\">103</span>\tAlexander\tHunold\tAHUNOLD\t<span class=\"token number\">590.423</span><span class=\"token number\">.4567</span>\t<span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">01</span><span class=\"token operator\">/</span><span class=\"token number\">03</span>\tDEVELOPER\t<span class=\"token number\">9000</span>\t\t<span class=\"token number\">102</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">104</span>\tBruce\tErnst\tBERNST\t<span class=\"token number\">590.423</span><span class=\"token number\">.4568</span>\t<span class=\"token number\">07</span><span class=\"token operator\">/</span><span class=\"token number\">05</span><span class=\"token operator\">/</span><span class=\"token number\">21</span>\tDEVELOPER\t<span class=\"token number\">6000</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">105</span>\tDavid\tAustin\tDAUSTIN\t<span class=\"token number\">590.423</span><span class=\"token number\">.4569</span>\t<span class=\"token number\">05</span><span class=\"token operator\">/</span><span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">25</span>\tDEVELOPER\t<span class=\"token number\">4800</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">106</span>\tValli\tPataballa\tVPATABAL\t<span class=\"token number\">590.423</span><span class=\"token number\">.4560</span>\t<span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">05</span>\tDEVELOPER\t<span class=\"token number\">4800103</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">107</span>\tDiana\tLorentz\tDLORENTZ\t<span class=\"token number\">590.423</span><span class=\"token number\">.5567</span>\t<span class=\"token number\">07</span><span class=\"token operator\">/</span><span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">07</span>\tDEVELOPER\t<span class=\"token number\">4200</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">108</span>\tNancy\tGreenberg\tNGREENBE\t<span class=\"token number\">515.124</span><span class=\"token number\">.4569</span>\t<span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">08</span><span class=\"token operator\">/</span><span class=\"token number\">17</span>\tFI_MGR\t<span class=\"token number\">12008</span>\t\t<span class=\"token number\">101</span>\t<span class=\"token number\">100</span>\n<span class=\"token number\">109</span>\tDaniel\tFaviet\tDFAVIET\t<span class=\"token number\">515.124</span><span class=\"token number\">.4169</span>\t<span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">08</span><span class=\"token operator\">/</span><span class=\"token number\">16</span>\tFI_ACCOUNT\t<span class=\"token number\">9000</span>\t\t<span class=\"token number\">108</span>\t<span class=\"token number\">100</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">sed 's/it_prog/DEVELOPER/gi' employees</code><br>\n기능은 동일하지만 <code class=\"language-text\">i</code>옵션을 사용하면 대소문자를 구분하지 않습니다.</p>\n<p>예제에서 <code class=\"language-text\">s</code>와 같이 쓰이는 <code class=\"language-text\">g</code> 플래그는 치환이 행에서 <code class=\"language-text\">전체</code>를 대상으로 이루어짐을 의미합니다.  </p>\n</li>\n</ol>\n<br/>\n<hr>\n<h2 id=\"-sed-subcommand-명령어-종류와-의미\" style=\"position:relative;\"><a href=\"#-sed-subcommand-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A2%85%EB%A5%98%EC%99%80-%EC%9D%98%EB%AF%B8\" aria-label=\" sed subcommand 명령어 종류와 의미 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🙌 SED subcommand 명령어 종류와 의미</h2>\n<ul>\n<li>\n<p>명령어 표</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">subcommand</th>\n<th>의미</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code class=\"language-text\">a</code></td>\n<td>현재 행에 하나 이상의 새로운 행을 추가합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">c</code></td>\n<td>현재 행의 내용을 새로운 내용으로 교체합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">d</code></td>\n<td>행을 삭제합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">i</code></td>\n<td>현재 행의 위에 텍스트를 삽입합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">h</code></td>\n<td>패턴 스페이스의 내용을 홀드 스페이스에 복사합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">H</code></td>\n<td>패턴 스페이스의 내용을 홀드 스페이스에 추가합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">g</code></td>\n<td>홀드 스페이스의 내용을 패턴 스페이스에 복사합니다. (패턴 스페이스가 비어있지 않는 경우 덮어쓴다)</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">G</code></td>\n<td>홀드 스페이스의 내용을 패턴 스페이스에 복사합니다. (비어있지 않은 경우에는 그 뒤에 추가)</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">l</code></td>\n<td>출력되지 않는 특수문자를 명확하게 출력합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">p</code></td>\n<td>행을 출력합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">n</code></td>\n<td>다음 입력 행을 첫 번째 명령어가 아닌 다음 명령어에서 처리하게 합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">q</code></td>\n<td>sed를 종료합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">r</code></td>\n<td>파일로부터 행을 읽어온다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">!</code></td>\n<td>선택된 행을 제외한 나머지 전체 행에 명령어를 적용합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">s</code></td>\n<td>문자열을 치환합니다.</td>\n</tr>\n</tbody>\n</table>\n<br/>\n</li>\n<li>\n<p>sed s와 같이 쓰는 치환플래그   </p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">s와 쓰이는 플래그</th>\n<th>의미</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code class=\"language-text\">g</code></td>\n<td>치환이 행 전체에 대해 이뤄진다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">p</code></td>\n<td>행을 출력합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">w</code></td>\n<td>파일에 쓴다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">x</code></td>\n<td>홀드 버퍼와 패턴 스페이스의 내용을 서로 맞바꾼다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">y</code></td>\n<td>한 문자를 다른 문자로 변환합니다. (y에 정규표현식 메타문자를 사용할 수 없다)</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<br/>\n<h2 id=\"-다양한-사용-예시\" style=\"position:relative;\"><a href=\"#-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C\" aria-label=\" 다양한 사용 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐱‍🏍 다양한 사용 예시</h2>\n<h3 id=\"1-출력-p-예시\" style=\"position:relative;\"><a href=\"#1-%EC%B6%9C%EB%A0%A5-p-%EC%98%88%EC%8B%9C\" aria-label=\"1 출력 p 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. (출력) p 예시</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">sed -n '/love/p' file</code><br>\nfile파일에서 love가 포함된 행들을 찾아 출력<br>\n(-n 옵션을 사용해야 패턴을 포함하는 줄들만 출력합니다) </p>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">sed -n '/west/,/east/p' file</code><br>\n<code class=\"language-text\">west</code>가 나오는 행과 <code class=\"language-text\">east</code>가 나오는 <code class=\"language-text\">행 사이</code>의 모든 행들이 출력.<br>\n(west가 east 다음에 나오면 west가 나오는 행부터 파일의 마지막까지 출력됩니다.) </p>\n<br/>\n</li>\n<li><code class=\"language-text\">sed -n '3,/^employee/p' file</code><br>\n3번째 행부터 employee로 시작되는 행까지 출력.</li>\n</ul>\n<br/>\n<hr>\n<h3 id=\"2-삭제-d-예시\" style=\"position:relative;\"><a href=\"#2-%EC%82%AD%EC%A0%9C-d-%EC%98%88%EC%8B%9C\" aria-label=\"2 삭제 d 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. (삭제) d 예시</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">sed '3d' file</code><br>\n파일에서 3번째 행을 삭제. (나머지 행들이 출력)  </p>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">sed '5,$d' file</code><br>\n5번째 행부터 마지막 행까지 삭제, (나머지 행들이 출력)  </p>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">sed '$d' file</code><br>\n마지막 행을 삭제. (나머지 행들이 출력)  </p>\n<br/>\n</li>\n<li><code class=\"language-text\">sed '/apple/d' file</code><br>\n파일에서 apple 포함하는 모든 행을 삭제 (나머지 행들이 출력)  </li>\n</ul>\n<br/>\n<hr>\n<h3 id=\"3-치환-s-예시\" style=\"position:relative;\"><a href=\"#3-%EC%B9%98%ED%99%98-s-%EC%98%88%EC%8B%9C\" aria-label=\"3 치환 s 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. (치환) s 예시</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">sed 's/clere/clear/g' file</code><br>\nclere라는 단어를 clear로 치환 (<code class=\"language-text\">g</code> 옵션을 사용해 행 전체)</p>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">sed -n 's/clere/clear/gp' file</code><br>\n<code class=\"language-text\">s</code>랑 <code class=\"language-text\">-n,p</code>조합이랑 같이 쓰면 변경이 일어난 행들만 출력.   </p>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">cat file | sed 's/  */ /g'</code><br>\n위와같이 다른 명령어와 같이 사용할 수도 있습니다.<br>\n공백이 여러개 존재 시 하나의 공백으로 치환해 출력 (원본 영향 없음) </p>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">sed -i 's/  */ /g' file</code><br>\n<code class=\"language-text\">-i</code>옵션을 사용 시 파일에 직접 수정을 가능케 합니다. (원본 영향 있음) </p>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">sed 's/[0-9][0-9]$/&amp;.5/' file</code><br>\n[0-9][0-9]는 0~9까지의 두 자리 숫자를 의미합니다. 그 다음에 끝을 의미하는<code class=\"language-text\">'$'</code>를 사용하면<br>\n즉 <code class=\"language-text\">'두 자리 숫자로 끝나는 행'</code>이 바꿈의 대상이 됩니다. 여기서 <code class=\"language-text\">'&amp;'</code>는 검색열에서 지정한 문자열을 대신합니다.<br>\n그 문자열 뒤에 <code class=\"language-text\">'.5'</code>가 붙습니다. 즉 두자리 숫자로 끝나는 행 <code class=\"language-text\">(ex 94)</code> 를 찾으면<br>\n뒤에 점오를 붙인 단어로 <code class=\"language-text\">(ex 94.5)</code> 치환해 보여달라는 명령어입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">student@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>won<span class=\"token operator\">/</span>script$ sed 's<span class=\"token operator\">/</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>$<span class=\"token operator\">/</span><span class=\"token operator\">&amp;</span><span class=\"token number\">.5</span><span class=\"token operator\">/</span>' datafile\nnorthwest\tNW\tCharles Main\t\t<span class=\"token number\">3.0</span>\t<span class=\"token number\">.98</span>\t<span class=\"token number\">3</span>\t<span class=\"token number\">34.5</span>\nwestern\t\tWE\tSharon Gray\t\t<span class=\"token number\">5.3</span>\t<span class=\"token number\">.97</span>\t<span class=\"token number\">5</span>\t<span class=\"token number\">23.5</span>\nsouthwest\tSW\tLewis Dalsass\t\t<span class=\"token number\">2.7</span>\t<span class=\"token number\">.8</span>\t<span class=\"token number\">2</span>\t<span class=\"token number\">18.5</span>\nsouthern\tSO\tSuan Chin\t\t<span class=\"token number\">5.1</span>\t<span class=\"token number\">.95</span>\t<span class=\"token number\">4</span>\t<span class=\"token number\">15.5</span>\nsoutheast \tSE\tPatricia Hemenway\t<span class=\"token number\">4.0</span>\t<span class=\"token number\">.7</span>\t<span class=\"token number\">4</span>\t<span class=\"token number\">17.5</span>\neastern\t\tEA\tTB Savage\t\t<span class=\"token number\">4.4</span>\t<span class=\"token number\">.84</span>\t<span class=\"token number\">5</span>\t<span class=\"token number\">20.5</span>\nnortheast \tNE\tAM Main Jr<span class=\"token punctuation\">.</span>\t\t<span class=\"token number\">5.1</span>\t<span class=\"token number\">.94</span>\t<span class=\"token number\">3</span>\t<span class=\"token number\">13.5</span>\nnorth\t\tNO\tMargot Weber\t\t<span class=\"token number\">4.5</span>\t<span class=\"token number\">.89</span>\t<span class=\"token number\">5</span>\t <span class=\"token number\">9</span>\ncentral\t\tCT \tAnn Stephens\t\t<span class=\"token number\">5.7</span>\t<span class=\"token number\">.94</span>\t<span class=\"token number\">5</span>\t<span class=\"token number\">13.5</span></code></pre></div>\n<p>다음과 같이 <code class=\"language-text\">.5</code>가 붙는 것을 확인할 수 있습니다.</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"read-r-예시\" style=\"position:relative;\"><a href=\"#read-r-%EC%98%88%EC%8B%9C\" aria-label=\"read r 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(read) r 예시</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">sed '/Ernst/r test' file</code><br>\nfile파일로부터 <code class=\"language-text\">Ernst</code>라는 단어를 찾으면 패턴 찾은 행 뒤에 <code class=\"language-text\">test</code>의 내용을 붙여 출력합니다. </p>\n<br/>\n<p>테스트 파일을 하나 생성후</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">student@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>won<span class=\"token operator\">/</span>script$ echo test <span class=\"token operator\">></span> test\nstudent@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>won<span class=\"token operator\">/</span>script$ cat test \ntest</code></pre></div>\n<p>명령어를 테스트</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">student@cccr:/home/won/script$ sed '/Ernst/r test' employees \nEMPLOYEE_ID\tFIRST_NAME\tLAST_NAME\tEMAIL\tPHONE_NUMBER\tHIRE_DATE\tJOB_ID\tSALARY\tCOMMISSION_PCT\tMANAGER_ID\tDEPARTMENT_ID\n100\tSteven\tKing\tSKING\t515.123.4567\t03/06/17\tAD_PRES\t24000\t\t\t90\n101\tNeena\tKochhar\tNKOCHHAR\t515.123.4568\t05/09/21\tAD_VP\t17000\t\t100\t90\n102\tLex\tDe Haan\tLDEHAAN\t515.123.4569\t01/01/13\tAD_VP\t17000\t\t100\t90\n103\tAlexander\tHunold\tAHUNOLD\t590.423.4567\t06/01/03\tIT_PROG\t9000\t\t102\t60\n104\tBruce\tErnst\tBERNST\t590.423.4568\t07/05/21\tIT_PROG\t6000\t103\t60\ntest           &lt;----------------------- 출력확인\n105\tDavid\tAustin\tDAUSTIN\t590.423.4569\t05/06/25\tIT_PROG\t4800\t103\t60\n106\tValli\tPataballa\tVPATABAL\t590.423.4560\t06/02/05\tIT_PROG\t4800\t\t103\t60\n107\tDiana\tLorentz\tDLORENTZ\t590.423.5567\t07/02/07\tIT_PROG\t4200\t\t103\t60\n108\tNancy\tGreenberg\tNGREENBE\t515.124.4569\t02/08/17\tFI_MGR12008\t\t101\t100\n109\tDaniel\tFaviet\tDFAVIET\t515.124.4169\t02/08/16\tFI_ACCOUNT\t9000\t\t108\t100\nstudent@cccr:/home/won/script$ </code></pre></div>\n</li>\n</ul>\n<p>위의 결과와 같이 <code class=\"language-text\">Ernst</code> 문자가 있는 행 아래 <code class=\"language-text\">test</code>라는 파일의 내용이 출력됨.</p>\n<br/>\n<hr>\n<h3 id=\"4-문자열-추가append-code-classlanguage-textacode-명령어-예시\" style=\"position:relative;\"><a href=\"#4-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%B6%94%EA%B0%80append-code-classlanguage-textacode-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%98%88%EC%8B%9C\" aria-label=\"4 문자열 추가append code classlanguage textacode 명령어 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 문자열 추가(append) <code class=\"language-text\">a\\</code> 명령어 예시</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">sed '/test$/a\\APPEND TEST' file</code><br>\nfile파일에서 <code class=\"language-text\">test</code>로 끝나는 행을 찾아 <code class=\"language-text\">'APPEND TEST'</code>을 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">student@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>won<span class=\"token operator\">/</span>script$ sed '<span class=\"token operator\">/</span>test$<span class=\"token operator\">/</span>a\\APPEND TEST' test \ntest\nAPPEND TEST</code></pre></div>\n<p>위와 같이 test 아래에 문자열이 추가되는 것을 확인할 수 있다.</p>\n</li>\n</ul>\n<br/>\n<hr>\n<h3 id=\"5-code-classlanguage-text패턴스페이스code와-code-classlanguage-text홀드스페이스code-예시\" style=\"position:relative;\"><a href=\"#5-code-classlanguage-text%ED%8C%A8%ED%84%B4%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4code%EC%99%80-code-classlanguage-text%ED%99%80%EB%93%9C%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4code-%EC%98%88%EC%8B%9C\" aria-label=\"5 code classlanguage text패턴스페이스code와 code classlanguage text홀드스페이스code 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. <code class=\"language-text\">패턴스페이스</code>와 <code class=\"language-text\">홀드스페이스</code> 예시</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">sed -e '/LDEHAAN/h' -e '$G' employees</code><br>\nfile파일에서 <code class=\"language-text\">LDEHAAN</code>라는 단어를 찾은 후 그 행들을 홀드스페이스에 저장해놓습니다. <code class=\"language-text\">(h명령어)</code></p>\n<p>그리고 <code class=\"language-text\">$는 마지막 행</code>을 의미함으로 마지막 행에 홀드스페이스 내용을 패턴스페이스에 복사합니다.<br>\n<code class=\"language-text\">대문자G</code>의 경우 패턴스페이스에 내용이 있을 경우 <code class=\"language-text\">뒤에 추가</code>하는 명령어이므로 텍스트 맨 뒤에 복사됩니다.</p>\n<p>즉, 패턴 <code class=\"language-text\">LDEHAAN</code>를 포함하는 행들은 모두 홀드 스페이스로 복사되었다가 파일의 마지막에 추가됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">student@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>won<span class=\"token operator\">/</span>script$ sed <span class=\"token operator\">-</span>e '<span class=\"token operator\">/</span>LDEHAAN<span class=\"token operator\">/</span>h' <span class=\"token operator\">-</span>e '$G' employees \nEMPLOYEE_ID\tFIRST_NAME\tLAST_NAME\tEMAIL\tPHONE_NUMBER\tHIRE_DATE\tJOB_ID\tSALARY\tCOMMISSION_PCT\tMANAGER_ID\tDEPARTMENT_ID\n<span class=\"token number\">100</span>\tSteven\tKing\tSKING\t<span class=\"token number\">515.123</span><span class=\"token number\">.4567</span>\t<span class=\"token number\">03</span><span class=\"token operator\">/</span><span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">17</span>\tAD_PRES\t<span class=\"token number\">24000</span>\t\t\t<span class=\"token number\">90</span>\n<span class=\"token number\">101</span>\tNeena\tKochhar\tNKOCHHAR\t<span class=\"token number\">515.123</span><span class=\"token number\">.4568</span>\t<span class=\"token number\">05</span><span class=\"token operator\">/</span><span class=\"token number\">09</span><span class=\"token operator\">/</span><span class=\"token number\">21</span>\tAD_VP\t<span class=\"token number\">17000</span>\t\t<span class=\"token number\">100</span>\t<span class=\"token number\">90</span>\n<span class=\"token number\">102</span>\tLex\tDe Haan\tLDEHAAN\t<span class=\"token number\">515.123</span><span class=\"token number\">.4569</span>\t<span class=\"token number\">01</span><span class=\"token operator\">/</span><span class=\"token number\">01</span><span class=\"token operator\">/</span><span class=\"token number\">13</span>\tAD_VP\t<span class=\"token number\">17000</span>\t\t<span class=\"token number\">100</span>\t<span class=\"token number\">90</span>\n<span class=\"token number\">103</span>\tAlexander\tHunold\tAHUNOLD\t<span class=\"token number\">590.423</span><span class=\"token number\">.4567</span>\t<span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">01</span><span class=\"token operator\">/</span><span class=\"token number\">03</span>\tIT_PROG\t<span class=\"token number\">9000</span>\t\t<span class=\"token number\">102</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">104</span>\tBruce\tErnst\tBERNST\t<span class=\"token number\">590.423</span><span class=\"token number\">.4568</span>\t<span class=\"token number\">07</span><span class=\"token operator\">/</span><span class=\"token number\">05</span><span class=\"token operator\">/</span><span class=\"token number\">21</span>\tIT_PROG\t<span class=\"token number\">6000</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">105</span>\tDavid\tAustin\tDAUSTIN\t<span class=\"token number\">590.423</span><span class=\"token number\">.4569</span>\t<span class=\"token number\">05</span><span class=\"token operator\">/</span><span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">25</span>\tIT_PROG\t<span class=\"token number\">4800</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">106</span>\tValli\tPataballa\tVPATABAL\t<span class=\"token number\">590.423</span><span class=\"token number\">.4560</span>\t<span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">05</span>\tIT_PROG\t<span class=\"token number\">4800</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">107</span>\tDiana\tLorentz\tDLORENTZ\t<span class=\"token number\">590.423</span><span class=\"token number\">.5567</span>\t<span class=\"token number\">07</span><span class=\"token operator\">/</span><span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">07</span>\tIT_PROG\t<span class=\"token number\">4200</span>\t\t<span class=\"token number\">103</span>\t<span class=\"token number\">60</span>\n<span class=\"token number\">108</span>\tNancy\tGreenberg\tNGREENBE\t<span class=\"token number\">515.124</span><span class=\"token number\">.4569</span>\t<span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">08</span><span class=\"token operator\">/</span><span class=\"token number\">17</span>\tFI_MGR\t<span class=\"token number\">12008</span>\t\t<span class=\"token number\">101</span>\t<span class=\"token number\">100</span>\n<span class=\"token number\">109</span>\tDaniel\tFaviet\tDFAVIET\t<span class=\"token number\">515.124</span><span class=\"token number\">.4169</span>\t<span class=\"token number\">02</span><span class=\"token operator\">/</span><span class=\"token number\">08</span><span class=\"token operator\">/</span><span class=\"token number\">16</span>\tFI_ACCOUNT\t<span class=\"token number\">9000</span>\t\t<span class=\"token number\">108</span>\t<span class=\"token number\">100</span>\n<span class=\"token number\">102</span>\tLex\tDe Haan\tLDEHAAN\t<span class=\"token number\">515.123</span><span class=\"token number\">.4569</span>\t<span class=\"token number\">01</span><span class=\"token operator\">/</span><span class=\"token number\">01</span><span class=\"token operator\">/</span><span class=\"token number\">13</span>\tAD_VP\t<span class=\"token number\">17000</span>\t\t<span class=\"token number\">100</span>\t<span class=\"token number\">90</span></code></pre></div>\n<p>위의 예와 같이 <code class=\"language-text\">102</code> 번호를 가진 행이 맨뒤에 추가되었음을 확인.</p>\n</li>\n</ul>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-sedstreamlined-editor-\">✔ Sed(streamlined editor) ?</a></li>\n<li><a href=\"#-sed-%EB%8F%99%EC%9E%91\">✌ Sed 동작</a></li>\n<li>\n<p><a href=\"#-sed-%EC%82%AC%EC%9A%A9%EB%B2%95\">👍 Sed 사용법</a></p>\n<ul>\n<li><a href=\"#%ED%8A%B9%EC%A0%95-%EB%B2%94%EC%9C%84%EB%A7%8C%ED%81%BC-%ED%8C%8C%EC%9D%BC%EB%82%B4%EC%9A%A9-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0\">특정 범위만큼 파일내용 출력하기</a></li>\n<li><a href=\"#%ED%8A%B9%EC%A0%95-%EB%8B%A8%EC%96%B4%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%ED%96%89%EB%93%A4%EB%A7%8C-%EC%B6%94%EC%B6%9C%ED%95%98%EA%B8%B0\">특정 단어로 시작하는 행들만 추출하기</a></li>\n<li><a href=\"#%ED%8C%8C%EC%9D%BC%EC%97%90%EC%84%9C-%EA%B3%B5%EB%B0%B1%EC%9C%BC%EB%A1%9C-%EC%9D%B4%EB%A3%A8%EC%96%B4%EC%A7%80%EA%B1%B0%EB%82%98-%EB%B9%88%EC%A4%84-%EC%A0%9C%EA%B1%B0%ED%95%98%EA%B8%B0\">파일에서 공백으로 이루어지거나 빈줄 제거하기</a></li>\n<li><a href=\"#%EB%8B%A8%EC%96%B4-%EC%B9%98%ED%99%98\">단어 치환</a></li>\n</ul>\n</li>\n<li><a href=\"#-sed-subcommand-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A2%85%EB%A5%98%EC%99%80-%EC%9D%98%EB%AF%B8\">🙌 SED subcommand 명령어 종류와 의미</a></li>\n<li>\n<p><a href=\"#-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C\">🐱‍🏍 다양한 사용 예시</a></p>\n<ul>\n<li><a href=\"#1-%EC%B6%9C%EB%A0%A5-p-%EC%98%88%EC%8B%9C\">1. (출력) p 예시</a></li>\n<li><a href=\"#2-%EC%82%AD%EC%A0%9C-d-%EC%98%88%EC%8B%9C\">2. (삭제) d 예시</a></li>\n<li><a href=\"#3-%EC%B9%98%ED%99%98-s-%EC%98%88%EC%8B%9C\">3. (치환) s 예시</a></li>\n<li><a href=\"#read-r-%EC%98%88%EC%8B%9C\">(read) r 예시</a></li>\n<li><a href=\"#4-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%B6%94%EA%B0%80append-a-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%98%88%EC%8B%9C\">4. 문자열 추가(append) <code class=\"language-text\">a\\</code> 명령어 예시</a></li>\n<li><a href=\"#5-%ED%8C%A8%ED%84%B4%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%99%80-%ED%99%80%EB%93%9C%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%98%88%EC%8B%9C\">5. <code class=\"language-text\">패턴스페이스</code>와 <code class=\"language-text\">홀드스페이스</code> 예시</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"머리말   이미 2년정도 실무를 경험하면서 스크립트는 지겹도록 작성해서 이미 익숙한 명령어이지만 이 명령어도 쓰는 옵션만 쓰고 쓰지 않았던 옵션에 대해서는 상세하게 알지 못했습니다. 이번 포스트를 쓰면서 머리속에 지식을 박아넣습니다.. ✔ Sed(streamlined editor) ? 는 대화형 기능이 없는 편집기입니다.   명령행에서 직접 편집 명령어와 파일을 지정하여 작업한 후 결과를 화면으로 확인합니다.   sed 편집기는 원본을 손상하지 않는다.   리다이렉션을 이용하여 편집 결과를 파일로 저장하여 확인할 수 있다.   sed 명령어는 를 의미합니다. streamlined = ‘능률적인’을 의미하듯 정말 편한 …","frontmatter":{"date":"June 28, 2021","title":"[LINUX] - Shell Script - sed","categories":"LINUX","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/linux-sed/"}},"next":{"id":"91aeb602-995f-5d6f-bf10-8331113bcafe","html":"<p>머리말  </p>\n<p> 이번 포스트에서는 Docker에서 조금도 간편화된 방법으로 이미지를 제작할 수 있는 Dockerfile에 대해서 포스팅합니다.</p>\n<hr>\n<h2 id=\"-dockerfile\" style=\"position:relative;\"><a href=\"#-dockerfile\" aria-label=\" dockerfile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ DOCKERFILE</h2>\n<p><code class=\"language-text\">Dockerfile</code>은 컨테이너를 만들고 해야하는 일련의 작업들을 미리 선언함으로써 매번 해당 작업을 하지않고도,<br>\n컨테이너 생성시 자동으로 등록된 작업이 실행된 후 컨테이너를 생성할 수 있는 파일입니다.</p>\n<p>Dockerfile은 어플리케이션 개발 외에도 도커 허브에 배포할때,이미지가 아닌, Dockerfile을 이용하여 배포할 수도 있습니다.</p>\n<ul>\n<li>Dockerfile은 COMMAND-VALUE 쌍으로 구성된 지시어로 이루어진 도커 이미지 설정 파일입니다.</li>\n<li>베이스 이미지를 지정, 컨테이너에서 실행되는 명령을 정의, 환경 변수 설정 등 컨테이너에서 실행되는 데몬을 지정할 수 있습니다.</li>\n<li>Dockerfile에서 파일 시스템에 변경 요청하는 지시어는 베이스 이미지 레이어의 상위 레이어가 생성되어 변경사항이 적용됩니다.</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"-docker-file-지시어\" style=\"position:relative;\"><a href=\"#-docker-file-%EC%A7%80%EC%8B%9C%EC%96%B4\" aria-label=\" docker file 지시어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✌ DOCKER FILE 지시어</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">FROM</code><br>\nFROM 지시어로 베이스 이미지를 지정하여 레이어를 생성합니다.</p>\n<p>지정된 이미지가 도커 호스트로 자동으로 <code class=\"language-text\">pull down</code> 됩니다.<br>\n도커 호스트 또는 Docker Registry(DockerHub, Private Docker Registry, ..)에 있는 이미지만 지정이 가능합니다.</p>\n<p><code class=\"language-text\">FROM</code>지시어는 세가지 형식으로 사용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">FROM IMAGE\n\n<span class=\"token class-name\">FROM</span> IMAGE<span class=\"token punctuation\">:</span>TAG\n\nFROM IMAGE@DIGEST</code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<ul>\n<li>\n<p><code class=\"language-text\">RUN</code><br>\n베이스 이미지를 기반으로 패키지를 설치하거나 환경을 구성할 때 사용합니다.</p>\n<p>두가지 사용 형식이 있지만, 결과적으로 보면 큰 차이는 없습니다.</p>\n<ul>\n<li>쉘 명령<br>\n/bin/sh -c 으로 실행하는 것과 동일하게 작동합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">RUN yum <span class=\"token operator\">-</span>y install httpd</code></pre></div>\n<p>자동으로 /bin/sh -c yum -y install httpd 로 변환됩니다.</p>\n<ul>\n<li>Exec 명령<br>\n쉘을 거치지 않고 바로 실행합니다.<br>\n따라서 환경 변수를 입력할 수 없고, JSON 형식으로 입력해야만 합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">RUN <span class=\"token punctuation\">[</span> <span class=\"token string\">\"/bin/bash\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yum -y install httpd\"</span> <span class=\"token punctuation\">]</span>   </code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<ul>\n<li>\n<p><code class=\"language-text\">CMD</code><br>\n빌드한 이미지로부터 컨테이너가 실행될 때 특정 프로세스나 데몬을 실행하기 위해 사용됩니다.</p>\n<p>CMD 지시어를 여러번 사용할 경우, 마지막 지시어만 적용되므로 한번만 사용해야 합니다.</p>\n<p>RUN과 마찬가지로 쉘 명령과 Exec 명령 두가지 형식으로 사용할 수 있습니다.</p>\n<ul>\n<li>쉘 명령  </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">FROM centos\nRUN yum <span class=\"token operator\">-</span>y install httpd\nCMD <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>sbin<span class=\"token operator\">/</span>httpd <span class=\"token operator\">-</span>D FOREGROUND</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker build <span class=\"token operator\">-</span><span class=\"token class-name\">t</span> centos<span class=\"token punctuation\">:</span>cmd <span class=\"token punctuation\">.</span>\n$ docker inspect centos<span class=\"token operator\">-</span>web<span class=\"token punctuation\">:</span>cmd\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token string\">\"ContainerConfig\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Cmd\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"#(nop) \"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"CMD [\\\"/bin/sh\\\" \\\"-c\\\" \\\"/usr/sbin/httpd -D FOREGROUND\\\"]\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Entrypoint\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Config\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Cmd\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"/usr/sbin/httpd -D FOREGROUND\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Entrypoint\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>만일 docker run 시 명령어를 지정하면 CMD는 무시되고 지정된 명령어가 수행됩니다.</p>\n</li>\n</ul>\n<br/>\n<hr>\n<ul>\n<li>\n<p><code class=\"language-text\">ENTRYPOINT</code><br>\n빌드한 이미지로부터 컨테이너가 실행될 때 특정 프로세스나 데몬을 실행하기 위해 사용됩니다.</p>\n<p>docker run 명령을 실행할 때 실행되므로 CMD 지시어보다 우선순위가 높습니다. </p>\n<p>RUN 지시어와 동일하게 쉘 명령과 Exec  명령 두가지 형식으로 사용할 수 있습니다.</p>\n<ul>\n<li>쉘 명령  </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>Dockerfile\n\n<span class=\"token class-name\">FROM</span> centos<span class=\"token punctuation\">:</span>latest\nRUN yum <span class=\"token operator\">-</span>y install httpd\nENTRYPOINT <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>sbin<span class=\"token operator\">/</span>httpd <span class=\"token operator\">-</span>D FOREGROUND</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker build <span class=\"token operator\">-</span><span class=\"token class-name\">t</span> centos<span class=\"token punctuation\">:</span>entrypoint <span class=\"token punctuation\">.</span>\n\n$ docker inspect centos<span class=\"token operator\">-</span>web<span class=\"token punctuation\">:</span>entrypoint\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token string\">\"ContainerConfig\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Cmd\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"#(nop) \"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"ENTRYPOINT [\\\"/bin/sh\\\" \\\"-c\\\" \\\"/usr/sbin/httpd -D FOREGROUND\\\"]\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Entrypoint\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"/usr/sbin/httpd -D FOREGROUND\"</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Config\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Cmd\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Entrypoint\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"/usr/sbin/httpd -D FOREGROUND\"</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p><code class=\"language-text\">Entrypoint</code> 설정이 추가된 것을 확인할 수 있습니다. </p>\n<p>CMD 지시어와는 달리 docker run 시 지정한 명령어는 무시되고 ENTRYPOINT 지시어가 실행됩니다.<br>\n쉘로 접속하려면 docker exec 명령을 사용해야 합니다.</p>\n<p>mysql 이미지의 경우 ENTRYPOINT docker-entrypoint.sh 지시어가 포함되어있습니다.<br>\n이 스크립트에서 특정 환경변수를 검사하여 컨테이너를 실행합니다.</p>\n</li>\n</ul>\n<br/>\n<hr>\n<ul>\n<li>\n<p><code class=\"language-text\">ONBUILD</code><br>\n베이스 이미지를 생성할 때 사용하는 지시어로서,<br>\n이미지를 빌드한 후 해당 이미지를 기반으로 다른 이미지를 빌드할 때 적용되는 지시어다.</p>\n<p>ONBUILD 명령어가 적용된 이미지로 컨테이너를 생성해도 컨테이너는 해당 명령어를 실행하지 않습니다.<br>\n해당 이미지를 베이스 이미지로 해서 다른 이미지를 빌드할때 명령어가 실행됩니다.</p>\n<p><code class=\"language-text\">ONBUILD ADD</code> 명령어는 도커 호스트의 파일을 컨테이너의 특정 디렉토리에 적용할 때 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">FROM centos\nRUN yum <span class=\"token operator\">-</span>y install httpd\nONBUILD ADD index<span class=\"token punctuation\">.</span>html <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>www<span class=\"token operator\">/</span>html\nCMD <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>sbin<span class=\"token operator\">/</span>httpd <span class=\"token operator\">-</span>D FOREGROUND</code></pre></div>\n</li>\n<li>\n<p>이미지를 빌드합니다.<br>\nFROM 지시어로 생성된 centos 레이어와 RUN 지시어로 생성된 레이어 두개만 나타납니다.<br>\nONBUILD로 지정된 ADD index.html /var/www/html 명령은 실행되지 않고<br>\nOnBuild 필드로 업데이트 된 것을 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker build <span class=\"token operator\">-</span><span class=\"token class-name\">t</span> centos<span class=\"token punctuation\">:</span>pre<span class=\"token operator\">-</span>onbuild <span class=\"token punctuation\">.</span>\n\n$ docker inspect centos<span class=\"token operator\">-</span>web<span class=\"token punctuation\">:</span>pre<span class=\"token operator\">-</span>onbuild\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token string\">\"ContainerConfig\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Cmd\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"#(nop) \"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"CMD [\\\"/bin/sh\\\" \\\"-c\\\" \\\"/usr/sbin/httpd -D FOREGROUND\\\"]\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"OnBuild\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"ADD index.html /var/www/html\"</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Config\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Cmd\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"/usr/sbin/httpd -D FOREGROUND\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"OnBuild\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"ADD index.html /var/www/html\"</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"RootFS\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"layers\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Layers\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"sha256:d69483a6face4499acb974449d1303591fcbb5cdce5420f36f8a6607bda11854\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"sha256:f58e0e778d84a914c02385be57b7f0247b181f37b299579dd4d2e2fac9d9fa07\"</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p>OnBuild가 적용된 이미지를 기반으로 또 다른 이미지를 생성합니다.<br>\n이번엔 ADD 명령어가 수행되어야 하므로 도커 호스트에 index.html 파일이 존재하여야 합니다.<br>\nOnBuild 필드가 null로 생성되고, ADD index.html /var/www/html 지시어가 적용된 레이어가 추가되었기 때문에<br>\n총 3개의 레이어가 나타나게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\">FROM</span> centos<span class=\"token punctuation\">:</span>pre<span class=\"token operator\">-</span>onbuild\nRUN echo Test\nCMD <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>sbin<span class=\"token operator\">/</span>httpd <span class=\"token operator\">-</span>D FOREGROUND</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker build <span class=\"token operator\">-</span>t centos<span class=\"token operator\">-</span>web<span class=\"token punctuation\">:</span>onbuild <span class=\"token punctuation\">.</span>\n\n$ docker inspect centos<span class=\"token operator\">-</span>web<span class=\"token punctuation\">:</span>onbuild\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token string\">\"ContainerConfig\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Cmd\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"#(nop) \"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"CMD [\\\"/bin/sh\\\" \\\"-c\\\" \\\"/usr/sbin/httpd -D FOREGROUND\\\"]\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"OnBuild\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Config\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Cmd\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"/usr/sbin/httpd -D FOREGROUND\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"OnBuild\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"RootFS\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"layers\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Layers\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"sha256:d69483a6face4499acb974449d1303591fcbb5cdce5420f36f8a6607bda11854\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"sha256:f58e0e778d84a914c02385be57b7f0247b181f37b299579dd4d2e2fac9d9fa07\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"sha256:d44e7018ea29cc14dedaf309240f573ae182c7141827478b0ab806e99697d339\"</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<ul>\n<li>\n<p><code class=\"language-text\">VOLUME</code><br>\n도커 볼륨을 생성합니다.</p>\n<p><code class=\"language-text\">VOLUME</code> 지시어를 설정하면 해당 컨테이너 패스에 연결되는 디렉토리를 생성하고 마운트합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">FROM centos\nRUN mkdir <span class=\"token operator\">-</span>p <span class=\"token operator\">/</span>tmp<span class=\"token operator\">/</span>share\nVOLUME <span class=\"token operator\">/</span>tmp<span class=\"token operator\">/</span>share</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker build <span class=\"token operator\">-</span><span class=\"token class-name\">t</span> centos<span class=\"token punctuation\">:</span>volume <span class=\"token punctuation\">.</span>\n\n$ docker <span class=\"token class-name\">inspect</span> centos<span class=\"token punctuation\">:</span>volume\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token string\">\"ContainerConfig\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Volumes\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"/tmp/share\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Config\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Volumes\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"/tmp/share\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>생성된 이미지로 컨테이너를 실행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker run <span class=\"token operator\">-</span>itd <span class=\"token operator\">--</span>name centos<span class=\"token operator\">-</span><span class=\"token class-name\">volume</span> centos<span class=\"token punctuation\">:</span>volume</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker inspect centos<span class=\"token operator\">-</span>volume\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token string\">\"Mounts\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"volume\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"8fadb85943d78e953a16e643bc6ae1e5733419c8f8bb2d178cd0d45ba39f5217\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Source\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/var/lib/docker/volumes/8fadb85943d78e953a16e643bc6ae1e5733419c8f8bb2d178cd0d45ba39f5217/_data\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Destination\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/tmp/share\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Driver\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"local\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Mode\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"RW\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Propagation\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Config\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Volumes\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"/tmp/share\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p>도커 볼륨이 자동으로 생성된 것을 확인할 수 있습니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker volume ls\nDRIVER              VOLUME NAME\nlocal               8fadb85943d78e953a16e643bc6ae1e5733419c8f8bb2d178cd0d45ba39f5217</code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<ul>\n<li>\n<p><code class=\"language-text\">EXPOSE</code><br>\nEXPOSE 지시어를 사용하여 컨테이너가 사용할 포트를 지정합니다.  </p>\n<p>컨테이너를 실행할 때 반드시 포트 매핑 설정을 넣어주어야 합니다.<br>\n만일 호스트 네트워크 드라이버를 사용합니다면 포트 매핑을 설정하지 않고 자동으로 호스트 포트로 노출됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">FROM centos\nRUN yum <span class=\"token operator\">-</span>y install httpd\nRUN echo 'Hello nasa1515<span class=\"token operator\">!</span>' <span class=\"token operator\">></span> <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>www<span class=\"token operator\">/</span>html<span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>html\nCMD <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>sbin<span class=\"token operator\">/</span>httpd <span class=\"token operator\">-</span>D FOREGROUND\nEXPOSE <span class=\"token number\">80</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker build <span class=\"token operator\">-</span><span class=\"token class-name\">t</span> centos<span class=\"token punctuation\">:</span>expose <span class=\"token punctuation\">.</span>\n\n$ docker run <span class=\"token operator\">-</span>itd <span class=\"token operator\">--</span>name centos<span class=\"token operator\">-</span>expose <span class=\"token operator\">-</span>p <span class=\"token number\">80</span><span class=\"token punctuation\">:</span><span class=\"token number\">80</span> centos<span class=\"token punctuation\">:</span>expose\n\n\n이미지 정보에서 포트 노출을 확인할 수 있습니다<span class=\"token punctuation\">.</span>\n\n$ docker <span class=\"token class-name\">inspect</span> centos<span class=\"token punctuation\">:</span>expose\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token string\">\"ContainerConfig\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"ExposedPorts\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"80/tcp\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Config\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"ExposedPorts\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"80/tcp\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span></code></pre></div>\n<br/>\n<p>docker run 시 포트 매핑 옵션을 적용하여 호스트에서 해당 포트가 LISTEN 상태임을 확인할 수 있어야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ netstat <span class=\"token operator\">-</span>nltp\nActive <span class=\"token return-type class-name\">Internet</span> connections <span class=\"token punctuation\">(</span><span class=\"token class-name\">only</span> servers<span class=\"token punctuation\">)</span>\nProto Recv<span class=\"token operator\">-</span>Q Send<span class=\"token operator\">-</span>Q Local Address           Foreign Address         State       PID<span class=\"token operator\">/</span>Program name    \n<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\ntcp6       <span class=\"token number\">0</span>      <span class=\"token number\">0</span> <span class=\"token punctuation\">::</span><span class=\"token punctuation\">:</span><span class=\"token number\">80</span>                   <span class=\"token punctuation\">::</span><span class=\"token punctuation\">:</span><span class=\"token operator\">*</span>                    LISTEN      <span class=\"token operator\">-</span>                   </code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<ul>\n<li>\n<p><code class=\"language-text\">MAINTAINER</code><br>\nMAINTAINER 지시어는 이미지의 관리자 정보를 기록합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">MAINTAINER nasa1515</code></pre></div>\n<p>이미지 정보를 조회하면 Author 필드에 추가된 것을 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token string\">\"Author\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"nasa1515\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"entrypoint-와-cmd의-차이\" style=\"position:relative;\"><a href=\"#entrypoint-%EC%99%80-cmd%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"entrypoint 와 cmd의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍ENTRYPOINT 와 CMD의 차이</h2>\n<ul>\n<li><code class=\"language-text\">ENTRYPOINT와</code> <code class=\"language-text\">CMD</code>는 둘다 어플리케이션을 지정하는 지시어인데<br>\nENTRYPOINT 와 CMD 의 차이점은 바로 컨테이너 시작시 실행 명령에 대한 Default 지정 여부입니다.</li>\n<li>만약 <code class=\"language-text\">ENTRYPOINT</code> 를 사용하여 컨테이너 수행 명령을 정의한 경우<br>\n해당 컨테이너가 수행될 때 반드시 ENTRYPOINT 에서 지정한 명령을 수행되도록 지정 됩니다.</li>\n<li>\n<p><code class=\"language-text\">CMD</code>를 사용하여 수행 명령을 경우는<br>\n컨테이너를 실행할때 인자값을 주게 되면 Dockerfile 에 지정된 CMD 값을 대신 하여 지정한 인자값으로 변경하여 실행되게 됩니다.</p>\n<p>이해가 쉽게 Dockerfile 예제 써보겠습니다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># Dockerfile</span>\n\nFROM ubuntu\nCMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/df\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-h\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>위에서 Dockerfile 은 CMD 를 사용하여 df -h 명령을 한번 수행하고 종료되는 이미지를 만드는 것입니다.</p>\n<br/>\n</li>\n<li>\n<p>테스트를 위해 위 Dockerfile 을 사용해 nasa/df 라는 이름을 가진 이미지를 빌드해보죠. </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker build <span class=\"token operator\">-</span>t nasa<span class=\"token operator\">/</span>df <span class=\"token punctuation\">.</span>\n\nSending build context to Docker daemon  <span class=\"token number\">2</span><span class=\"token punctuation\">.</span>048kB\nStep <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token punctuation\">:</span> FROM ubuntu\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> 94e814e2efa8\nStep <span class=\"token number\">2</span><span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token punctuation\">:</span> CMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/df\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-h\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> Running <span class=\"token keyword\">in</span> c5f57fca1068\nRemoving intermediate container c5f57fca1068\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> 80eeec0ef7c0\nSuccessfully built 80eeec0ef7c0\nSuccessfully tagged nasa<span class=\"token operator\">/</span>df<span class=\"token punctuation\">:</span>latest</code></pre></div>\n<br/>\n<p>빌드된 nasa/df 이미지를 컨테이너로 동작시켜 보면<br>\nDockerfile 에서 정의된 대로 df -h 명령을 실행하고 종료되게 됩니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker run <span class=\"token operator\">--</span>name nasa<span class=\"token operator\">-</span>df nasa<span class=\"token operator\">/</span>df\n\nFilesystem      Size  Used Avail Use<span class=\"token operator\">%</span> Mounted <span class=\"token keyword\">on</span>\noverlay          59G  <span class=\"token number\">5</span><span class=\"token punctuation\">.</span>6G   50G  <span class=\"token number\">11</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>\ntmpfs            <span class=\"token number\">64M</span>     <span class=\"token number\">0</span>   <span class=\"token number\">64M</span>   <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>dev\ntmpfs          <span class=\"token number\">1000M</span>     <span class=\"token number\">0</span> <span class=\"token number\">1000M</span>   <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>sys<span class=\"token operator\">/</span>fs<span class=\"token operator\">/</span>cgroup\n<span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>sda1        59G  <span class=\"token number\">5</span><span class=\"token punctuation\">.</span>6G   50G  <span class=\"token number\">11</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>hosts\nshm              <span class=\"token number\">64M</span>     <span class=\"token number\">0</span>   <span class=\"token number\">64M</span>   <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>shm\ntmpfs          <span class=\"token number\">1000M</span>     <span class=\"token number\">0</span> <span class=\"token number\">1000M</span>   <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>proc<span class=\"token operator\">/</span>acpi\ntmpfs          <span class=\"token number\">1000M</span>     <span class=\"token number\">0</span> <span class=\"token number\">1000M</span>   <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>sys<span class=\"token operator\">/</span>firmware</code></pre></div>\n<br/>\n</li>\n<li>\n<p>이번에는, 컨테이너 실행시 추가 인자 값을 줘서 수행할 명령을 바꿔보죠.<br>\ndocker run 으로 컨테이너 실행시 마지막에 ps 명령을 추가 인자를 주고<br>\n실행해 보면 아래와 같은 결과를 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker run <span class=\"token operator\">--</span>name nasa<span class=\"token operator\">-</span>df nasa<span class=\"token operator\">/</span>df ps <span class=\"token operator\">-</span>aef\n\nUID        PID  PPID  C STIME TTY          TIME CMD\nroot         <span class=\"token number\">1</span>     <span class=\"token number\">0</span>  <span class=\"token number\">0</span> <span class=\"token number\">15</span><span class=\"token punctuation\">:</span><span class=\"token number\">19</span> <span class=\"token punctuation\">?</span>        <span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span> ps <span class=\"token operator\">-</span>aef</code></pre></div>\n<p>CMD 로 지정한 내용 대신 컨테이너 실행시 받은 인자로 대체하여 실행됨을 볼 수 있습니다.</p>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">docker inspect</code> 명령을 통해 컨테이너 설정 내용을 자세히 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker inspect nasa<span class=\"token operator\">-</span>df\n<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Cmd\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"ps\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-aef\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>컨테이너 설정에 Cmd 값이 인자 값으로 대체된 것이 확인 가능합니다.</p>\n</li>\n</ul>\n<br/>\n<hr>\n<ul>\n<li>\n<p>이번에는 ENTRYPOINT 를 사용하여 컨테이너 이미지를 만들어 보겠습니다.</p>\n<p>단지 CMD를 ENTRYPOINT 로 대신한 것 뿐입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># Dockerfile</span>\n\nFROM ubuntu\nENTRYPOINT <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/df\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-h\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p>이번엔 nasa/df:entry 라는 태그를 추가하여 이미지를 빌드</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker build <span class=\"token operator\">-</span>t nasa<span class=\"token operator\">/</span>df<span class=\"token punctuation\">:</span>entry <span class=\"token punctuation\">.</span>\n\nSending build context to Docker daemon  <span class=\"token number\">2</span><span class=\"token punctuation\">.</span>048kB\nStep <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token punctuation\">:</span> FROM ubuntu\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> 94e814e2efa8\nStep <span class=\"token number\">2</span><span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token punctuation\">:</span> ENTRYPOINT <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/df\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-h\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> Running <span class=\"token keyword\">in</span> 61f6f8ad4f61\nRemoving intermediate container 61f6f8ad4f61\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> cc23a8719b6e\nSuccessfully built cc23a8719b6e\nSuccessfully tagged nasa<span class=\"token operator\">/</span>df<span class=\"token punctuation\">:</span>entry</code></pre></div>\n<br/>\n</li>\n<li>\n<p>빌드된 nasa/df:entry 이미지로 컨테이너를 실행</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker run <span class=\"token operator\">--</span>name nasa<span class=\"token operator\">-</span>df nasa<span class=\"token operator\">/</span>df<span class=\"token punctuation\">:</span>entry\n\nFilesystem      Size  Used Avail Use<span class=\"token operator\">%</span> Mounted <span class=\"token keyword\">on</span>\noverlay          59G  <span class=\"token number\">5</span><span class=\"token punctuation\">.</span>6G   50G  <span class=\"token number\">11</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>\ntmpfs            <span class=\"token number\">64M</span>     <span class=\"token number\">0</span>   <span class=\"token number\">64M</span>   <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>dev\ntmpfs          <span class=\"token number\">1000M</span>     <span class=\"token number\">0</span> <span class=\"token number\">1000M</span>   <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>sys<span class=\"token operator\">/</span>fs<span class=\"token operator\">/</span>cgroup\n<span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>sda1        59G  <span class=\"token number\">5</span><span class=\"token punctuation\">.</span>6G   50G  <span class=\"token number\">11</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>hosts\nshm              <span class=\"token number\">64M</span>     <span class=\"token number\">0</span>   <span class=\"token number\">64M</span>   <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>shm\ntmpfs          <span class=\"token number\">1000M</span>     <span class=\"token number\">0</span> <span class=\"token number\">1000M</span>   <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>proc<span class=\"token operator\">/</span>acpi\ntmpfs          <span class=\"token number\">1000M</span>     <span class=\"token number\">0</span> <span class=\"token number\">1000M</span>   <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span>sys<span class=\"token operator\">/</span>firmware</code></pre></div>\n<p>실행된 결과는 CMD 와는 다른게 없다.</p>\n<br/>\n</li>\n<li>\n<p>docker inspect 로 자세히 살펴보면 약간의 다른점을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker inspect nasa<span class=\"token operator\">-</span>df\n<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Cmd\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n\n            <span class=\"token string\">\"Entrypoint\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"/bin/df\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-h\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p><code class=\"language-text\">Entrypoint</code> 항목에 실행된 명령 정보가 있고<br>\nCMD는 null 로 비워져 있는것을 볼 수 있습니다.</p>\n<br/>\n</li>\n<li>\n<p>CMD 테스트와 동일하게 인자를 추가로 넣어 컨테이너를 실행 </p>\n<p>ENTRYPOINT 와 CMD의 확실한 차이를 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker run <span class=\"token operator\">--</span>name nasa<span class=\"token operator\">-</span>df nasa<span class=\"token operator\">/</span>df<span class=\"token punctuation\">:</span>entry ps <span class=\"token operator\">-</span>aef\n\n<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>df<span class=\"token punctuation\">:</span> invalid option <span class=\"token operator\">--</span> <span class=\"token string character\">'e'</span>\nTry '<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>df <span class=\"token operator\">--</span>help' <span class=\"token keyword\">for</span> more information<span class=\"token punctuation\">.</span></code></pre></div>\n<p>에러를 출력하며 원하는 동작이 실행되지 않았음을 볼 수 있습니다.</p>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">docker inspect</code> 를 사용해 살펴보죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker inspect nasa<span class=\"token operator\">-</span>df\n<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Cmd\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"ps\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-aef\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n            <span class=\"token string\">\"Image\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"nasa/df:entry\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Volumes\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"WorkingDir\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Entrypoint\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"/bin/df\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"-h\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>컨테이너 실행시 /bin/df 명령은 유지하고<br>\n추가 인자를 CMD로 받아 처리한 것을 볼 수 있습니다.</p>\n<p>컨테이너 시작시 아래와 같은 명령어를 수행한 것과 같은 것이며<br>\n이는 적절한 명령이 아니었으므로 에러로 끝난 것임을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token operator\">></span> df <span class=\"token operator\">-</span>h ps <span class=\"token operator\">-</span>aef     \n\n<span class=\"token preprocessor property\"># ENTRYPOINT : df -h  </span>\n<span class=\"token preprocessor property\"># CMD : ps -aef</span>\n\ndf<span class=\"token punctuation\">:</span> invalid option <span class=\"token operator\">--</span> <span class=\"token string character\">'e'</span>\nTry 'df <span class=\"token operator\">--</span>help' <span class=\"token keyword\">for</span> more information<span class=\"token punctuation\">.</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<h3 id=\"entrypoint-와-cmd의-사용-방법\" style=\"position:relative;\"><a href=\"#entrypoint-%EC%99%80-cmd%EC%9D%98-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-label=\"entrypoint 와 cmd의 사용 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ENTRYPOINT 와 CMD의 사용 방법</h3>\n<p>  같은 것 같으면서 다른 두 지시어의 차이를 위에 실습으로 알아봤습니다.<br>\n그렇다면 ENTRYPOINT와 CMD 는 어떻게 사용하는게 좋을까.</p>\n<ol>\n<li>\n<p>컨테이너가 수행될 때 변경되지 않을 실행 명령은 CMD 보다는 ENTRYPOINT 로 정의하는게 좋다.</p>\n<p>컨테이너를 만들때 아마 대부분은 해당 컨테이너가 실행될 목적이 분명할 것입니다.<br>\n웹서버(nginx)가 될 수도 있고, App서버(node)가 될 수도 있으며 DB(mysql) 가 될 수도 있습니다.</p>\n<p>즉, 이미지를 만들때는 실행 목적이 분명하므로 nginx / node / mysql 같은<br>\n메인 프로세스가 될 명령의 경우는 <code class=\"language-text\">ENTRYPOINT</code> 로 정의하는게 명확할 것입니다.</p>\n</li>\n</ol>\n<br/>\n \n<ol start=\"2\">\n<li>\n<p>메인 명령어가 실행시 default option 인자 값은 CMD로 정의합니다</p>\n<p><code class=\"language-text\">CMD</code> 는 <code class=\"language-text\">ENTRYPOINT</code> 와 함께 사용시 추가 인자 값으로 활용 됩니다.<br>\n그러므로,  메인 프로세스에 대한 default 옵션값을 CMD 로 정의해주면 좋을 것입니다. </p>\n</li>\n</ol>\n<br/>\n<ol start=\"3\">\n<li>\n<p><code class=\"language-text\">ENTRYPOINT</code> 와 <code class=\"language-text\">CMD</code>는 <code class=\"language-text\">리스트 포맷</code> ( [“args1”, “args2”,…] )으로 정의해 주는게 좋다. </p>\n<p>ENTRYPOINT 와 CMD 를 작성할때는 대부분 List 형태로 작성하지만,<br>\n아래와 같이 일반적인 shell 형태로도 작성 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># Dockerfile </span>\nFROM ubuntu \nAdd loop<span class=\"token punctuation\">.</span>sh <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>nasa<span class=\"token punctuation\">.</span>sh \nENTRYPOINT <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>nasa<span class=\"token punctuation\">.</span>sh <span class=\"token number\">1</span> # Shell format</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\">#!/bin/bash</span>\nINTERVAL<span class=\"token operator\">=</span>$<span class=\"token number\">1</span> \n\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">do</span>\n    <span class=\"token class-name\">ps</span> x<span class=\"token punctuation\">;</span>\n    sleep $INTERVAL<span class=\"token punctuation\">;</span>\ndone</code></pre></div>\n</li>\n</ol>\n<br/>\n<hr>\n<h2 id=\"🤳docker-file-예제\" style=\"position:relative;\"><a href=\"#%F0%9F%A4%B3docker-file-%EC%98%88%EC%A0%9C\" aria-label=\"🤳docker file 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤳docker file 예제</h2>\n<ul>\n<li>\n<p>아래와 같은 Docker File을 작성해보았습니다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\">FROM</span> ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">14.04</span>                   # FROM <span class=\"token punctuation\">:</span> 생성할 이미지\nMAINTAINER nasa1515                 # MAINTAINER <span class=\"token punctuation\">:</span> 이미지를 생성한 개발자의 정보\nLABEL <span class=\"token string\">\"purpose\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"practice\"</span>          <span class=\"token preprocessor property\"># LABEL : 이미지에 메타데이터를 추가</span>\nRUN apt<span class=\"token operator\">-</span><span class=\"token keyword\">get</span> update                  # RUN <span class=\"token punctuation\">:</span> 내부에서 실행하는 명령\nRUN apt<span class=\"token operator\">-</span><span class=\"token keyword\">get</span> install apache2 <span class=\"token operator\">-</span>y      # RUN <span class=\"token punctuation\">:</span> 내부에서 실행하는 명령\nADD test<span class=\"token punctuation\">.</span>html <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>www<span class=\"token operator\">/</span>html         # ADD <span class=\"token punctuation\">:</span> 파일을 추가<span class=\"token punctuation\">,</span> \nWORKDIR <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>www<span class=\"token operator\">/</span>html               # WORKDIR <span class=\"token punctuation\">:</span> 디렉토리 이동\nRUN <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/bash\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"echo hello >> test2.html\"</span><span class=\"token punctuation\">]</span>  \n<span class=\"token preprocessor property\"># RUN : 내부에서 실행하는 명령, test2.html 파일 생성</span>\nEXPOSE <span class=\"token number\">80</span>                                           \n<span class=\"token preprocessor property\"># EXPOSE : Dockefile의 빌드로 생성된 이미지에서 열어줄 포트</span>\nCMD apachectl <span class=\"token operator\">-</span>DFOREGROUND                          \n<span class=\"token preprocessor property\"># CMD : 컨테이너가 시작될 때마다 실행한 명령어, apache를 매번 실행</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p>Dockerfile 빌드  </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker build <span class=\"token operator\">-</span>t <span class=\"token punctuation\">[</span>이미지 이름<span class=\"token punctuation\">:</span>이미지 버전<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Dockerfile의 경로<span class=\"token punctuation\">]</span></code></pre></div>\n<p><code class=\"language-text\">-t</code>는 생성될 이미지의 이름을 설정\n생략시 16진수 형태로 자동 생성되므로 사용하는 걸 추천</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker build <span class=\"token operator\">-</span><span class=\"token class-name\">t</span> mybuild<span class=\"token punctuation\">:</span><span class=\"token number\">0.0</span> <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>\nSending build context to Docker daemon  <span class=\"token number\">3</span><span class=\"token punctuation\">.</span>072kB\nStep <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">FROM</span> ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">14.04</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> 7e4b16ae8b23\nStep <span class=\"token number\">2</span><span class=\"token operator\">/</span><span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> MAINTAINER nasa1515\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> Using cache\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> 3a109c0fbc9c\nStep <span class=\"token number\">3</span><span class=\"token operator\">/</span><span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> LABEL <span class=\"token string\">\"purpose\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"practice\"</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> Using cache\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> eb4fc9a7f0c0\nStep <span class=\"token number\">4</span><span class=\"token operator\">/</span><span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> RUN apt<span class=\"token operator\">-</span><span class=\"token keyword\">get</span> update\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> Using cache\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> 310c61072f92\nStep <span class=\"token number\">5</span><span class=\"token operator\">/</span><span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> RUN apt<span class=\"token operator\">-</span><span class=\"token keyword\">get</span> install apache2 <span class=\"token operator\">-</span>y\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> Using cache\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> 351f441a52e6\nStep <span class=\"token number\">6</span><span class=\"token operator\">/</span><span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> ADD test<span class=\"token punctuation\">.</span>html <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>www<span class=\"token operator\">/</span>html\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> Using cache\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> fabdb41b1d4a\nStep <span class=\"token number\">7</span><span class=\"token operator\">/</span><span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> WORKDIR <span class=\"token operator\">/</span><span class=\"token keyword\">var</span><span class=\"token operator\">/</span>www<span class=\"token operator\">/</span>html\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> Using cache\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> aade10f6b4bd\nStep <span class=\"token number\">8</span><span class=\"token operator\">/</span><span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> RUN <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/bash\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"echo hello >> test2.html\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> Running <span class=\"token keyword\">in</span> 1e831fca765c\nRemoving intermediate container 1e831fca765c\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> 6e80dc20b1d2\nStep <span class=\"token number\">9</span><span class=\"token operator\">/</span><span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> EXPOSE <span class=\"token number\">80</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> Running <span class=\"token keyword\">in</span> b2062df70dda\nRemoving intermediate container b2062df70dda\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> a94a15199cc6\nStep <span class=\"token number\">10</span><span class=\"token operator\">/</span><span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> CMD apachectl <span class=\"token operator\">-</span>DFOREGROUND\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> Running <span class=\"token keyword\">in</span> bbc99d44fc10\nRemoving intermediate container bbc99d44fc10\n<span class=\"token operator\">--</span><span class=\"token operator\">-></span> 83ef57094ad5\nSuccessfully built 83ef57094ad5\nSuccessfully <span class=\"token class-name\">tagged</span> mybuild<span class=\"token punctuation\">:</span><span class=\"token number\">0.0</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p><code class=\"language-text\">.dockerignore</code></p>\n<p>git에서 가져오게끔 만드는 경우<br>\nrepository의 모든 파일과 모듈들을 가져오기 때문에 이미지 빌드에 필요한 파일만 있도록 해야합니다.<br>\n특정 파일들을 제외하고 싶으면 .gitignore과 같은 .dockerignore을 사용할 수 있습니다.</p>\n<br/>\n</li>\n<li>\n<p>dockerignore 파일 생성시 Docker 이미지 생성 시 이미지안에 들어가지 않을 파일을 지정 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ vim dockerignore\n\nnode_modules\nnpm<span class=\"token operator\">-</span>debug<span class=\"token punctuation\">.</span>log\nDockerfile<span class=\"token operator\">*</span>\ndocker<span class=\"token operator\">-</span>compose<span class=\"token operator\">*</span>\n<span class=\"token punctuation\">.</span>dockerignore\n<span class=\"token punctuation\">.</span>git\n<span class=\"token punctuation\">.</span>gitignore\nREADME<span class=\"token punctuation\">.</span>md\nLICENSE\n<span class=\"token punctuation\">.</span>vscode\n\n<span class=\"token punctuation\">:</span>wq<span class=\"token operator\">!</span></code></pre></div>\n<hr>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-dockerfile\">✔ DOCKERFILE</a></li>\n<li><a href=\"#-docker-file-%EC%A7%80%EC%8B%9C%EC%96%B4\">✌ DOCKER FILE 지시어</a></li>\n<li>\n<p><a href=\"#entrypoint-%EC%99%80-cmd%EC%9D%98-%EC%B0%A8%EC%9D%B4\">👍ENTRYPOINT 와 CMD의 차이</a></p>\n<ul>\n<li><a href=\"#entrypoint-%EC%99%80-cmd%EC%9D%98-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\">ENTRYPOINT 와 CMD의 사용 방법</a></li>\n</ul>\n</li>\n<li><a href=\"#%F0%9F%A4%B3docker-file-%EC%98%88%EC%A0%9C\">🤳docker file 예제</a></li>\n</ul>\n</div>","frontmatter":{"date":"June 27, 2021","title":"[DOCKER] - Dockerfile","categories":"DevOps","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/docker-file/"}},"prev":{"id":"2672455e-760f-5f0e-9c81-1c0d256f9b99","html":"<p>머리말 </p>\n<p>이전 포스트에서는 스크립트나 리눅스를 운영하면서 자주 사용하게 되는 sed 명령어에 대해서 포스트 했습니다.<br>\n이번 포스트에서는 동일하게 자주 사용되는 awk 에 대해서 설명해보았습니다.  </p>\n<hr>\n<h2 id=\"-awk-\" style=\"position:relative;\"><a href=\"#-awk-\" aria-label=\" awk  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ awk ?</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">AWK</code>란?  </p>\n<p>awk는 텍스트 파일을 처리하는 라인 지향 프로그램 입니다.<br>\n아래 이미지와 같이 필드와 레코드로 구분하여 데이터를 처리하게 되는데 구분자를 사용하여 표와 같은 모양이 됩니다.</p>\n<ul>\n<li><code class=\"language-text\">레코드 구분자</code> : 엔터(개행)</li>\n<li><code class=\"language-text\">필드 구분자</code> : 탭, 스페이스</li>\n</ul>\n<p><img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&#x26;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FubTEw%2FbtqFGypLfhQ%2FTpRPJkzMkxQYrZEard652K%2Fimg.png\"></p>\n</li>\n<li>데이터를 조작하고 리포트를 생성하기 위해 사용하는 언어입니다.</li>\n<li>간단한 연산자를 명령라인에서 사용할 수 있으며, 큰 프로그램을 위해 사용될 수 있습니다.<br>\n<code class=\"language-text\">awk</code>는 데이터를 조작할 수 있기 때문에 쉘 스크립트에서 사용되는 필수 툴이며 작은 데이터베이스를 관리하기 위해서도 필수입니다</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"-awk-형식\" style=\"position:relative;\"><a href=\"#-awk-%ED%98%95%EC%8B%9D\" aria-label=\" awk 형식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✌ awk 형식</h2>\n<ul>\n<li>명령어를 입력한 다음, <code class=\"language-text\">작은따옴표</code>로 둘러싸인 패턴이나 <code class=\"language-text\">액션</code>을 입력하고<br>\n마지막엔 <code class=\"language-text\">입력 파일 이름</code>. 파일 이름을 지정하지 않으면 키보드 입력에 의한 <code class=\"language-text\">표준 입력</code>을 받습니다. </li>\n<li>\n<p>awk는 입력된 라인들의 데이터들을 <code class=\"language-text\">공백</code> 또는 <code class=\"language-text\">탭</code>을 기준으로 분리해  <code class=\"language-text\">$1</code>부터 시작하는 각각의 필드 변수로 분리해 인식합니다.</p>\n<p>awk 형식</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">awk <span class=\"token punctuation\">[</span>OPTION<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">awk</span> program<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>ARGUMENT<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>\n  OPTION\n    <span class=\"token operator\">-</span>F        <span class=\"token punctuation\">:</span> 필드 구분 문자 지정<span class=\"token punctuation\">.</span>\n    <span class=\"token operator\">-</span>f        <span class=\"token punctuation\">:</span> awk program 파일 경로 지정<span class=\"token punctuation\">.</span>\n    <span class=\"token operator\">-</span>v        <span class=\"token punctuation\">:</span> awk program에서 사용될 특정 variable값 지정<span class=\"token punctuation\">.</span>\n  awk program\n    <span class=\"token operator\">-</span>f 옵션이 사용되지 않은 경우<span class=\"token punctuation\">,</span> awk가 실행할 awk program 코드 지정<span class=\"token punctuation\">.</span>\n  ARGUMENT\n    입력 파일 지정 또는 variable 값 지정<span class=\"token punctuation\">.</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p>첫번째 필드는 <code class=\"language-text\">$1</code>, 두번째 필드는 <code class=\"language-text\">$2</code>와 같이 표현되며 <code class=\"language-text\">$0</code>은 전체 필드를 가르킵니다.<br>\n아래 리스트에서는 -rw-r—r— 은 <code class=\"language-text\">$1</code> 그 다음의 1로 표시된것(Link Count)은 <code class=\"language-text\">$2</code>가 됩니다</p>\n<p><img src=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&#x26;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcKJqcO%2FbtqFFTOrwd6%2FTPsiT7Fkl5RUzQQipYBuG1%2Fimg.png\"></p>\n<br/>\n</li>\n<li>\n<p>필드의 구분자는 탭 또는 스페이스이니 touch “spa ce”를 입력하여<br>\n파일명에 띄어쓰기를 주고나서 awk print를 사용하여 실제로 필드를 탭 또는 스페이스로 구분하는지 확인해볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">student@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>won<span class=\"token operator\">/</span>script<span class=\"token operator\">/</span>awktest$ ls <span class=\"token operator\">-</span>l\n합계 <span class=\"token number\">0</span>\n<span class=\"token operator\">-</span>rw<span class=\"token operator\">-</span>r<span class=\"token operator\">--</span>r<span class=\"token operator\">--</span> <span class=\"token number\">1</span> student student <span class=\"token number\">0</span>  <span class=\"token number\">8</span>월 <span class=\"token number\">19</span> <span class=\"token number\">11</span><span class=\"token punctuation\">:</span><span class=\"token number\">34</span>  nasa\n<span class=\"token operator\">-</span>rw<span class=\"token operator\">-</span>r<span class=\"token operator\">--</span>r<span class=\"token operator\">--</span> <span class=\"token number\">1</span> student student <span class=\"token number\">0</span>  <span class=\"token number\">8</span>월 <span class=\"token number\">19</span> <span class=\"token number\">11</span><span class=\"token punctuation\">:</span><span class=\"token number\">34</span> 'spa ce'\n<span class=\"token operator\">-</span>rw<span class=\"token operator\">-</span>r<span class=\"token operator\">--</span>r<span class=\"token operator\">--</span> <span class=\"token number\">1</span> student student <span class=\"token number\">0</span>  <span class=\"token number\">8</span>월 <span class=\"token number\">19</span> <span class=\"token number\">11</span><span class=\"token punctuation\">:</span><span class=\"token number\">33</span>  test\n<span class=\"token operator\">-</span>rw<span class=\"token operator\">-</span>r<span class=\"token operator\">--</span>r<span class=\"token operator\">--</span> <span class=\"token number\">1</span> student student <span class=\"token number\">0</span>  <span class=\"token number\">8</span>월 <span class=\"token number\">19</span> <span class=\"token number\">11</span><span class=\"token punctuation\">:</span><span class=\"token number\">34</span>  wonseok\nstudent@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>won<span class=\"token operator\">/</span>script<span class=\"token operator\">/</span>awktest$ ls <span class=\"token operator\">-</span>l <span class=\"token operator\">|</span> awk '<span class=\"token punctuation\">{</span>print $<span class=\"token number\">10</span><span class=\"token punctuation\">}</span>'\n\n\nce</code></pre></div>\n<p> 실제로 <code class=\"language-text\">$10</code>을 사용하여 <code class=\"language-text\">10번째 필드값</code>을 출력할 경우<br>\n다른 필드들은 10번째 필드가 없기 때문에 공백으로 출력되고 ce라는 필드만 출력하게 됩니다</p>\n<br/>\n</li>\n<li>추가적으로 탭이나 띄어쓰기가 여러번 입력되어 있더라도  그 사이에 문자가 없다면 1개의 필드로 처리 됩니다.<br>\n이러한 특성으로 인해 데이터를 처리할때는 데이터의 내용에 일관성이 있어야<br>\n생각했던 결과와 다른 값이 나오는 현상을 방지할 수 있습니다.</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"-awk-사용법\" style=\"position:relative;\"><a href=\"#-awk-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\" awk 사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🙌 awk 사용법</h2>\n<ul>\n<li>\n<p>awk 는 아래와 같은 형식으로 사용할 수 있습니다 </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">command <span class=\"token operator\">|</span> awk 'pattern'\n\ncommand <span class=\"token operator\">|</span> awk '<span class=\"token punctuation\">{</span>action<span class=\"token punctuation\">}</span>'\n\ncommand <span class=\"token operator\">|</span> awk 'pattern<span class=\"token string character\">' '</span><span class=\"token punctuation\">{</span>action<span class=\"token punctuation\">}</span>'\n\nawk <span class=\"token punctuation\">[</span>OPTION<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>pattern <span class=\"token punctuation\">{</span>action<span class=\"token punctuation\">}</span> <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>ARGUMENT<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>표</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">awk 사용 예</th>\n<th align=\"left\">명령어 옵션</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">파일의 전체 내용 출력</td>\n<td align=\"left\">awk ’{ print }’ [FILE]</td>\n</tr>\n<tr>\n<td align=\"left\">필드 값 출력</td>\n<td align=\"left\">awk ’{ print $1 }’ [FILE]</td>\n</tr>\n<tr>\n<td align=\"left\">필드 값에 임의 문자열을 같이 출력</td>\n<td align=\"left\">awk ‘{print “STR”$1, \"STR\"$2}’ [FILE]</td>\n</tr>\n<tr>\n<td align=\"left\">지정된 문자열을 포함하는 레코드만 출력</td>\n<td align=\"left\">awk ‘/STR/’ [FILE]</td>\n</tr>\n<tr>\n<td align=\"left\">특정 필드 값 비교를 통해 선택된 레코드만 출력</td>\n<td align=\"left\">awk ’$1 == 10 { print$2 }’ [FILE]</td>\n</tr>\n<tr>\n<td align=\"left\">특정 필드들의 합 구하기</td>\n<td align=\"left\">awk ‘{sum += $3} END { print sum }’ [FILE]</td>\n</tr>\n<tr>\n<td align=\"left\">여러 필드들의 합 구하기</td>\n<td align=\"left\">awk ’{ for (i=2; i&#x3C;=NF; i++) total += $i }; END { print “TOTAL : “total }’ [FILE]</td>\n</tr>\n<tr>\n<td align=\"left\">레코드 단위로 필드 합 및 평균 값 구하기</td>\n<td align=\"left\">awk ’{ sum = 0 } {sum += ($3+$4+$5) } { print$0, sum, sum/3 }’ [FILE]</td>\n</tr>\n<tr>\n<td align=\"left\">필드에 연산을 수행한 결과 출력하기</td>\n<td align=\"left\">awk ‘{print $1,$2, $3+2,$4, $5}’ [FILE]</td>\n</tr>\n<tr>\n<td align=\"left\">레코드 또는 필드의 문자열 길이 검사</td>\n<td align=\"left\">awk ’ length($0) > 20’ [FILE]</td>\n</tr>\n<tr>\n<td align=\"left\">파일에 저장된 awk program 실행</td>\n<td align=\"left\">awk -f [AWK FILE] [FILE]</td>\n</tr>\n<tr>\n<td align=\"left\">필드 구분 문자 변경하기</td>\n<td align=\"left\">awk -F ’:’ ’{ print $1 }’ [FILE]</td>\n</tr>\n<tr>\n<td align=\"left\">awk 실행 결과 레코드 정렬하기</td>\n<td align=\"left\">awk ’{ print $0 }’ [FILE]</td>\n</tr>\n<tr>\n<td align=\"left\">특정 레코드만 출력하기</td>\n<td align=\"left\">awk ‘NR == 2 { print $0; exit }’ [FILE]</td>\n</tr>\n<tr>\n<td align=\"left\">출력 필드 너비 지정하기</td>\n<td align=\"left\">awk ’{ printf ”%-3s %-8s %-4s %-4s %-4s\\n”, $1,$2, $3,$4, $5}’ [FILE]</td>\n</tr>\n<tr>\n<td align=\"left\">필드 중 최대 값 출력</td>\n<td align=\"left\">awk ‘{max = 0; for (i=3; i&#x3C;NF; i++) max = ($i > max) ?$i : max ; print max}’ [FILE]</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"-awk-사용-예\" style=\"position:relative;\"><a href=\"#-awk-%EC%82%AC%EC%9A%A9-%EC%98%88\" aria-label=\" awk 사용 예 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍 awk 사용 예</h2>\n<ul>\n<li>\n<p>예를 들기 위해 아래와 같은 파일을 하나 만들었다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ vi awkfile  \n홍 길동 <span class=\"token number\">3324</span>    <span class=\"token number\">5</span><span class=\"token operator\">/</span><span class=\"token number\">11</span><span class=\"token operator\">/</span><span class=\"token number\">96</span> <span class=\"token number\">50354</span>  \n임 꺽정 <span class=\"token number\">5246</span>    <span class=\"token number\">15</span><span class=\"token operator\">/</span><span class=\"token number\">9</span><span class=\"token operator\">/</span><span class=\"token number\">66</span> <span class=\"token number\">287650</span>  \n이 성계 <span class=\"token number\">7654</span>    <span class=\"token number\">6</span><span class=\"token operator\">/</span><span class=\"token number\">20</span><span class=\"token operator\">/</span><span class=\"token number\">58</span> <span class=\"token number\">60000</span>  \n정 약용 <span class=\"token number\">8683</span>    <span class=\"token number\">9</span><span class=\"token operator\">/</span><span class=\"token number\">40</span><span class=\"token operator\">/</span><span class=\"token number\">48</span> <span class=\"token number\">365000</span> </code></pre></div>\n<br/>\n</li>\n<li>\n<p>$0은 전체 필드를 출력한다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ awk '<span class=\"token punctuation\">{</span>print $<span class=\"token number\">0</span><span class=\"token punctuation\">}</span>' awkfile\n<span class=\"token operator\">></span> \n홍 길동 <span class=\"token number\">3324</span>    <span class=\"token number\">5</span><span class=\"token operator\">/</span><span class=\"token number\">11</span><span class=\"token operator\">/</span><span class=\"token number\">96</span> <span class=\"token number\">50354</span>  \n임 꺽정 <span class=\"token number\">5246</span>    <span class=\"token number\">15</span><span class=\"token operator\">/</span><span class=\"token number\">9</span><span class=\"token operator\">/</span><span class=\"token number\">66</span> <span class=\"token number\">287650</span>  \n이 성계 <span class=\"token number\">7654</span>    <span class=\"token number\">6</span><span class=\"token operator\">/</span><span class=\"token number\">20</span><span class=\"token operator\">/</span><span class=\"token number\">58</span> <span class=\"token number\">60000</span>  \n정 약용 <span class=\"token number\">8683</span>    <span class=\"token number\">9</span><span class=\"token operator\">/</span><span class=\"token number\">40</span><span class=\"token operator\">/</span><span class=\"token number\">48</span> <span class=\"token number\">365000</span> </code></pre></div>\n<br/>\n</li>\n<li>\n<p>$1은 공백을 기준으로 첫번째 필드를 출력한다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ awk '<span class=\"token punctuation\">{</span>print $<span class=\"token number\">1</span><span class=\"token punctuation\">}</span>' awkfile\n<span class=\"token operator\">></span> \n홍\n임\n이\n정</code></pre></div>\n<br/>\n</li>\n<li>\n<p>sed와 동일하게 특정 패턴을 가진 행을 출력할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ awk '<span class=\"token operator\">/</span>길동<span class=\"token operator\">/</span>' awkfile\n<span class=\"token operator\">></span> 홍 길동\t<span class=\"token number\">3324</span>\t<span class=\"token number\">5</span><span class=\"token operator\">/</span><span class=\"token number\">11</span><span class=\"token operator\">/</span><span class=\"token number\">96</span>\t<span class=\"token number\">50354</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p>다음과 같이 특정 패턴을 찾아 출력하는데 앞,뒤로 문자를 붙이기도 가능하다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ awk '<span class=\"token operator\">/</span>정<span class=\"token operator\">/</span><span class=\"token punctuation\">{</span>print <span class=\"token string\">\"\\t안녕하세요? \"</span> $<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">2</span> <span class=\"token string\">\"님!\"</span><span class=\"token punctuation\">}</span>' awkfile\n<span class=\"token operator\">></span> \n    안녕하세요<span class=\"token punctuation\">?</span> 임 꺽정님<span class=\"token operator\">!</span>  \n    안녕하세요<span class=\"token punctuation\">?</span> 정 약용님<span class=\"token operator\">!</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<h3 id=\"code-classlanguage-textawk-programcode-에는-아래와-같은-키워드가-제공됩니다\" style=\"position:relative;\"><a href=\"#code-classlanguage-textawk-programcode-%EC%97%90%EB%8A%94-%EC%95%84%EB%9E%98%EC%99%80-%EA%B0%99%EC%9D%80-%ED%82%A4%EC%9B%8C%EB%93%9C%EA%B0%80-%EC%A0%9C%EA%B3%B5%EB%90%A9%EB%8B%88%EB%8B%A4\" aria-label=\"code classlanguage textawk programcode 에는 아래와 같은 키워드가 제공됩니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">awk program</code> 에는 아래와 같은 키워드가 제공됩니다.</h3>\n<ul>\n<li>\n<p>목록</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">BEGIN   delete  <span class=\"token class-name\">END</span>     function    <span class=\"token keyword\">in</span>      printf\n<span class=\"token keyword\">break</span>   <span class=\"token keyword\">do</span>      exit    getline     next    <span class=\"token keyword\">return</span>\n<span class=\"token keyword\">continue</span>        <span class=\"token keyword\">else</span>    <span class=\"token keyword\">for</span>         <span class=\"token keyword\">if</span>      print      <span class=\"token keyword\">while</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">awk program</code>은 새로운 변수를 선언하고 값을 할당하거나 참조할 수 있습니다.<br>\n그리고 아래와 같이 특수 목적으로 미리 정의된 변수들을 사용할 수 있습니다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">ARGC        <span class=\"token punctuation\">:</span> ARGV 배열 요소의 갯수<span class=\"token punctuation\">.</span>\nARGV        <span class=\"token punctuation\">:</span> command line argument에 대한 배열<span class=\"token punctuation\">.</span>\nCONVFMT     <span class=\"token punctuation\">:</span> 문자열을 숫자로 변경할 때 사용할 형식<span class=\"token punctuation\">.</span> <span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%.6g\"</span><span class=\"token punctuation\">)</span>\nENVIRON     <span class=\"token punctuation\">:</span> 환경변수에 대한 배열<span class=\"token punctuation\">.</span>\nFILENAME    <span class=\"token punctuation\">:</span> 경로를 포함한 입력 파일 이름<span class=\"token punctuation\">.</span>\nFNR         <span class=\"token punctuation\">:</span> 현재 파일에서 현재 레코드의 순서 값<span class=\"token punctuation\">.</span>\nFS          <span class=\"token punctuation\">:</span> 필드 구분 문자<span class=\"token punctuation\">.</span> <span class=\"token punctuation\">(</span>기본 값 <span class=\"token operator\">=</span> space<span class=\"token punctuation\">)</span>\nNF          <span class=\"token punctuation\">:</span> 현재 레코드에 있는 필드의 갯수<span class=\"token punctuation\">.</span>\nNR          <span class=\"token punctuation\">:</span> 입력 시작 점에서 현재 레코드의 순서 값<span class=\"token punctuation\">.</span>\nOFMT        <span class=\"token punctuation\">:</span> 문자열을 출력할 때 사용할 형식<span class=\"token punctuation\">.</span>\nOFS         <span class=\"token punctuation\">:</span> 결과 출력 시 필드 구분 문자<span class=\"token punctuation\">.</span> <span class=\"token punctuation\">(</span>기본 값 <span class=\"token operator\">=</span> space<span class=\"token punctuation\">)</span>\nORS         <span class=\"token punctuation\">:</span> 결과 출력 시 레코드 구분 문자<span class=\"token punctuation\">.</span> <span class=\"token punctuation\">(</span>기본 값 <span class=\"token operator\">=</span> newline<span class=\"token punctuation\">)</span>\nRLENGTH     <span class=\"token punctuation\">:</span> match 함수에 의해 매칭된 문자열의 길이<span class=\"token punctuation\">.</span>\nRS          <span class=\"token punctuation\">:</span> 레코드 구분 문자<span class=\"token punctuation\">.</span> <span class=\"token punctuation\">(</span>기본 값 <span class=\"token operator\">=</span> newline<span class=\"token punctuation\">)</span>\nRSTART      <span class=\"token punctuation\">:</span> match 함수에 의해 매칭된 문자열의 시작 위치<span class=\"token punctuation\">.</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<h3 id=\"code-classlanguage-textawk-programcode-에서-사용-가능한-code-classlanguage-text함수code는-아래와-같습니다\" style=\"position:relative;\"><a href=\"#code-classlanguage-textawk-programcode-%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%9C-code-classlanguage-text%ED%95%A8%EC%88%98code%EB%8A%94-%EC%95%84%EB%9E%98%EC%99%80-%EA%B0%99%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"code classlanguage textawk programcode 에서 사용 가능한 code classlanguage text함수code는 아래와 같습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">awk program</code> 에서 사용 가능한 <code class=\"language-text\">함수</code>는 아래와 같습니다.</h3>\n<ul>\n<li>\n<p>목록</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\">Arithmetic</span> Functions <span class=\"token punctuation\">:</span>\n<span class=\"token function\">atan2</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>     <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>     <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>     <span class=\"token function\">exp</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>     <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>     <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>         <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>     <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">expr</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token class-name\">String</span> Functions <span class=\"token punctuation\">:</span>\n    <span class=\"token function\">gsub</span><span class=\"token punctuation\">(</span>ere<span class=\"token punctuation\">,</span> repl<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>      <span class=\"token function\">index</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>            length<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">s</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">match</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> ere<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>              <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> fs <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>     <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">,</span> expr<span class=\"token punctuation\">,</span> expr<span class=\"token punctuation\">,</span> <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>ere<span class=\"token punctuation\">,</span> repl<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>      <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> n <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>     <span class=\"token function\">tolower</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">toupper</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\nInput<span class=\"token operator\">/</span>Output <span class=\"token keyword\">and</span> <span class=\"token class-name\">General</span> Functions <span class=\"token punctuation\">:</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>          getline                 getline <span class=\"token return-type class-name\"><span class=\"token keyword\">var</span></span>\n    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<h3 id=\"계속해서-사용-예제를-확인해보겠습니다\" style=\"position:relative;\"><a href=\"#%EA%B3%84%EC%86%8D%ED%95%B4%EC%84%9C-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%A0%9C%EB%A5%BC-%ED%99%95%EC%9D%B8%ED%95%B4%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"계속해서 사용 예제를 확인해보겠습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>계속해서 사용 예제를 확인해보겠습니다.</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">OFMT</code> 변수 </p>\n<ul>\n<li>숫자를 출력할 때 숫자 포맷 제어할 경우 사용. 간단히 <code class=\"language-text\">printf</code>를 사용할 수도 있지만, <code class=\"language-text\">OFMT</code>를 지정할 수 있음.</li>\n<li>default는 <code class=\"language-text\">%.6g</code>로 소수점 6자리</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ awk 'BEGIN<span class=\"token punctuation\">{</span>OFMT<span class=\"token operator\">=</span><span class=\"token string\">\"%.2f\"</span><span class=\"token punctuation\">;</span> print <span class=\"token number\">1.23412</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15E-3</span><span class=\"token punctuation\">}</span>'\n<span class=\"token operator\">></span> <span class=\"token number\">1.23</span> <span class=\"token number\">0.01</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">printf</code> 함수 </p>\n<ul>\n<li>포매팅된 깔끔한 출력을 할 경우 사용</li>\n<li>newline을 제공하지 않기 때문에 newline이 요구되면 <code class=\"language-text\">\\n</code>을 사용해야함 </li>\n<li><code class=\"language-text\">c : 문자</code>, <code class=\"language-text\">d : 10진수</code>, <code class=\"language-text\">f : 실수</code>, <code class=\"language-text\">x : 16진수</code></li>\n<li>\n<p><code class=\"language-text\">-</code>이 붙으면 좌측에서 시작되고 기본형이면 우측에서 시작</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ awk '<span class=\"token punctuation\">{</span>printf <span class=\"token string\">\"The name is %-20s Number is %4d\\n\"</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">1</span><span class=\"token string\">\" \"</span>$<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">3</span><span class=\"token punctuation\">}</span>' awkfile  \n<span class=\"token operator\">></span> \nThe name <span class=\"token keyword\">is</span> 홍 길동           Number <span class=\"token keyword\">is</span> <span class=\"token number\">3324</span>\nThe name <span class=\"token keyword\">is</span> 임 꺽정           Number <span class=\"token keyword\">is</span> <span class=\"token number\">5246</span>\nThe name <span class=\"token keyword\">is</span> 이 성계           Number <span class=\"token keyword\">is</span> <span class=\"token number\">7654</span>\nThe name <span class=\"token keyword\">is</span> 정 약용           Number <span class=\"token keyword\">is</span> <span class=\"token number\">8683</span></code></pre></div>\n</li>\n</ul>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">awk -f</code> 옵션</p>\n<ul>\n<li><code class=\"language-text\">awk</code> 액션과 명령이 파일에 작성되어 있다면 <code class=\"language-text\">-f</code> 옵션을 사용</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">awk <span class=\"token operator\">-</span>f <span class=\"token punctuation\">[</span>awk 명령파일<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>awk 명령을 적용할 텍스트 파일<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ <span class=\"token return-type class-name\">vi</span> awkcommand \n<span class=\"token punctuation\">{</span>print <span class=\"token string\">\"안녕하세요 \"</span> $<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">2</span><span class=\"token string\">\"님\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>print $<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">3</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">4</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">5</span><span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ awk <span class=\"token operator\">-</span>f awkcommand awkfile\n<span class=\"token operator\">></span> \n안녕하세요 홍 길동님\n홍 길동 <span class=\"token number\">3324</span> <span class=\"token number\">5</span><span class=\"token operator\">/</span><span class=\"token number\">11</span><span class=\"token operator\">/</span><span class=\"token number\">96</span> <span class=\"token number\">50354</span>\n안녕하세요 임 꺽정님\n임 꺽정 <span class=\"token number\">5246</span> <span class=\"token number\">15</span><span class=\"token operator\">/</span><span class=\"token number\">9</span><span class=\"token operator\">/</span><span class=\"token number\">66</span> <span class=\"token number\">287650</span>\n안녕하세요 이 성계님\n이 성계 <span class=\"token number\">7654</span> <span class=\"token number\">6</span><span class=\"token operator\">/</span><span class=\"token number\">20</span><span class=\"token operator\">/</span><span class=\"token number\">58</span> <span class=\"token number\">60000</span>\n안녕하세요 정 약용님\n정 약용 <span class=\"token number\">8683</span> <span class=\"token number\">9</span><span class=\"token operator\">/</span><span class=\"token number\">40</span><span class=\"token operator\">/</span><span class=\"token number\">48</span> <span class=\"token number\">365000</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p>레코드와 필드</p>\n<ul>\n<li>\n<p>레코드</p>\n<ul>\n<li>레코드라고 불리는 각 라인은 newline으로 분리된다</li>\n<li>\n<p>NR 변수 : 각 레코드들의 번호는 awk의 빌트인 변수 NR에 저장된다. 레코드가 저장된 다음 NR의 값은 하나씩 증가한다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ awk '<span class=\"token punctuation\">{</span><span class=\"token class-name\">print</span> NR<span class=\"token punctuation\">,</span> $<span class=\"token number\">0</span><span class=\"token punctuation\">}</span>' awkfile\n<span class=\"token operator\">></span> \n<span class=\"token number\">1</span> 홍 길동\t<span class=\"token number\">3324</span>\t<span class=\"token number\">5</span><span class=\"token operator\">/</span><span class=\"token number\">11</span><span class=\"token operator\">/</span><span class=\"token number\">96</span>\t<span class=\"token number\">50354</span>\n<span class=\"token number\">2</span> 임 꺽정\t<span class=\"token number\">5246</span>\t<span class=\"token number\">15</span><span class=\"token operator\">/</span><span class=\"token number\">9</span><span class=\"token operator\">/</span><span class=\"token number\">66</span>\t<span class=\"token number\">287650</span>\n<span class=\"token number\">3</span> 이 성계\t<span class=\"token number\">7654</span>\t<span class=\"token number\">6</span><span class=\"token operator\">/</span><span class=\"token number\">20</span><span class=\"token operator\">/</span><span class=\"token number\">58</span>\t<span class=\"token number\">60000</span>\n<span class=\"token number\">4</span> 정 약용\t<span class=\"token number\">8683</span>\t<span class=\"token number\">9</span><span class=\"token operator\">/</span><span class=\"token number\">40</span><span class=\"token operator\">/</span><span class=\"token number\">48</span>\t<span class=\"token number\">365000</span></code></pre></div>\n</li>\n</ul>\n<br/>\n</li>\n<li>\n<p>필드</p>\n<ul>\n<li>\n<p>NF에 필드의 수를 유지하며 라인당 100개의 필드를 가질 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ awk '<span class=\"token punctuation\">{</span>print $<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">5</span><span class=\"token punctuation\">,</span>  NF<span class=\"token punctuation\">}</span>' awkfile\n<span class=\"token operator\">></span> \n홍 길동 <span class=\"token number\">50354</span> <span class=\"token number\">5</span>\n임 꺽정 <span class=\"token number\">287650</span> <span class=\"token number\">5</span>\n이 성계 <span class=\"token number\">60000</span> <span class=\"token number\">5</span>\n정 약용 <span class=\"token number\">365000</span> <span class=\"token number\">5</span></code></pre></div>\n</li>\n</ul>\n<br/>\n</li>\n<li>\n<p>필드 분리자</p>\n<ul>\n<li>\n<p>빌트인 변수 <code class=\"language-text\">FS</code>는 입력 필드 분리자의 값을 가지고 있다.<br>\ndefault는 공백과 탭. <code class=\"language-text\">FS</code> 값을 변경하기 위해선 <code class=\"language-text\">-F</code>을 사용하며 <code class=\"language-text\">-F</code> 다음에 오는 문자가 새로운 필드 분리자가 된다</p>\n<p>테스트를위해 아래와 같은 파일을 생성\t</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ vi awkfile_FS\n홍 길동 <span class=\"token punctuation\">:</span><span class=\"token number\">3324</span>   <span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token operator\">/</span><span class=\"token number\">11</span><span class=\"token operator\">/</span><span class=\"token number\">96</span>        <span class=\"token punctuation\">:</span><span class=\"token number\">50354</span>\n임 꺽정 <span class=\"token punctuation\">:</span><span class=\"token number\">5246</span>   <span class=\"token punctuation\">:</span><span class=\"token number\">15</span><span class=\"token operator\">/</span><span class=\"token number\">9</span><span class=\"token operator\">/</span><span class=\"token number\">66</span>        <span class=\"token punctuation\">:</span><span class=\"token number\">283502</span></code></pre></div>\n<p><code class=\"language-text\">:</code>을 분리자로 <code class=\"language-text\">홍</code>이라는 문자를 기준으로 분리해 1,2 행을 출력</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ awk <span class=\"token operator\">-</span>F<span class=\"token punctuation\">:</span> '<span class=\"token operator\">/</span>홍<span class=\"token operator\">/</span><span class=\"token punctuation\">{</span>print $<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">2</span><span class=\"token punctuation\">}</span>' awkfile_FS\n<span class=\"token operator\">></span> 홍 길동\t <span class=\"token number\">3324</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<br/>\n<hr>\n<h3 id=\"awk와-정규표현식\" style=\"position:relative;\"><a href=\"#awk%EC%99%80-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"awk와 정규표현식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>awk와 정규표현식</h3>\n<ul>\n<li>\n<p>정규표현식은 슬래시로 둘러싸인 문자들로 구성된 패턴 </p>\n<ul>\n<li>\n<p><code class=\"language-text\">정</code>으로 시작하는 문자열의 1,2,3행 출력</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ awk '<span class=\"token operator\">/</span><span class=\"token operator\">^</span>정<span class=\"token operator\">/</span><span class=\"token punctuation\">{</span>print $<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">3</span><span class=\"token punctuation\">}</span>' awkfile\n<span class=\"token operator\">></span> 정 약용 <span class=\"token number\">8683</span></code></pre></div>\n</li>\n</ul>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">match</code> 연산자(~) : 표현식과 매칭되는 것이 있는지 검사하는 연산자  </p>\n<ul>\n<li>\n<p>2번 필드가 g로 끝나지 않는 라인 출력</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ awk '$<span class=\"token number\">2</span> <span class=\"token operator\">!</span><span class=\"token operator\">~</span> <span class=\"token operator\">/</span>g$<span class=\"token operator\">/</span>' awkfile2\n<span class=\"token operator\">></span> Lee Seongkye\t<span class=\"token number\">7654</span>\t<span class=\"token number\">6</span><span class=\"token operator\">/</span><span class=\"token number\">20</span><span class=\"token operator\">/</span><span class=\"token number\">58</span>\t<span class=\"token number\">60000</span></code></pre></div>\n</li>\n</ul>\n<br/>\n</li>\n</ul>\n<h3 id=\"비교-표현식\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EA%B5%90-%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"비교 표현식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비교 표현식</h3>\n<ul>\n<li>\n<p>어떤 상태가 <code class=\"language-text\">참</code>일때만 액션이 수행\t</p>\n<ul>\n<li>\n<p>3번째 필드가 <code class=\"language-text\">7000</code> 크다면 1,2행을 출력</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ awk '$<span class=\"token number\">3</span> <span class=\"token operator\">></span> <span class=\"token number\">7000</span><span class=\"token punctuation\">{</span>print $<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">2</span><span class=\"token punctuation\">}</span>' awkfile\n<span class=\"token operator\">></span> \n이 성계\n정 약용</code></pre></div>\n<br/>\n</li>\n</ul>\n</li>\n<li>\n<p>논리 연산자</p>\n<ul>\n<li><code class=\"language-text\">&amp;&amp;</code> : AND 연산</li>\n<li><code class=\"language-text\">||</code> : OR 연산</li>\n<li>\n<p><code class=\"language-text\">!</code> : NOT 연산</p>\n<p>앞의 수식과 뒤의 수식 모두 맞아야 출력이 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ awk '$<span class=\"token number\">3</span> <span class=\"token operator\">></span> $<span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> $<span class=\"token number\">3</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span>' filename</code></pre></div>\n<hr>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"-명령어들의-실습\" style=\"position:relative;\"><a href=\"#-%EB%AA%85%EB%A0%B9%EC%96%B4%EB%93%A4%EC%9D%98-%EC%8B%A4%EC%8A%B5\" aria-label=\" 명령어들의 실습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👏 명령어들의 실습</h2>\n<ol>\n<li>\n<p>파일의 전체 내용 출력.\n<code class=\"language-text\">\"print\"</code> 액션만 지정한 경우, 입력으로 지정된 파일의 내용을 출력합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ awk '<span class=\"token punctuation\">{</span> print <span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt            <span class=\"token operator\">></span> file<span class=\"token punctuation\">.</span>txt의 전체 파일 내용 출력<span class=\"token punctuation\">.</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ cat file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span> ppotta <span class=\"token number\">30</span> <span class=\"token number\">40</span> <span class=\"token number\">50</span>\n<span class=\"token number\">2</span> soft   <span class=\"token number\">60</span> <span class=\"token number\">70</span> <span class=\"token number\">80</span>\n<span class=\"token number\">3</span> prog   <span class=\"token number\">90</span> <span class=\"token number\">10</span> <span class=\"token number\">20</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n$ awk '<span class=\"token punctuation\">{</span> print <span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span> ppotta <span class=\"token number\">30</span> <span class=\"token number\">40</span> <span class=\"token number\">50</span>\n<span class=\"token number\">2</span> soft   <span class=\"token number\">60</span> <span class=\"token number\">70</span> <span class=\"token number\">80</span>\n<span class=\"token number\">3</span> prog   <span class=\"token number\">90</span> <span class=\"token number\">10</span> <span class=\"token number\">20</span></code></pre></div>\n</li>\n</ol>\n<br/>\n<ol start=\"2\">\n<li>\n<p>필드 값 출력.\n<code class=\"language-text\">\"print $n\"</code> 액션을 통해 <code class=\"language-text\">n번째 필드 값</code>을 출력할 수 있습니다.<br>\n참고로, “$0”은 전체 레코드를 나타내는 변수입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ awk '<span class=\"token punctuation\">{</span> print $<span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt           <span class=\"token operator\">></span> 두 번째 필드 값 출력<span class=\"token punctuation\">.</span>\n$ awk '<span class=\"token punctuation\">{</span> print $<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>$<span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt        <span class=\"token operator\">></span> 첫 번째<span class=\"token punctuation\">,</span> 두 번째 필드 값 출력<span class=\"token punctuation\">.</span>\n$ awk '<span class=\"token punctuation\">{</span> print $<span class=\"token number\">0</span><span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt            <span class=\"token operator\">></span> 전체 레코드 출력<span class=\"token punctuation\">.</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ cat file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span> ppotta <span class=\"token number\">30</span> <span class=\"token number\">40</span> <span class=\"token number\">50</span>\n<span class=\"token number\">2</span> soft   <span class=\"token number\">60</span> <span class=\"token number\">70</span> <span class=\"token number\">80</span>\n<span class=\"token number\">3</span> prog   <span class=\"token number\">90</span> <span class=\"token number\">10</span> <span class=\"token number\">20</span>\n\n$ awk '<span class=\"token punctuation\">{</span> print $<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">2</span><span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span> ppotta\n<span class=\"token number\">2</span> soft\n<span class=\"token number\">3</span> prog</code></pre></div>\n</li>\n</ol>\n<br/>\n<ol start=\"3\">\n<li>\n<p>필드 값에 임의 문자열을 같이 출력.\n<code class=\"language-text\">$1</code> 필드 앞에 <code class=\"language-text\">\"no:\"</code> 라는 문자\n<code class=\"language-text\">$2</code> 필드 앞에 <code class=\"language-text\">\"user:\"</code> 라는 문자를 붙였다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">awk '<span class=\"token punctuation\">{</span>print <span class=\"token string\">\"no:\"</span>$<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user:\"</span>$<span class=\"token number\">2</span><span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt\n$ cat file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span> ppotta <span class=\"token number\">30</span> <span class=\"token number\">40</span> <span class=\"token number\">50</span>\n<span class=\"token number\">2</span> soft   <span class=\"token number\">60</span> <span class=\"token number\">70</span> <span class=\"token number\">80</span>\n<span class=\"token number\">3</span> prog   <span class=\"token number\">90</span> <span class=\"token number\">10</span> <span class=\"token number\">20</span>\n$ awk '<span class=\"token punctuation\">{</span>print <span class=\"token string\">\"no:\"</span>$<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user:\"</span>$<span class=\"token number\">2</span><span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span><span class=\"token class-name\">file<span class=\"token punctuation\">.</span>txt</span>\nno<span class=\"token punctuation\">:</span><span class=\"token number\">1</span> user<span class=\"token punctuation\">:</span><span class=\"token class-name\">ppotta</span>\nno<span class=\"token punctuation\">:</span><span class=\"token number\">2</span> user<span class=\"token punctuation\">:</span><span class=\"token class-name\">soft</span>\nno<span class=\"token punctuation\">:</span><span class=\"token number\">3</span> user<span class=\"token punctuation\">:</span>prog</code></pre></div>\n</li>\n</ol>\n<br/>\n<ol start=\"4\">\n<li>\n<p>지정된 문자열을 포함하는 레코드만 출력.<br>\nawk의 패턴에 <code class=\"language-text\">정규 표현식</code>을 사용하여 문자열 패턴을 검사할 수 있습니다.<br>\n이 때, 정규 표현식은 <code class=\"language-text\">\"/regex/\"</code> 형태로 지정할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">awk '<span class=\"token operator\">/</span>pp<span class=\"token operator\">/</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt                   # <span class=\"token string\">\"pp\"</span> 가 포함된 레코드만 유효<span class=\"token punctuation\">.</span>\nawk '<span class=\"token operator\">/</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token number\">0</span><span class=\"token operator\">/</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt               # <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span> 이 포함된 레코드만 유효<span class=\"token punctuation\">.</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ cat file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span> ppotta <span class=\"token number\">30</span> <span class=\"token number\">40</span> <span class=\"token number\">50</span>\n<span class=\"token number\">2</span> soft   <span class=\"token number\">60</span> <span class=\"token number\">70</span> <span class=\"token number\">80</span>\n<span class=\"token number\">3</span> prog   <span class=\"token number\">90</span> <span class=\"token number\">10</span> <span class=\"token number\">20</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n$ awk '<span class=\"token operator\">/</span>pp<span class=\"token operator\">/</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span> ppotta <span class=\"token number\">30</span> <span class=\"token number\">40</span> <span class=\"token number\">50</span>                      ## <span class=\"token string\">\"pp\"</span> 문자가 포함된 레코드만 출력\n$ awk '<span class=\"token operator\">/</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token number\">0</span><span class=\"token operator\">/</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span> ppotta <span class=\"token number\">30</span> <span class=\"token number\">40</span> <span class=\"token number\">50</span>                      ## <span class=\"token string\">\"20,30\"</span>이 포함된 레코드 출력\n<span class=\"token number\">3</span> prog   <span class=\"token number\">90</span> <span class=\"token number\">10</span> <span class=\"token number\">20</span></code></pre></div>\n</li>\n</ol>\n<br/>\n<ol start=\"5\">\n<li>\n<p>특정 필드 값 비교를 통해 선택된 레코드만 출력.<br>\n<code class=\"language-text\">awk program language의 표현식</code>을 사용해 유효한 레코드를 위한 필드 값을 비교할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">awk '$<span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span> print $<span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt   # 첫 번째 필드가 <span class=\"token number\">2</span>인 레코드의 두 번째 필드 출력<span class=\"token punctuation\">.</span>\nawk '$<span class=\"token number\">3</span> <span class=\"token operator\">></span> <span class=\"token number\">70</span> <span class=\"token punctuation\">{</span> print $<span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt   # 세 번째 필드가 <span class=\"token number\">70</span>보다 큰 레코드 출력<span class=\"token punctuation\">.</span>\nawk '$<span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">30</span> <span class=\"token operator\">&amp;&amp;</span> $<span class=\"token number\">4</span> <span class=\"token operator\">==</span><span class=\"token number\">40</span> <span class=\"token punctuation\">{</span> print $<span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>' file<span class=\"token punctuation\">.</span>txt   \n<span class=\"token preprocessor property\"># 세 번째 필드가 30이고 네 번째 필드가 40인 레코드의 두 번째 필드 출력.</span>\n<span class=\"token preprocessor property\"># &amp;&amp;의 경우 두개의 조건의 모두 참일때만 참</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ cat file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span> ppotta <span class=\"token number\">30</span> <span class=\"token number\">40</span> <span class=\"token number\">50</span>\n<span class=\"token number\">2</span> soft   <span class=\"token number\">60</span> <span class=\"token number\">70</span> <span class=\"token number\">80</span>\n<span class=\"token number\">3</span> prog   <span class=\"token number\">90</span> <span class=\"token number\">10</span> <span class=\"token number\">20</span>\n$ awk '$<span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span> print $<span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt\nsoft\n$ awk '$<span class=\"token number\">3</span> <span class=\"token operator\">></span> <span class=\"token number\">70</span> <span class=\"token punctuation\">{</span> print $<span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">3</span> prog   <span class=\"token number\">90</span> <span class=\"token number\">10</span> <span class=\"token number\">20</span>\n$ awk '$<span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">30</span> <span class=\"token operator\">&amp;&amp;</span> $<span class=\"token number\">4</span> <span class=\"token operator\">==</span><span class=\"token number\">40</span> <span class=\"token punctuation\">{</span> print $<span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>' file<span class=\"token punctuation\">.</span>txt\nppotta</code></pre></div>\n</li>\n</ol>\n<br/>\n<ol start=\"6\">\n<li>\n<p>지정된 필드의 값을 더한 값 출력. (특정 필드에 대한 합 구하기)<br>\n<code class=\"language-text\">awk program</code>에서 변수의 사용을 통해 특정 필드의 값을 더하고, 더해진 총 합을 출력할 수 있습니다.<br>\n이 때, 총합은 모든 레코드 탐색이 끝난 시점인, <code class=\"language-text\">\"END\"</code>패턴의 액션에서 실행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">awk '<span class=\"token punctuation\">{</span>sum <span class=\"token operator\">+=</span> $<span class=\"token number\">3</span><span class=\"token punctuation\">}</span> END <span class=\"token punctuation\">{</span> print sum <span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt # <span class=\"token number\">3</span>번째 필드의 값을 더한다<span class=\"token punctuation\">.</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ cat file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span> ppotta <span class=\"token number\">30</span> <span class=\"token number\">40</span> <span class=\"token number\">50</span>\n<span class=\"token number\">2</span> soft   <span class=\"token number\">60</span> <span class=\"token number\">70</span> <span class=\"token number\">80</span>\n<span class=\"token number\">3</span> prog   <span class=\"token number\">90</span> <span class=\"token number\">10</span> <span class=\"token number\">20</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n$ awk '<span class=\"token punctuation\">{</span>sum <span class=\"token operator\">+=</span> $<span class=\"token number\">3</span><span class=\"token punctuation\">}</span> END <span class=\"token punctuation\">{</span> print <span class=\"token string\">\"SUM : \"</span>sum <span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span><span class=\"token class-name\">file<span class=\"token punctuation\">.</span>txt</span>\nSUM <span class=\"token punctuation\">:</span> <span class=\"token number\">180</span>                             ## <span class=\"token number\">3</span>번째 필드의 <span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span><span class=\"token number\">90</span>의 총합 출력</code></pre></div>\n</li>\n</ol>\n<br/>\n<ol start=\"7\">\n<li>\n<p>여러 필드의 값을 더한 값 출력. (여러 필드에 대한 합 구하기)<br>\n<code class=\"language-text\">for 루프</code>를 수행하여 여러 필드의 값을 연산에 포함시킬 수 있습니다.<br>\n참고로 아래 예제에서 <code class=\"language-text\">\"NF\"</code>는 현재 레코드의 필드 갯수를 뜻하며<br>\n<code class=\"language-text\">\"$i\"</code>는 변수 i가 매핑된 필드를 뜻합니다. <code class=\"language-text\">(i=2일 때 $2)</code></p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">awk '<span class=\"token punctuation\">{</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>NF<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> total <span class=\"token operator\">+=</span> $i <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> END <span class=\"token punctuation\">{</span> print <span class=\"token string\">\"TOTAL : \"</span>total <span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt\n\n조건 <span class=\"token punctuation\">:</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span> 이고<span class=\"token punctuation\">.</span> 레코드의 필드 개수와 같아질때까지 total의 값이 증가한다<span class=\"token punctuation\">.</span>\n조건<span class=\"token number\">2</span> <span class=\"token punctuation\">:</span> 변수 i의 값이 NF와 동일해지면 total의 값을 출력한다<span class=\"token punctuation\">.</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ cat file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span> ppotta <span class=\"token number\">30</span> <span class=\"token number\">40</span> <span class=\"token number\">50</span>\n<span class=\"token number\">2</span> soft   <span class=\"token number\">60</span> <span class=\"token number\">70</span> <span class=\"token number\">80</span>\n<span class=\"token number\">3</span> prog   <span class=\"token number\">90</span> <span class=\"token number\">10</span> <span class=\"token number\">20</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n$ awk '<span class=\"token punctuation\">{</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>NF<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> total <span class=\"token operator\">+=</span> $i <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> END <span class=\"token punctuation\">{</span> print <span class=\"token string\">\"TOTAL : \"</span>total <span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span><span class=\"token class-name\">file<span class=\"token punctuation\">.</span>txt</span>\nTOTAL <span class=\"token punctuation\">:</span> <span class=\"token number\">450</span>\n\ni <span class=\"token operator\">=</span> <span class=\"token number\">3</span> 일때는 <span class=\"token number\">3</span>필드 <span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token operator\">+</span><span class=\"token number\">60</span><span class=\"token operator\">+</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">180</span>\ni <span class=\"token operator\">=</span> <span class=\"token number\">4</span> 일때는 <span class=\"token number\">4</span>필드 <span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token operator\">+</span><span class=\"token number\">70</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">180</span><span class=\"token operator\">+</span><span class=\"token number\">120</span>\ni <span class=\"token operator\">=</span> <span class=\"token number\">5</span> 일때는 <span class=\"token number\">5</span>필드 <span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token operator\">+</span><span class=\"token number\">80</span><span class=\"token operator\">+</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token operator\">+</span><span class=\"token number\">150</span></code></pre></div>\n</li>\n</ol>\n<br/>\n<ol start=\"8\">\n<li>\n<p>레코드 단위로 필드 합 및 평균 값 구하기.<br>\n변수 및 액션을 조합하여 레코드 단위로 필드들의 값 및 평균을 계산하여 출력할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">awk '<span class=\"token punctuation\">{</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>sum <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>$<span class=\"token number\">3</span><span class=\"token operator\">+</span>$<span class=\"token number\">4</span><span class=\"token operator\">+</span>$<span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span> print $<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">,</span> sum<span class=\"token operator\">/</span><span class=\"token number\">3</span> <span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt\n\n조건 <span class=\"token punctuation\">:</span> sum에 <span class=\"token number\">0</span>의 값을 넣어 초기화\n조건 <span class=\"token punctuation\">:</span> sum에 <span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span>필드의 값을 모두 더한다\n조건 <span class=\"token punctuation\">:</span> 출력할때 전체 필드<span class=\"token punctuation\">,</span> 총합 값<span class=\"token punctuation\">,</span> 평균 값을 출력</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ cat file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span> ppotta <span class=\"token number\">30</span> <span class=\"token number\">40</span> <span class=\"token number\">50</span>\n<span class=\"token number\">2</span> soft   <span class=\"token number\">60</span> <span class=\"token number\">70</span> <span class=\"token number\">80</span>\n<span class=\"token number\">3</span> prog   <span class=\"token number\">90</span> <span class=\"token number\">10</span> <span class=\"token number\">20</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n$ awk '<span class=\"token punctuation\">{</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>sum <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>$<span class=\"token number\">3</span><span class=\"token operator\">+</span>$<span class=\"token number\">4</span><span class=\"token operator\">+</span>$<span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span> print $<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">,</span> sum<span class=\"token operator\">/</span><span class=\"token number\">3</span> <span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span> ppotta <span class=\"token number\">30</span> <span class=\"token number\">40</span> <span class=\"token number\">50</span> <span class=\"token number\">120</span> <span class=\"token number\">40</span>\n<span class=\"token number\">2</span> soft   <span class=\"token number\">60</span> <span class=\"token number\">70</span> <span class=\"token number\">80</span> <span class=\"token number\">210</span> <span class=\"token number\">70</span>\n<span class=\"token number\">3</span> prog   <span class=\"token number\">90</span> <span class=\"token number\">10</span> <span class=\"token number\">20</span> <span class=\"token number\">120</span> <span class=\"token number\">40</span></code></pre></div>\n</li>\n</ol>\n<br/>\n<ol start=\"9\">\n<li>\n<p>필드에 연산을 수행한 결과 출력하기.<br>\nawk program 표현식을 사용하여, 필드에 연산을 수행한 결과를 출력할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">awk '<span class=\"token punctuation\">{</span>print $<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">3</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">4</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">5</span><span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt     # 세 번째 필드에 <span class=\"token number\">2</span>를 더한 값을 출력<span class=\"token punctuation\">.</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ cat file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span> ppotta <span class=\"token number\">30</span> <span class=\"token number\">40</span> <span class=\"token number\">50</span>\n<span class=\"token number\">2</span> soft   <span class=\"token number\">60</span> <span class=\"token number\">70</span> <span class=\"token number\">80</span>\n<span class=\"token number\">3</span> prog   <span class=\"token number\">90</span> <span class=\"token number\">10</span> <span class=\"token number\">20</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n$ awk '<span class=\"token punctuation\">{</span>print $<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">3</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">4</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">5</span><span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span> ppotta <span class=\"token number\">32</span> <span class=\"token number\">40</span> <span class=\"token number\">50</span>\n<span class=\"token number\">2</span> soft <span class=\"token number\">62</span> <span class=\"token number\">70</span> <span class=\"token number\">80</span>\n<span class=\"token number\">3</span> prog <span class=\"token number\">92</span> <span class=\"token number\">10</span> <span class=\"token number\">20</span></code></pre></div>\n</li>\n</ol>\n<br/>\n<ol start=\"10\">\n<li>\n<p>레코드 또는 필드의 문자열 길이 검사.<br>\n<code class=\"language-text\">length() 함수</code>를 사용해 레코드 또는 필드의 문자열 길이를 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">awk ' <span class=\"token function\">length</span><span class=\"token punctuation\">(</span>$<span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">20</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt               # 레코드의 길이가 <span class=\"token number\">20</span>보다 큰 경우<span class=\"token punctuation\">.</span>\nawk ' <span class=\"token function\">length</span><span class=\"token punctuation\">(</span>$<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">4</span> <span class=\"token punctuation\">{</span> print $<span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> ' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt  # 두 번째 필드의 길이가 <span class=\"token number\">4</span>보다 큰 레코드 출력<span class=\"token punctuation\">.</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ cat file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span> ppotta <span class=\"token number\">30</span> <span class=\"token number\">40</span> <span class=\"token number\">50</span>\n<span class=\"token number\">2</span> soft   <span class=\"token number\">60</span> <span class=\"token number\">70</span> <span class=\"token number\">80</span>\n<span class=\"token number\">3</span> prog   <span class=\"token number\">90</span> <span class=\"token number\">10</span> <span class=\"token number\">20</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n$ awk ' <span class=\"token function\">length</span><span class=\"token punctuation\">(</span>$<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">4</span> <span class=\"token punctuation\">{</span> print $<span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> ' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span> ppotta <span class=\"token number\">30</span> <span class=\"token number\">40</span> <span class=\"token number\">50</span>               ## ppotta <span class=\"token operator\">-></span> <span class=\"token number\">6</span>의 길이이니깐 출력</code></pre></div>\n</li>\n</ol>\n<br/>\n<ol start=\"11\">\n<li>\n<p>파일에 저장된 awk program 실행.<br>\nawk 실행 시, “-f” 옵션을 사용하여 파일로부터 awk program을 실행할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">awk <span class=\"token operator\">-</span>f awkp<span class=\"token punctuation\">.</span>script <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt           # awkp<span class=\"token punctuation\">.</span>script에 저장된 awk program 실행</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ cat file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span> ppotta <span class=\"token number\">30</span> <span class=\"token number\">40</span> <span class=\"token number\">50</span>\n<span class=\"token number\">2</span> soft   <span class=\"token number\">60</span> <span class=\"token number\">70</span> <span class=\"token number\">80</span>\n<span class=\"token number\">3</span> prog   <span class=\"token number\">90</span> <span class=\"token number\">10</span> <span class=\"token number\">20</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n$ cat awkp<span class=\"token punctuation\">.</span>script\n<span class=\"token preprocessor property\"># 스크립트 내용</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>NF<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        total <span class=\"token operator\">+=</span> $i\n<span class=\"token punctuation\">}</span>\n\nEND <span class=\"token punctuation\">{</span>\n    print <span class=\"token string\">\"TOTAL : \"</span>total\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token preprocessor property\"># 내용은 위의 전체 필드의 합과 같다.</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n$ awk <span class=\"token operator\">-</span>f awkp<span class=\"token punctuation\">.</span>script <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span><span class=\"token class-name\">file<span class=\"token punctuation\">.</span>txt</span>\nTOTAL <span class=\"token punctuation\">:</span> <span class=\"token number\">450</span></code></pre></div>\n</li>\n</ol>\n<br/>\n<ol start=\"12\">\n<li>\n<p>필드 구분 문자 변경하기.<br>\n기본적으로 레코드의 필드를 구분하는 문자는 space(공백) 입니다.<br>\n이를 <code class=\"language-text\">\"-F\"</code> 사용하여 변경할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">awk <span class=\"token operator\">-</span>F <span class=\"token string character\">':'</span> '<span class=\"token punctuation\">{</span> print $<span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt         # 필드 구분 문자를 <span class=\"token punctuation\">:</span> 로 변경<span class=\"token punctuation\">.</span>\nawk <span class=\"token operator\">-</span>F <span class=\"token string character\">','</span> '<span class=\"token punctuation\">{</span> print $<span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt         # 필드 구분 문자를 <span class=\"token punctuation\">,</span> 로 변경<span class=\"token punctuation\">.</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ cat file2<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> ppotta<span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> soft<span class=\"token punctuation\">,</span>   <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">,</span> prog<span class=\"token punctuation\">,</span>   <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n$ awk <span class=\"token operator\">-</span>F <span class=\"token string character\">','</span> '<span class=\"token punctuation\">{</span> print $<span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file2<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">3</span></code></pre></div>\n</li>\n</ol>\n<br/>\n<ol start=\"13\">\n<li>\n<p>awk 실행 결과 레코드 정렬하기.<br>\n<code class=\"language-text\">sort</code> 명령을 조합하여 awk 실행 결과로 출력되는 레코드를 정렬할 수 있습니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">awk '<span class=\"token punctuation\">{</span> print $<span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>' file<span class=\"token punctuation\">.</span>txt <span class=\"token operator\">|</span> sort      # 출력 레코드를 오름차순으로 정렬<span class=\"token punctuation\">.</span>\nawk '<span class=\"token punctuation\">{</span> print $<span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>' file<span class=\"token punctuation\">.</span>txt <span class=\"token operator\">|</span> sort <span class=\"token operator\">-</span>r   # 출력 레코드를 역순으로 정렬<span class=\"token punctuation\">.</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ cat file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span> ppotta <span class=\"token number\">30</span> <span class=\"token number\">40</span> <span class=\"token number\">50</span>\n<span class=\"token number\">2</span> soft   <span class=\"token number\">60</span> <span class=\"token number\">70</span> <span class=\"token number\">80</span>\n<span class=\"token number\">3</span> prog   <span class=\"token number\">90</span> <span class=\"token number\">10</span> <span class=\"token number\">20</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n$ awk '<span class=\"token punctuation\">{</span> print $<span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>' file<span class=\"token punctuation\">.</span>txt <span class=\"token operator\">|</span> sort <span class=\"token operator\">-</span>r     # 결과 값을 내림차순으로 정렬\n<span class=\"token number\">3</span> prog   <span class=\"token number\">90</span> <span class=\"token number\">10</span> <span class=\"token number\">20</span>\n<span class=\"token number\">2</span> soft   <span class=\"token number\">60</span> <span class=\"token number\">70</span> <span class=\"token number\">80</span>\n<span class=\"token number\">1</span> ppotta <span class=\"token number\">30</span> <span class=\"token number\">40</span> <span class=\"token number\">50</span></code></pre></div>\n</li>\n</ol>\n<br/>\n<ol start=\"14\">\n<li>\n<p>특정 레코드만 출력하기.<br>\n<code class=\"language-text\">exit</code> 키워드를 사용하여 조건에 따라 awk 실행을 중지시킬 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">awk '<span class=\"token punctuation\">{</span> print $<span class=\"token number\">0</span><span class=\"token punctuation\">;</span> exit <span class=\"token punctuation\">}</span>' file<span class=\"token punctuation\">.</span>txt                 # 첫 번째 레코드만 출력하고 실행 중지<span class=\"token punctuation\">.</span>\nawk 'NR <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span> print $<span class=\"token number\">0</span><span class=\"token punctuation\">;</span> exit <span class=\"token punctuation\">}</span>' file<span class=\"token punctuation\">.</span>txt         # 두 번째 레코드만 출력하고 실행 중지<span class=\"token punctuation\">.</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ cat file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span> ppotta <span class=\"token number\">30</span> <span class=\"token number\">40</span> <span class=\"token number\">50</span>\n<span class=\"token number\">2</span> soft   <span class=\"token number\">60</span> <span class=\"token number\">70</span> <span class=\"token number\">80</span>\n<span class=\"token number\">3</span> prog   <span class=\"token number\">90</span> <span class=\"token number\">10</span> <span class=\"token number\">20</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n$ awk 'NR <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span> print $<span class=\"token number\">0</span><span class=\"token punctuation\">;</span> exit <span class=\"token punctuation\">}</span>' file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">2</span> soft   <span class=\"token number\">60</span> <span class=\"token number\">70</span> <span class=\"token number\">80</span></code></pre></div>\n</li>\n</ol>\n<br/>\n<ol start=\"15\">\n<li>\n<p>출력 필드 너비 지정하기.<br>\n<code class=\"language-text\">printf</code> 함수를 사용하여 필드 값 출력 포맷을 지정할 수 있습니다.<br>\nprintf 함수에 사용하는 출력 포맷은 C 언어와 동일합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">awk '<span class=\"token punctuation\">{</span> printf <span class=\"token string\">\"%-3s %-8s %-4s %-4s %-4s\\n\"</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">3</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">4</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">5</span><span class=\"token punctuation\">}</span>' file<span class=\"token punctuation\">.</span>txt</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ cat file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span> ppotta <span class=\"token number\">30</span> <span class=\"token number\">40</span> <span class=\"token number\">50</span>\n<span class=\"token number\">2</span> soft   <span class=\"token number\">60</span> <span class=\"token number\">70</span> <span class=\"token number\">80</span>\n<span class=\"token number\">3</span> prog   <span class=\"token number\">90</span> <span class=\"token number\">10</span> <span class=\"token number\">20</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n$ awk '<span class=\"token punctuation\">{</span> printf <span class=\"token string\">\"%-3s %-8s %-4s %-4s %-4s\\n\"</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">3</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">4</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">5</span><span class=\"token punctuation\">}</span>' file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span>   ppotta   <span class=\"token number\">30</span>   <span class=\"token number\">40</span>   <span class=\"token number\">50</span>  \n<span class=\"token number\">2</span>   soft     <span class=\"token number\">60</span>   <span class=\"token number\">70</span>   <span class=\"token number\">80</span>  \n<span class=\"token number\">3</span>   prog     <span class=\"token number\">90</span>   <span class=\"token number\">10</span>   <span class=\"token number\">20</span>\n\n<span class=\"token preprocessor property\"># %-3 같은 형식은 스페이스(공간)을 사용하겠다는 의미이다.</span>\n<span class=\"token preprocessor property\"># -는 왼쪽부터 시작한다는 뜻.</span></code></pre></div>\n</li>\n</ol>\n<br/>\n<ol start=\"16\">\n<li>\n<p>필드 중 최대 값 출력.<br>\n아래와 같은 코드를 통해 레코드 내 필드의 최대 값을 구하여 출력할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">awk '<span class=\"token punctuation\">{</span>max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>NF<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> max <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>$i <span class=\"token operator\">></span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> $i <span class=\"token punctuation\">:</span> max <span class=\"token punctuation\">;</span> print max<span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>\n\n조건 <span class=\"token punctuation\">:</span> max의 값을 <span class=\"token number\">0</span>으로 초기화\n조건 <span class=\"token punctuation\">:</span> i는 레코드의 값만큼 증가\n조건 <span class=\"token punctuation\">:</span> max에는 i의 값을 순차적으로 저장\n조건 <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">?</span> 조건으로 크거나 같게되면 max 값 출력</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">file<span class=\"token punctuation\">.</span>txt\n$ cat file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">1</span> ppotta <span class=\"token number\">30</span> <span class=\"token number\">40</span> <span class=\"token number\">50</span>\n<span class=\"token number\">2</span> soft   <span class=\"token number\">60</span> <span class=\"token number\">70</span> <span class=\"token number\">80</span>\n<span class=\"token number\">3</span> prog   <span class=\"token number\">90</span> <span class=\"token number\">10</span> <span class=\"token number\">20</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n$ awk '<span class=\"token punctuation\">{</span>max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>NF<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> max <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>$i <span class=\"token operator\">></span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> $i <span class=\"token punctuation\">:</span> max <span class=\"token punctuation\">;</span> print max<span class=\"token punctuation\">}</span>' <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file<span class=\"token punctuation\">.</span>txt\n<span class=\"token number\">40</span>                 # 첫번째 레코드의 가장 큰 값\n<span class=\"token number\">70</span>                 # 두번째 레코드의 가장 큰 값\n<span class=\"token number\">90</span>                 # 세번째 레코드의 가장 큰 값</code></pre></div>\n</li>\n</ol>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-awk-\">✔ awk ?</a></li>\n<li><a href=\"#-awk-%ED%98%95%EC%8B%9D\">✌ awk 형식</a></li>\n<li><a href=\"#-awk-%EC%82%AC%EC%9A%A9%EB%B2%95\">🙌 awk 사용법</a></li>\n<li>\n<p><a href=\"#-awk-%EC%82%AC%EC%9A%A9-%EC%98%88\">👍 awk 사용 예</a></p>\n<ul>\n<li><a href=\"#awk-program-%EC%97%90%EB%8A%94-%EC%95%84%EB%9E%98%EC%99%80-%EA%B0%99%EC%9D%80-%ED%82%A4%EC%9B%8C%EB%93%9C%EA%B0%80-%EC%A0%9C%EA%B3%B5%EB%90%A9%EB%8B%88%EB%8B%A4\"><code class=\"language-text\">awk program</code> 에는 아래와 같은 키워드가 제공됩니다.</a></li>\n<li><a href=\"#awk-program-%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%9C-%ED%95%A8%EC%88%98%EB%8A%94-%EC%95%84%EB%9E%98%EC%99%80-%EA%B0%99%EC%8A%B5%EB%8B%88%EB%8B%A4\"><code class=\"language-text\">awk program</code> 에서 사용 가능한 <code class=\"language-text\">함수</code>는 아래와 같습니다.</a></li>\n<li><a href=\"#%EA%B3%84%EC%86%8D%ED%95%B4%EC%84%9C-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%A0%9C%EB%A5%BC-%ED%99%95%EC%9D%B8%ED%95%B4%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\">계속해서 사용 예제를 확인해보겠습니다.</a></li>\n<li><a href=\"#awk%EC%99%80-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D\">awk와 정규표현식</a></li>\n<li><a href=\"#%EB%B9%84%EA%B5%90-%ED%91%9C%ED%98%84%EC%8B%9D\">비교 표현식</a></li>\n</ul>\n</li>\n<li><a href=\"#-%EB%AA%85%EB%A0%B9%EC%96%B4%EB%93%A4%EC%9D%98-%EC%8B%A4%EC%8A%B5\">👏 명령어들의 실습</a></li>\n</ul>\n</div>","frontmatter":{"date":"June 28, 2021","title":"[LINUX] - Shell Script - awk","categories":"LINUX","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/linux-awk/"}},"site":{"siteMetadata":{"siteUrl":"https://nasa1515.com","comments":{"utterances":{"repo":"nasa1515/nasablog"}}}}},"pageContext":{"slug":"/linux-sed/","nextSlug":"/docker-file/","prevSlug":"/linux-awk/"}},"staticQueryHashes":["1073350324","2938748437"]}