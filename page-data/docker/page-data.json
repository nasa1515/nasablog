{"componentChunkName":"component---src-templates-blog-template-js","path":"/docker/","result":{"data":{"cur":{"id":"86ebeb5f-f270-5f35-ac2b-da9d5887dfe4","html":"<p>머리말  </p>\n<p> 데브옵스나, 인프라엔지니어들에겐 필수적으로 익혀야 하는 기술이지만 나는 이제야 처음 접하기 시작해서 남들보다 쪼금 늦은 것 같다.<br>\n약간의 실습만 해봤는데도 이렇게 편하게 할 수 있는 작업들을 나는 그동안 make &#x26;&#x26; install 명령어를 낭비했던 것 같다.<br>\n이번 포스트에서는 도커란 무엇인지에 대해 설명한다.  </p>\n<h2 id=\"-도커란-무엇인가\" style=\"position:relative;\"><a href=\"#-%EB%8F%84%EC%BB%A4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\" 도커란 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ 도커란 무엇인가?</h2>\n<p><img src=\"https://t1.daumcdn.net/cfile/tistory/9975EB375B055B7519\"></p>\n<p>도커는 <code class=\"language-text\">컨테이너 기반</code>의 (오픈소스) 가상화 플랫폼입니다.</p>\n<p><code class=\"language-text\">컨테이너</code>라 하면 배에 실는 네모난 화물 수송용 박스를 생각할 수 있는데 각각의 컨테이너 안에는 옷, 신발, 전자제품, 술, 과일등<br>\n다양한 화물을 넣을 수 있고 규격화되어 컨테이너선이나 트레일러등 다양한 운송수단으로 쉽게 옮길 수 있습니다.</p>\n<p>서버에서 이야기하는 컨테이너도 이와 비슷한데 다양한 프로그램, 실행환경을 컨테이너로 추상화하고 동일한 인터페이스를 제공하여<br>\n프로그램의 배포 및 관리를 단순하게 해줍니다. <code class=\"language-text\">백엔드 프로그램</code>, <code class=\"language-text\">데이터베이스 서버</code>, <code class=\"language-text\">메시지 큐</code>등 어떤 프로그램도 컨테이너로 추상화할 수 있고 조립PC, AWS, Azure, Google cloud등 어디에서든 실행할 수 있습니다.</p>\n<hr>\n<h2 id=\"-컨테이너container\" style=\"position:relative;\"><a href=\"#-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88container\" aria-label=\" 컨테이너container permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✌ 컨테이너(Container)</h2>\n<p><img src=\"https://t1.daumcdn.net/cfile/tistory/99DEAB4D5B652E051B\">  </p>\n<p><code class=\"language-text\">컨테이너</code>는 간단하게 말해 그림과 같이 모든 프로세스가 분리하여 동작하는 것입니다.</p>\n<p>가상화 기술의 하나지만 <code class=\"language-text\">기존방식과는 차이</code>가 있습니다. 기존의 가상화 방식은 주로 OS를 가상화하였습니다.<br>\n익숙한 <code class=\"language-text\">VMware</code>나 <code class=\"language-text\">VirtualBox</code>같은 가상머신은 호스트 OS 위에 게스트 OS 전체를 가상화하여 사용하는 방식입니다.<br>\n이 방식은 여러가지 OS를 가상화(리눅스에서 윈도우를 돌린다던가) 할 수 있고 비교적 사용법이 간단하지만 무겁고 느려서 운영환경에선 사용할 수 없었습니다.</p>\n<p>이러한 상황을 개선하기 위해 <code class=\"language-text\">CPU의 가상화 기술(HVM)</code>을 이용한  <code class=\"language-text\">KVMKernel-based Virtual Machine</code>과 <code class=\"language-text\">반가상화 Paravirtualization</code>방식의 <code class=\"language-text\">Xen</code>이 등장합니다.  </p>\n<p>이러한 방식은 게스트 OS가 필요하긴 하지만 전체 OS를 가상화하는 방식이 아니였기 때문에<br>\n호스트형 가상화 방식에 비해 성능이 향상되었습니다.<br>\n이러한 기술들은 <code class=\"language-text\">OpenStack</code>이나 <code class=\"language-text\">AWS, Rackspace</code>같은 클라우드 서비스에서 가상 컴퓨팅 기술의 기반이 되었습니다.</p>\n<hr>\n<h2 id=\"-도커의-이미지\" style=\"position:relative;\"><a href=\"#-%EB%8F%84%EC%BB%A4%EC%9D%98-%EC%9D%B4%EB%AF%B8%EC%A7%80\" aria-label=\" 도커의 이미지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👌 도커의 이미지</h2>\n<p><img src=\"https://subicura.com/assets/article_images/2017-01-19-docker-guide-for-beginners-1/docker-image.png\">  </p>\n<p>도커에서 가장 중요한 개념은 컨테이너와 함께 <code class=\"language-text\">이미지</code>라는 개념입니다.</p>\n<p>이미지는 컨테이너 실행에 필요한 파일과 설정값등을 포함하고 있는 것으로 상태값을 가지지 않고 변하지 않습니다<code class=\"language-text\">(Immutable)</code>.<br>\n컨테이너는 <code class=\"language-text\">이미지를 실행</code>한 상태라고 볼 수 있고 추가되거나 변하는 값은 컨테이너에 저장됩니다.<br>\n같은 이미지에서 여러개의 컨테이너를 생성할 수 있고 컨테이너의 상태가 바뀌거나<br>\n컨테이너가 삭제되더라도 이미지는 변하지 않고 그대로 남아있습니다.</p>\n<p>ubuntu이미지는 ubuntu를 실행하기 위한 모든 파일을 가지고 있고<br>\nMySQL이미지는 debian을 기반으로 MySQL을 실행하는데 필요한 파일과 실행 명령어, 포트 정보등을 가지고 있습니다.  </p>\n<p>말그대로 이미지는 컨테이너를 실행하기 위한 <code class=\"language-text\">모든 정보</code>를 가지고 있기 때문에 더 이상 의존성 파일을 컴파일하고 이것저것 설치할 필요가 없습니다.<br>\n이제 새로운 서버가 추가되면 미리 만들어 놓은 이미지를 다운받고 컨테이너를 생성만 하면 됩니다.<br>\n한 서버에 여러개의 컨테이너를 실행할 수 있고, 수십, 수백, 수천대의 서버도 문제없습니다.</p>\n<p>도커 이미지는 <code class=\"language-text\">Docker hub</code>에 등록하거나 <code class=\"language-text\">Docker Registry</code> 저장소를 직접 만들어 관리할 수 있습니다.<br>\n누구나 쉽게 이미지를 만들고 배포할 수 있습니다.\n<img src=\"https://subicura.com/assets/article_images/2017-01-19-docker-guide-for-beginners-1/docker-store.png\"></p>\n<hr>\n<h2 id=\"-도커와-vm의-차이\" style=\"position:relative;\"><a href=\"#-%EB%8F%84%EC%BB%A4%EC%99%80-vm%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\" 도커와 vm의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎶 도커와 VM의 차이</h2>\n<p>컨테이너위 여러 OS에 APP이 올린 도커의 모습을 보고 자연스럽게 VM과의 비교를 하게 됩니다.<br>\n그럼 기존의 VM과는 어떤 부분의 차이가 있을까요?</p>\n<p><img src=\"https://t1.daumcdn.net/cfile/tistory/9907324D5B652E040D\"></p>\n<p>위 그림을 보면 명확하게 알 수 있습니다. </p>\n<p><code class=\"language-text\">VM(virtual machine)</code>의 경우 Hypervisor을 통해 가상화, 각 <code class=\"language-text\">독립 된 커널 공간</code>을 가진 OS를 생성하는 식의 환경 구성을 해주고.</p>\n<p><code class=\"language-text\">containers</code>의 경우 <code class=\"language-text\">커널 공간을 공유</code>하며 같은 가상화 기능을 제공해줍니다.<br>\n즉 같은 커널공간을 공유하기 때문에 virtual machines보다 좀 더 <code class=\"language-text\">가볍다</code>. </p>\n<br/>\n<h3 id=\"이런-기술이-가능-한-이유\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%9F%B0-%EA%B8%B0%EC%88%A0%EC%9D%B4-%EA%B0%80%EB%8A%A5-%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"이런 기술이 가능 한 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이런 기술이 가능 한 이유</h3>\n<p>우선 namespaces 와 cgroup에 대해서 알아야 한다. </p>\n<ul>\n<li>\n<p><code class=\"language-text\">namespace</code>\n먼저 리눅스 커널의 주요 이름 공간에 대해서 알아보자.  </p>\n<p><img src=\"https://user-images.githubusercontent.com/69498804/90347852-bde24080-e06d-11ea-92c0-1a1bddf0572b.png\" alt=\"스크린샷, 2020-08-17 09-40-28\">\n<code class=\"language-text\">이름 공간</code>은 모두 리눅스 상에서 동작하는 프로세스에 할당하는 자원을 분리하는 기능을 한다</p>\n</li>\n<li>\n<p>cgroups (Control Groups)<br>\ncgroups(Control Groups)는 자원(resources)에 대한 제어를 가능하게 해주는 리눅스 커널의 기능입니다.</p>\n<p><code class=\"language-text\">cgroups</code>는 다음 자원을 제어할 수 있다.</p>\n<ul>\n<li>메모리, CPU, I/O, 네트워크, device노드</li>\n</ul>\n</li>\n</ul>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-%EB%8F%84%EC%BB%A4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\">✔ 도커란 무엇인가?</a></li>\n<li><a href=\"#-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88container\">✌ 컨테이너(Container)</a></li>\n<li><a href=\"#-%EB%8F%84%EC%BB%A4%EC%9D%98-%EC%9D%B4%EB%AF%B8%EC%A7%80\">👌 도커의 이미지</a></li>\n<li>\n<p><a href=\"#-%EB%8F%84%EC%BB%A4%EC%99%80-vm%EC%9D%98-%EC%B0%A8%EC%9D%B4\">🎶 도커와 VM의 차이</a></p>\n<ul>\n<li><a href=\"#%EC%9D%B4%EB%9F%B0-%EA%B8%B0%EC%88%A0%EC%9D%B4-%EA%B0%80%EB%8A%A5-%ED%95%9C-%EC%9D%B4%EC%9C%A0\">이런 기술이 가능 한 이유</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"머리말    데브옵스나, 인프라엔지니어들에겐 필수적으로 익혀야 하는 기술이지만 나는 이제야 처음 접하기 시작해서 남들보다 쪼금 늦은 것 같다.  약간의 실습만 해봤는데도 이렇게 편하게 할 수 있는 작업들을 나는 그동안 make && install 명령어를 낭비했던 것 같다.  이번 포스트에서는 도커란 무엇인지에 대해 설명한다.   ✔ 도커란 무엇인가?  도커는 의 (오픈소스) 가상화 플랫폼입니다. 라 하면 배에 실는 네모난 화물 수송용 박스를 생각할 수 있는데 각각의 컨테이너 안에는 옷, 신발, 전자제품, 술, 과일등 다양한 화물을 넣을 수 있고 규격화되어 컨테이너선이나 트레일러등 다양한 운송수단으로 쉽게 옮길 수 있…","frontmatter":{"date":"June 26, 2021","title":"[DOCKER] - DOCKER란?","categories":"DevOps","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/docker/"}},"next":{"id":"42ce3601-f03b-5fec-b93c-308b868bf3a5","html":"<p>머리말  </p>\n<p> 이전 포스트에서는 도커에 대해서, 도커와 VM과의 차이 에서 포스팅 했었다.<br>\n이번 포스트에서는 실제 도커의 설치방법 및 확인 방법등에 대해 간단하게 포스트 했다.</p>\n<hr>\n<h2 id=\"-도커-설치\" style=\"position:relative;\"><a href=\"#-%EB%8F%84%EC%BB%A4-%EC%84%A4%EC%B9%98\" aria-label=\" 도커 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ 도커 설치</h2>\n<p>도커는 리눅스 컨테이너 기술이므로 macOS나 windows에 설치할 경우 가상머신에 설치가 됩니다.<br>\n리눅스 컨테이너 말고 윈도우즈 컨테이너라는 것도 존재하지만 이 포스트는 리눅스를 전제로 합니다.  </p>\n<ul>\n<li>\n<p>Linux<br>\n리눅스에 도커를 설치하는 방법은 자동 설치 스크립트를 이용하는 것이 가장 쉽습니다.<br>\n다음 명령어를 입력하면 root 권한을 요구하고 잠시 기다리면 설치가 완료됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">curl <span class=\"token operator\">-</span><span class=\"token class-name\">fsSL</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">.</span>docker<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span> <span class=\"token operator\">|</span> sudo sh</code></pre></div>\n</li>\n</ul>\n<hr>\n<p>스크립트를 사용하는 방법 외에도 패키지 저장소에 연결하여 설치도 가능합니다.  </p>\n<ul>\n<li>\n<p>패키지 저장소 연결</p>\n<ul>\n<li>사전 패키지 설치  </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># sudo yum install -y yum-utils \\</span>\n<span class=\"token operator\">></span> device<span class=\"token operator\">-</span>mapper<span class=\"token operator\">-</span>persistent<span class=\"token operator\">-</span>data \\\n<span class=\"token operator\">></span> lvm2</code></pre></div>\n<br/>\n<ul>\n<li>Yum 저장소 설정\n<code class=\"language-text\">yum-config-manager</code>로 docker-ce 패키지 저장소에 연결한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># sudo yum-coinfig-manager \\</span>\n<span class=\"token operator\">></span> <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>repo \\\n<span class=\"token operator\">></span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>download<span class=\"token punctuation\">.</span>docker<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>linux<span class=\"token operator\">/</span>centos<span class=\"token operator\">/</span>docker<span class=\"token operator\">-</span>ce<span class=\"token punctuation\">.</span>repo</code></pre></div>\n<br/>\n<ul>\n<li>docker-ce 설치</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># sudo yum install -y docker-ce docker-ce-cli containerd.io</span></code></pre></div>\n<br/>\n<ul>\n<li>서비스 실행 및 활성화</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token preprocessor property\"># sudo systemctl start docker</span>\n<span class=\"token preprocessor property\"># sudo systemctl enable docker</span></code></pre></div>\n<br/>\n<ul>\n<li>sudo 없이 DOCKER 사용하기</li>\n</ul>\n<p><code class=\"language-text\">docker`는 기본적으로</code>root<code class=\"language-text\"></code>권한이 필요합니다.<br>\nroot가 아닌 사용자가 sudo없이 사용하려면 해당 사용자를 docker그룹에 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">sudo usermod <span class=\"token operator\">-</span>aG docker $USER # 현재 접속중인 사용자에게 권한주기\nsudo usermod <span class=\"token operator\">-</span>aG docker your<span class=\"token operator\">-</span>user # your<span class=\"token operator\">-</span>user 사용자에게 권한주기</code></pre></div>\n<p>사용자가 로그인 중이라면 다시 로그인 후 권한이 적용됩니다.</p>\n<br/>\n<ul>\n<li>DOCKER VERSION 확인\ndocker 설치 완료 후 설정이 끝났으면 version을 확인해본다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker <span class=\"token class-name\">version</span>\nClient<span class=\"token punctuation\">:</span> Docker Engine <span class=\"token operator\">-</span> <span class=\"token class-name\">Community</span>\nVersion<span class=\"token punctuation\">:</span>           <span class=\"token number\">19.03</span><span class=\"token number\">.12</span>\n<span class=\"token class-name\">API</span> version<span class=\"token punctuation\">:</span>       <span class=\"token number\">1.40</span>\n<span class=\"token class-name\">Go</span> version<span class=\"token punctuation\">:</span>        go1<span class=\"token punctuation\">.</span><span class=\"token number\">13.10</span>\n<span class=\"token class-name\">Git</span> commit<span class=\"token punctuation\">:</span>        48a66213fe\nBuilt<span class=\"token punctuation\">:</span>             Mon Jun <span class=\"token number\">22</span> <span class=\"token number\">15</span><span class=\"token punctuation\">:</span><span class=\"token number\">45</span><span class=\"token punctuation\">:</span><span class=\"token number\">36</span> <span class=\"token number\">2020</span>\nOS<span class=\"token operator\">/</span>Arch<span class=\"token punctuation\">:</span>           linux<span class=\"token operator\">/</span><span class=\"token class-name\">amd64</span>\nExperimental<span class=\"token punctuation\">:</span>      <span class=\"token class-name\">false</span>\n\nServer<span class=\"token punctuation\">:</span> Docker Engine <span class=\"token operator\">-</span> <span class=\"token class-name\">Community</span>\nEngine<span class=\"token punctuation\">:</span>\nVersion<span class=\"token punctuation\">:</span>          <span class=\"token number\">19.03</span><span class=\"token number\">.12</span>\n<span class=\"token class-name\">API</span> version<span class=\"token punctuation\">:</span>      <span class=\"token number\">1.40</span> <span class=\"token punctuation\">(</span>minimum version <span class=\"token number\">1.12</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Go</span> version<span class=\"token punctuation\">:</span>       go1<span class=\"token punctuation\">.</span><span class=\"token number\">13.10</span>\n<span class=\"token class-name\">Git</span> commit<span class=\"token punctuation\">:</span>       48a66213fe\nBuilt<span class=\"token punctuation\">:</span>            Mon Jun <span class=\"token number\">22</span> <span class=\"token number\">15</span><span class=\"token punctuation\">:</span><span class=\"token number\">44</span><span class=\"token punctuation\">:</span><span class=\"token number\">07</span> <span class=\"token number\">2020</span>\nOS<span class=\"token operator\">/</span>Arch<span class=\"token punctuation\">:</span>          linux<span class=\"token operator\">/</span><span class=\"token class-name\">amd64</span>\nExperimental<span class=\"token punctuation\">:</span>     <span class=\"token class-name\">false</span>\ncontainerd<span class=\"token punctuation\">:</span>\nVersion<span class=\"token punctuation\">:</span>          <span class=\"token number\">1.2</span><span class=\"token number\">.13</span>\nGitCommit<span class=\"token punctuation\">:</span>        7ad184331fa3e55e52b890ea95e65ba581ae3429\nrunc<span class=\"token punctuation\">:</span>\nVersion<span class=\"token punctuation\">:</span>          <span class=\"token number\">1.0</span><span class=\"token number\">.0</span><span class=\"token operator\">-</span><span class=\"token class-name\">rc10</span>\nGitCommit<span class=\"token punctuation\">:</span>        dc9208a3303feef5b3839f4323d9beb36df0a9dd\ndocker<span class=\"token operator\">-</span>init<span class=\"token punctuation\">:</span>\nVersion<span class=\"token punctuation\">:</span>          <span class=\"token number\">0.18</span><span class=\"token number\">.0</span>\nGitCommit<span class=\"token punctuation\">:</span>        fec3683</code></pre></div>\n<p><code class=\"language-text\">Client</code>와 <code class=\"language-text\">Server</code>정보가 정상적으로 출력되었다면 설치가 완료된 것 입니다.</p>\n<p>Server 정보가 정상적으로 나오지 않고<br>\n<code class=\"language-text\">Error response from daemon: Bad response from Docker engine</code> 메시지가 출력되는 경우는<br>\n보통 docker daemon이 정상적으로 실행되지 않았거나 sudo를 입력하지 않은 경우입니다.</p>\n<ul>\n<li>간단한 컨테이너 구동 테스트<br>\n어떤 언어를 배우더라도 가장 처음해보는 실습은 HELLO WORLD 메세지 출력일 것이다.<br>\n이번 포스트에서도 설치 기념으로 <code class=\"language-text\">Hello World</code> 컨테이너를 실행해본다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">student@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker run hello<span class=\"token operator\">-</span>world\nUnable to find image 'hello<span class=\"token operator\">-</span>world<span class=\"token punctuation\">:</span>latest' <span class=\"token class-name\">locally</span>\nlatest<span class=\"token punctuation\">:</span> Pulling <span class=\"token keyword\">from</span> library<span class=\"token operator\">/</span>hello<span class=\"token operator\">-</span>world\n0e03bdcc26d7<span class=\"token punctuation\">:</span> Pull <span class=\"token class-name\">complete</span> \nDigest<span class=\"token punctuation\">:</span> sha256<span class=\"token punctuation\">:</span>7f0a9f93b4aa3022c3a4c147a449bf11e0941a1fd0bf4a8e6c9408b2600777c5\nStatus<span class=\"token punctuation\">:</span> Downloaded newer image <span class=\"token keyword\">for</span> hello<span class=\"token operator\">-</span>world<span class=\"token punctuation\">:</span>latest\n\nHello <span class=\"token keyword\">from</span> Docker<span class=\"token operator\">!</span>\nThis message shows that your installation appears to be working correctly<span class=\"token punctuation\">.</span>\n\nTo generate <span class=\"token keyword\">this</span> message<span class=\"token punctuation\">,</span> Docker took the <span class=\"token class-name\">following</span> steps<span class=\"token punctuation\">:</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">.</span> The Docker client contacted the Docker daemon<span class=\"token punctuation\">.</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span> The Docker daemon pulled the <span class=\"token string\">\"hello-world\"</span> image <span class=\"token keyword\">from</span> the Docker Hub<span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">(</span>amd64<span class=\"token punctuation\">)</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span> The Docker daemon created a <span class=\"token keyword\">new</span> container <span class=\"token keyword\">from</span> that image which runs the\n    executable that produces the output you are currently reading<span class=\"token punctuation\">.</span>\n<span class=\"token number\">4</span><span class=\"token punctuation\">.</span> The Docker daemon streamed that output to the <span class=\"token class-name\">Docker</span> client<span class=\"token punctuation\">,</span> which sent it\n    to your terminal<span class=\"token punctuation\">.</span>\n\nTo <span class=\"token keyword\">try</span> something <span class=\"token class-name\">more</span> ambitious<span class=\"token punctuation\">,</span> you can run an Ubuntu <span class=\"token class-name\">container</span> with<span class=\"token punctuation\">:</span>\n$ docker run <span class=\"token operator\">-</span>it ubuntu bash\n\n<span class=\"token class-name\">Share</span> images<span class=\"token punctuation\">,</span> <span class=\"token class-name\">automate</span> workflows<span class=\"token punctuation\">,</span> <span class=\"token keyword\">and</span> more with a free <span class=\"token class-name\">Docker</span> ID<span class=\"token punctuation\">:</span>\nhttps<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>hub<span class=\"token punctuation\">.</span>docker<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>\n\nFor more examples <span class=\"token keyword\">and</span> ideas<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">visit</span><span class=\"token punctuation\">:</span>\nhttps<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>docs<span class=\"token punctuation\">.</span>docker<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span><span class=\"token keyword\">get</span><span class=\"token operator\">-</span>started<span class=\"token operator\">/</span></code></pre></div>\n</li>\n<li>\n<p>주의사항</p>\n<p>도커가 지원되는 kernel 버전은 <code class=\"language-text\">3.10.x</code> 이상입니다.<br>\nubuntu 14.04 이상을 사용하면 큰 문제가 없고 kernel의 버전이 낮을 경우 제대로 동작을 안하거나 문제가 생길 수 있습니다.<br>\n가급적 최신버전으로 업데이트 해주세요. ubuntu나 centos가 아닌 경우는 다른 방법이 필요합니다.<br>\n다른 OS를 기반으로 DOCKER를 설치하기 위해선 아래 메뉴얼을 확인해보세요.<br>\n<a href=\"https://docs.docker.com/engine/install/\">https://docs.docker.com/engine/install/</a></p>\n</li>\n</ul>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-%EB%8F%84%EC%BB%A4-%EC%84%A4%EC%B9%98\">✔ 도커 설치</a></li>\n</ul>\n</div>","frontmatter":{"date":"June 26, 2021","title":"[DOCKER] - Install","categories":"DevOps","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/docker-install/"}},"prev":{"id":"17ac3a0c-cbd6-554f-a341-f5738ed79af3","html":"<p>머리말  </p>\n<p>이전 포스트에서는 도커의 이론적이 내용에 대해서 간단하게 정리한 포스팅을 했었습니다.<br>\n이번 포스트에서는 이미지를 이용해서 실제 도커의 컨테이너 생성 관리 방법과 그와 관련된 명령어들을 포스트 했습니다.</p>\n<hr>\n<h2 id=\"-도커-컨테이너\" style=\"position:relative;\"><a href=\"#-%EB%8F%84%EC%BB%A4-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88\" aria-label=\" 도커 컨테이너 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔ 도커 컨테이너</h2>\n<p>드디어 컨테이너를 실행해 보려고 합니다.<br>\n컨테이너의 위대함을 보기위해 여러개의 프로그램을 마구잡이로 띄워보겠습니다.</p>\n<ul>\n<li>\n<p>컨테이너를 실행하는 명령어는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">docker run <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> IMAGE<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>TAG<span class=\"token operator\">|</span>@DIGEST<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">COMMAND</span></span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>ARG<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p>다음은 자주 사용하는 옵션들입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token punctuation\">[</span>옵션<span class=\"token punctuation\">]</span>\t<span class=\"token punctuation\">[</span>설명<span class=\"token punctuation\">]</span>\n<span class=\"token operator\">-</span>d\t    detached mode 흔히 말하는 백그라운드 모드\n<span class=\"token operator\">-</span>p\t    호스트와 컨테이너의 포트를 연결 <span class=\"token punctuation\">(</span>포워딩<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span>v\t    호스트와 컨테이너의 디렉토리를 연결 <span class=\"token punctuation\">(</span>마운트<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span>e\t    컨테이너 내에서 사용할 환경변수 설정\n–name\t컨테이너 이름 설정\n–rm\t    프로세스 종료시 컨테이너 자동 제거\n<span class=\"token operator\">-</span>it\t    <span class=\"token operator\">-</span>i와 <span class=\"token operator\">-</span>t를 동시에 사용한 것으로 터미널 입력을 위한 옵션\n–link\t컨테이너 연결 <span class=\"token punctuation\">[</span>컨테이너명<span class=\"token punctuation\">:</span>별칭<span class=\"token punctuation\">]</span></code></pre></div>\n<br/>\n</li>\n<li>\n<p>Ubuntu OS 기반의 컨테이너를 생성해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ docker <span class=\"token class-name\">run</span> ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">16.04</span>\nUnable to find image 'ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">16.04</span>' locally\n<span class=\"token number\">16.04</span><span class=\"token punctuation\">:</span> Pulling <span class=\"token keyword\">from</span> library<span class=\"token operator\">/</span>ubuntu\n7b378fa0f908<span class=\"token punctuation\">:</span> Pull complete \n4d77b1b29f2e<span class=\"token punctuation\">:</span> Pull complete \n7c793be88bae<span class=\"token punctuation\">:</span> Pull <span class=\"token class-name\">complete</span> \necc05c8a19c0<span class=\"token punctuation\">:</span> Pull <span class=\"token class-name\">complete</span> \nDigest<span class=\"token punctuation\">:</span> sha256<span class=\"token punctuation\">:</span>0eb024b1147ab61246cfdbdf05c128550ede262790b25a8a6fd93dd3385ab1c8\nStatus<span class=\"token punctuation\">:</span> Downloaded newer image <span class=\"token keyword\">for</span> ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">16.04</span></code></pre></div>\n<p><code class=\"language-text\">run</code>명령어를 사용하면 사용할 이미지가 저장되어 있는지 확인하고 없다면<br>\n다운로드<code class=\"language-text\">(pull)</code>를 한 후 컨테이너를 <code class=\"language-text\">생성(create)</code>하고 <code class=\"language-text\">시작(start)</code> 합니다.</p>\n<p>위 예제는 <code class=\"language-text\">ubuntu:16.04</code> 이미지를 다운받은 적이 없기 때문에 이미지를 다운로드 한 후 컨테이너가 실행되었습니다.<br>\n컨테이너는 정상적으로 실행됐지만 실행에 대한 명령어를 전달하지 않았기 때문에 컨테이너는 생성되자마자 종료됩니다.<br>\n컨테이너는 프로세스이기 때문에 실행중인 프로세스가 없으면 컨테이너는 종료됩니다.</p>\n<br/>\n</li>\n<li>\n<p>이번에는 BASH 쉘 실행 명령을 넣어 생성해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ \nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ docker run <span class=\"token operator\">--</span>rm <span class=\"token operator\">-</span><span class=\"token class-name\">it</span> ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">16.04</span> <span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>bash\nroot@ddc99f1734ab<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span># \nroot@ddc99f1734ab<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span># cat <span class=\"token operator\">/</span>etc<span class=\"token comment\">/*-release | grep -i version\nVERSION=\"16.04.6 LTS (Xenial Xerus)\"\nVERSION_ID=\"16.04\"\nVERSION_CODENAME=xenial\nroot@ddc99f1734ab:/# \nroot@ddc99f1734ab:/# exit\nexit</span></code></pre></div>\n<p>컨테이너 내부에 들어가기 위해 <code class=\"language-text\">bash 쉘</code>을 실행하고 키보드 입력을 위해 <code class=\"language-text\">-it 옵션</code>을 줍니다.<br>\n추가적으로 프로세스가 종료되면 컨테이너가 자동으로 삭제되도록 <code class=\"language-text\">--rm</code> 옵션도 추가하였습니다.</p>\n<p>바로 전 이미지를 다운 받았기 때문에 다운로드 없이 바로 실행되었습니다.<br>\ncat /etc/*-release 명령어를 실행해보면 ubuntu 리눅스인걸 알 수 있습니다.  </p>\n<hr>\n</li>\n<li>\n<h3 id=\"redis-container\" style=\"position:relative;\"><a href=\"#redis-container\" aria-label=\"redis container permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redis container</h3>\n<p>2번째로 redis를 사용해 컨테이너를 생성해보겠습니다. redis는 메모리기반의 다양한 기능을 가진 스토리지입니다.<br>\n6379 포트로 통신하며 telnet 명령어로 테스트해 볼 수 있습니다.<br>\nredis 컨테이너는 백그라운드 모드로 실행하기 위해 <code class=\"language-text\">-d 옵션</code>을 추가하고 <code class=\"language-text\">-p 옵션</code>을 추가하여<br>\n컨테이너의 포트를 호스트의 포트로 연결해보겠습니다.</p>\n<p><code class=\"language-text\">-d 옵션</code>이 없다면 프로세스가 <code class=\"language-text\">foreground</code>로 실행되어 아무키도 입력할 수 없게 됩니다.<br>\n컨테이너를 종료하려면 ctrl + c를 입력해 주세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ docker run <span class=\"token operator\">-</span>d <span class=\"token operator\">-</span>p <span class=\"token number\">1234</span><span class=\"token punctuation\">:</span><span class=\"token number\">6379</span> redis\nUnable to find image 'redis<span class=\"token punctuation\">:</span>latest' <span class=\"token class-name\">locally</span>\nlatest<span class=\"token punctuation\">:</span> Pulling <span class=\"token keyword\">from</span> library<span class=\"token operator\">/</span><span class=\"token class-name\">redis</span>\nbf5952930446<span class=\"token punctuation\">:</span> Pull complete \n911b8422b695<span class=\"token punctuation\">:</span> Pull complete \n093b947e0ade<span class=\"token punctuation\">:</span> Pull complete \n5b1d5f59e382<span class=\"token punctuation\">:</span> Pull complete \n7a5f59580c0b<span class=\"token punctuation\">:</span> Pull <span class=\"token class-name\">complete</span> \nf9c63997c980<span class=\"token punctuation\">:</span> Pull <span class=\"token class-name\">complete</span> \nDigest<span class=\"token punctuation\">:</span> sha256<span class=\"token punctuation\">:</span>09c33840ec47815dc0351f1eca3befe741d7105b3e95bc8fdb9a7e4985b9e1e5\nStatus<span class=\"token punctuation\">:</span> Downloaded newer image <span class=\"token keyword\">for</span> redis<span class=\"token punctuation\">:</span>latest\ne0a912150d3eb6cdaeda5a643c3969775adf2d2d2e64862e9053dc99d936a1b4\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ \nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ telnet localhost <span class=\"token number\">1234</span>\nTrying <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\nConnected to localhost<span class=\"token punctuation\">.</span>\nEscape character <span class=\"token keyword\">is</span> '<span class=\"token operator\">^</span><span class=\"token punctuation\">]</span>'<span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">set</span> mykey nasa\n<span class=\"token operator\">+</span>OK\n<span class=\"token keyword\">get</span> mykey\n$<span class=\"token number\">4</span>\nnasa\nquit\n<span class=\"token operator\">+</span>OK\nConnection closed <span class=\"token keyword\">by</span> foreign host<span class=\"token punctuation\">.</span></code></pre></div>\n<p><code class=\"language-text\">-d 옵션</code>을 주었기 때문에 컨테이너를 실행하자마자 컨테이너의 ID(e0a9121…)를 보여주고 바로 쉘로 돌아왔습니다.<br>\n컨테이너는 종료된 것이 아니라 백그라운드 모드로 동작하고 있고 컨테이너 ID를 이용하여 컨테이너를 제어할 수 있습니다.<br>\n<code class=\"language-text\">-p 옵션</code>을 이용하여 호스트의 1234포트를 컨테이너의 6379포트로 연결하였고 localhost의 1234포트로 접속하면 하면 redis를 사용할 수 있습니다.</p>\n</li>\n<li>테스트 결과<br>\nredis에 접속하여 새로운 키를 저장하고 불러오는데 성공했습니다. 실행이 간단한건 물론이고 호스트의 포트만 다르게 하면<br>\n하나의 서버에 여러개의 redis 서버를 띄우는 것도 매우 간단합니다.</li>\n</ul>\n<br/>\n<hr>\n<ul>\n<li>\n<h3 id=\"mysql-57-container\" style=\"position:relative;\"><a href=\"#mysql-57-container\" aria-label=\"mysql 57 container permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MySQL 5.7 container</h3>\n<p>이번에 실행할 컨테이너는 MySQL 서버입니다.<br>\n흔히 사용되는 데이터베이스인데 이번에는 <code class=\"language-text\">-e 옵션</code>을 이용하여 환경변수를 설정하고 <code class=\"language-text\">--name 옵션</code>을 이용해<br>\n컨테이너에 읽기 어려운 ID 대신 쉬운 이름을 부여할 예정입니다.</p>\n<p><code class=\"language-text\">--name옵션</code>을 생략하면 도커가 자동으로 이름을 지어 줍니다.<br>\n이름은 유명한 과학자나 해커의 이름과 수식어를 조합하여 랜덤으로 생성합니다.<br>\n(ex - boring_wozniak) 우리나라 과학자 장영실도 등록되어 있습니다.</p>\n<p>MySQL Docker hub 페이지에 접속하면 간단한 사용법과 환경변수에 대한 설명이 있습니다.<br>\n여러가지 설정값이 있는데 패스워드 없이 root계정을 만들기 위해 <code class=\"language-text\">MYSQL_ALLOW_EMPTY_PASSWORD</code> 환경변수를 설정합니다.<br>\n그리고 컨테이너의 이름은 nasa-mysql로 할당하고 백그라운드 모드로 띄우기 위해 <code class=\"language-text\">-d 옵션</code>을 줍니다.<br>\n포트는 <code class=\"language-text\">3306포트</code>를 호스트에서 그대로 사용하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ docker run <span class=\"token operator\">-</span>d <span class=\"token operator\">-</span>p <span class=\"token number\">3306</span><span class=\"token punctuation\">:</span><span class=\"token number\">3306</span> \\\n<span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token class-name\">e</span> MYSQL_ALLOW_EMPTY_PASSWORD<span class=\"token operator\">=</span><span class=\"token boolean\">true</span> \\\n<span class=\"token operator\">></span> <span class=\"token operator\">--</span>name nasa<span class=\"token operator\">-</span>mysql \\\n<span class=\"token operator\">></span> mysql<span class=\"token punctuation\">:</span><span class=\"token number\">5.7</span>\nUnable to find image 'mysql<span class=\"token punctuation\">:</span><span class=\"token number\">5.7</span>' locally\n<span class=\"token number\">5.7</span><span class=\"token punctuation\">:</span> Pulling <span class=\"token keyword\">from</span> library<span class=\"token operator\">/</span><span class=\"token class-name\">mysql</span>\nbf5952930446<span class=\"token punctuation\">:</span> Already exists \n8254623a9871<span class=\"token punctuation\">:</span> Pull complete \n938e3e06dac4<span class=\"token punctuation\">:</span> Pull <span class=\"token class-name\">complete</span> \nea28ebf28884<span class=\"token punctuation\">:</span> Pull <span class=\"token class-name\">complete</span> \nf3cef38785c2<span class=\"token punctuation\">:</span> Pull complete \n894f9792565a<span class=\"token punctuation\">:</span> Pull complete \n1d8a57523420<span class=\"token punctuation\">:</span> Pull complete \n5f09bf1d31c1<span class=\"token punctuation\">:</span> Pull complete \n1b6ff254abe7<span class=\"token punctuation\">:</span> Pull complete \n74310a0bf42d<span class=\"token punctuation\">:</span> Pull <span class=\"token class-name\">complete</span> \nd398726627fd<span class=\"token punctuation\">:</span> Pull <span class=\"token class-name\">complete</span> \nDigest<span class=\"token punctuation\">:</span> sha256<span class=\"token punctuation\">:</span><span class=\"token class-name\">da58f943b94721d46e87d5de208dc07302a8b13e638cd1d24285d222376d6d84</span>\nStatus<span class=\"token punctuation\">:</span> Downloaded newer image <span class=\"token keyword\">for</span> mysql<span class=\"token punctuation\">:</span><span class=\"token number\">5.7</span>\n64e17595fca839d513c7c5bab4d6c624cc5fa729dec66881ca66aa61e2bee571\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ \nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ mysql <span class=\"token operator\">-</span>h <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span> <span class=\"token operator\">-</span>uroot\nWelcome to the MySQL monitor<span class=\"token punctuation\">.</span>  Commands <span class=\"token class-name\">end</span> with <span class=\"token punctuation\">;</span> <span class=\"token keyword\">or</span> \\g<span class=\"token punctuation\">.</span>\nYour MySQL connection id <span class=\"token keyword\">is</span> <span class=\"token number\">2</span>\n<span class=\"token class-name\">Server</span> version<span class=\"token punctuation\">:</span> <span class=\"token number\">5.7</span><span class=\"token number\">.31</span> MySQL <span class=\"token return-type class-name\">Community</span> Server <span class=\"token punctuation\">(</span>GPL<span class=\"token punctuation\">)</span>\n\nCopyright <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> Oracle <span class=\"token keyword\">and</span><span class=\"token operator\">/</span><span class=\"token keyword\">or</span> its affiliates<span class=\"token punctuation\">.</span> All rights reserved<span class=\"token punctuation\">.</span>\n\nOracle <span class=\"token keyword\">is</span> <span class=\"token class-name\">a</span> registered trademark of Oracle Corporation <span class=\"token keyword\">and</span><span class=\"token operator\">/</span><span class=\"token keyword\">or</span> its\naffiliates<span class=\"token punctuation\">.</span> Other names may be trademarks of their respective\nowners<span class=\"token punctuation\">.</span>\n\nType 'help<span class=\"token punctuation\">;</span>' <span class=\"token keyword\">or</span> <span class=\"token string character\">'\\h'</span> <span class=\"token keyword\">for</span> help<span class=\"token punctuation\">.</span> Type <span class=\"token string character\">'\\c'</span> to clear the current input statement<span class=\"token punctuation\">.</span>\n\nmysql<span class=\"token operator\">></span> <span class=\"token class-name\">show</span> databases<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span> Database           <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span> information_schema <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> mysql              <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> performance_schema <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> sys                <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token number\">4</span> rows <span class=\"token keyword\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span>\n\nmysql<span class=\"token operator\">></span></code></pre></div>\n<br/>\n</li>\n<li>\n<p>CPU, MEMORY 제한  </p>\n<p>이번에는 컨테이너를 생성할때 <code class=\"language-text\">메모리와 CPU 사용률</code>을 제한 하는 것입니다.<br>\nDOCKER는 호스트의 자원을 사용하기 때문에 여러대의 컨테이너를 생성하기 위해선 필수 적인 옵션입니다.  </p>\n<br/>\n</li>\n<li>\n<p>CPU 제한 CENTOS  생성</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ docker run <span class=\"token operator\">-</span>it <span class=\"token operator\">--</span>name nasa<span class=\"token operator\">-</span>cpu <span class=\"token operator\">--</span>cpus <span class=\"token number\">0.3</span> centos<span class=\"token punctuation\">:</span>latest\n<span class=\"token punctuation\">[</span>root@0c9cc5567f06 <span class=\"token operator\">/</span><span class=\"token punctuation\">]</span># dd <span class=\"token keyword\">if</span><span class=\"token operator\">=</span><span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span><span class=\"token class-name\">zero</span> of<span class=\"token operator\">=</span><span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span><span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;</span>\n\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\nnasa1515@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker stats\nCONTAINER ID        NAME                CPU <span class=\"token operator\">%</span>               MEM USAGE <span class=\"token operator\">/</span> LIMIT     MEM <span class=\"token operator\">%</span>               NET I<span class=\"token operator\">/</span>O             BLOCK I<span class=\"token operator\">/</span>O           PIDS\n0c9cc5567f06        nasa<span class=\"token operator\">-</span>cpu            <span class=\"token number\">29.93</span><span class=\"token operator\">%</span>              <span class=\"token number\">3</span><span class=\"token punctuation\">.</span>555MiB <span class=\"token operator\">/</span> <span class=\"token number\">9</span><span class=\"token punctuation\">.</span>709GiB   <span class=\"token number\">0.04</span><span class=\"token operator\">%</span>               <span class=\"token number\">4</span><span class=\"token punctuation\">.</span>72kB <span class=\"token operator\">/</span> 0B         0B <span class=\"token operator\">/</span> 0B             <span class=\"token number\">2</span>\nfa06266704bc        nasa<span class=\"token operator\">-</span>centos         <span class=\"token number\">0.00</span><span class=\"token operator\">%</span>               <span class=\"token number\">3</span><span class=\"token punctuation\">.</span>066MiB <span class=\"token operator\">/</span> <span class=\"token number\">9</span><span class=\"token punctuation\">.</span>709GiB   <span class=\"token number\">0.03</span><span class=\"token operator\">%</span>               <span class=\"token number\">13</span><span class=\"token punctuation\">.</span>3kB <span class=\"token operator\">/</span> 0B         0B <span class=\"token operator\">/</span> 0B             <span class=\"token number\">1</span>\ne0a912150d3e        jovial_wing         <span class=\"token number\">0.13</span><span class=\"token operator\">%</span>               <span class=\"token number\">4</span><span class=\"token punctuation\">.</span>059MiB <span class=\"token operator\">/</span> <span class=\"token number\">9</span><span class=\"token punctuation\">.</span>709GiB   <span class=\"token number\">0.04</span><span class=\"token operator\">%</span>               <span class=\"token number\">36</span><span class=\"token punctuation\">.</span>6kB <span class=\"token operator\">/</span> 772B       0B <span class=\"token operator\">/</span> 0B             <span class=\"token number\">5</span></code></pre></div>\n<p>생성한 <code class=\"language-text\">nasa-cpu</code> 컨테이너에 dd 명령으로 부하를 발생시키고 확인해보았다.<br>\n설정한 <code class=\"language-text\">0.3 (30%)</code> 값 이상으로 cpu를 사용하고 있지 않음을 확인.</p>\n<br/>\n</li>\n<li>\n<p>MEMORY 제한 CENTOS  생성</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ docker run <span class=\"token operator\">-</span>itd <span class=\"token operator\">--</span>name nasa<span class=\"token operator\">-</span>memory <span class=\"token operator\">--</span>memory <span class=\"token number\">1024m</span> centos<span class=\"token punctuation\">:</span><span class=\"token class-name\">latest</span>\nWARNING<span class=\"token punctuation\">:</span> Your kernel does <span class=\"token keyword\">not</span> support swap limit capabilities <span class=\"token keyword\">or</span> the cgroup <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token class-name\">mounted<span class=\"token punctuation\">.</span> Memory</span> limited without swap<span class=\"token punctuation\">.</span>\nd387c47fa6b81d23871656d52448c465ad51abae02e2115f865890321ae2b82c\n\nnasa1515@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker stats <span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>stream\nCONTAINER ID        NAME                CPU <span class=\"token operator\">%</span>               MEM USAGE <span class=\"token operator\">/</span> LIMIT     MEM <span class=\"token operator\">%</span>               NET I<span class=\"token operator\">/</span>O             BLOCK I<span class=\"token operator\">/</span>O           PIDS\nd387c47fa6b8        nasa<span class=\"token operator\">-</span>memory         <span class=\"token number\">0.00</span><span class=\"token operator\">%</span>               <span class=\"token number\">3</span><span class=\"token punctuation\">.</span>164MiB <span class=\"token operator\">/</span> 1GiB       <span class=\"token number\">0.31</span><span class=\"token operator\">%</span>               <span class=\"token number\">4</span><span class=\"token punctuation\">.</span>44kB <span class=\"token operator\">/</span> 0B         0B <span class=\"token operator\">/</span> 0B             <span class=\"token number\">1</span>\nfa06266704bc        nasa<span class=\"token operator\">-</span>centos         <span class=\"token number\">0.00</span><span class=\"token operator\">%</span>               <span class=\"token number\">3</span><span class=\"token punctuation\">.</span>066MiB <span class=\"token operator\">/</span> <span class=\"token number\">9</span><span class=\"token punctuation\">.</span>709GiB   <span class=\"token number\">0.03</span><span class=\"token operator\">%</span>               <span class=\"token number\">16</span><span class=\"token punctuation\">.</span>8kB <span class=\"token operator\">/</span> 0B         0B <span class=\"token operator\">/</span> 0B             <span class=\"token number\">1</span>\ne0a912150d3e        jovial_wing         <span class=\"token number\">0.15</span><span class=\"token operator\">%</span>               <span class=\"token number\">4</span><span class=\"token punctuation\">.</span>059MiB <span class=\"token operator\">/</span> <span class=\"token number\">9</span><span class=\"token punctuation\">.</span>709GiB   <span class=\"token number\">0.04</span><span class=\"token operator\">%</span>               <span class=\"token number\">40</span><span class=\"token punctuation\">.</span>2kB <span class=\"token operator\">/</span> 772B       0B <span class=\"token operator\">/</span> 0B             <span class=\"token number\">5</span></code></pre></div>\n<p>nasa-momory 컨테이너를 <code class=\"language-text\">1024(1G)</code>의 메모리만 부여한 뒤 생생해보았다.<br>\n<code class=\"language-text\">docker stats --no-stream</code> 명령어를 통해 확인한 결과<br>\n적용한 메모리만큼만 부여되어 컨테이너가 생성됨을 확인하였다.</p>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">update</code> 명령어로 컨테이너 제한 업데이트<br>\nupdate 명령어를 이용하면 이미 실행중인 컨테이너의 설정을 변경 할 수 있다.<br>\n위에 생성한 nasa-memory 컨테이너의 메모리를 <code class=\"language-text\">2G</code>로 변경해보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker update <span class=\"token operator\">--</span>memory <span class=\"token number\">2048m</span> nasa<span class=\"token operator\">-</span>memory\nnasa<span class=\"token operator\">-</span>memory\nYour kernel does <span class=\"token keyword\">not</span> support swap limit capabilities <span class=\"token keyword\">or</span> the cgroup <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token class-name\">mounted<span class=\"token punctuation\">.</span> Memory</span> limited without swap<span class=\"token punctuation\">.</span>\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ \nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">~</span>$ docker stats <span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>stream\nCONTAINER ID        NAME                CPU <span class=\"token operator\">%</span>               MEM USAGE <span class=\"token operator\">/</span> LIMIT     MEM <span class=\"token operator\">%</span>               NET I<span class=\"token operator\">/</span>O             BLOCK I<span class=\"token operator\">/</span>O           PIDS\nd387c47fa6b8        nasa<span class=\"token operator\">-</span>memory         <span class=\"token number\">0.00</span><span class=\"token operator\">%</span>               <span class=\"token number\">3</span><span class=\"token punctuation\">.</span>164MiB <span class=\"token operator\">/</span> 2GiB       <span class=\"token number\">0.15</span><span class=\"token operator\">%</span>               <span class=\"token number\">8</span><span class=\"token punctuation\">.</span>96kB <span class=\"token operator\">/</span> 0B         0B <span class=\"token operator\">/</span> 0B             <span class=\"token number\">1</span>\nfa06266704bc        nasa<span class=\"token operator\">-</span>centos         <span class=\"token number\">0.00</span><span class=\"token operator\">%</span>               <span class=\"token number\">3</span><span class=\"token punctuation\">.</span>066MiB <span class=\"token operator\">/</span> <span class=\"token number\">9</span><span class=\"token punctuation\">.</span>709GiB   <span class=\"token number\">0.03</span><span class=\"token operator\">%</span>               <span class=\"token number\">20</span><span class=\"token punctuation\">.</span>5kB <span class=\"token operator\">/</span> 0B         0B <span class=\"token operator\">/</span> 0B             <span class=\"token number\">1</span>\ne0a912150d3e        jovial_wing         <span class=\"token number\">0.13</span><span class=\"token operator\">%</span>               <span class=\"token number\">4</span><span class=\"token punctuation\">.</span>285MiB <span class=\"token operator\">/</span> <span class=\"token number\">9</span><span class=\"token punctuation\">.</span>709GiB   <span class=\"token number\">0.04</span><span class=\"token operator\">%</span>               <span class=\"token number\">43</span><span class=\"token punctuation\">.</span>6kB <span class=\"token operator\">/</span> 772B       0B <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">.</span>1kB          <span class=\"token number\">5</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"-도커-기본-명령어\" style=\"position:relative;\"><a href=\"#-%EB%8F%84%EC%BB%A4-%EA%B8%B0%EB%B3%B8-%EB%AA%85%EB%A0%B9%EC%96%B4\" aria-label=\" 도커 기본 명령어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✌ 도커 기본 명령어</h2>\n<p>앞에서 도커의 run 명령어를 이용하여 여러개의 컨테이너를 실행했습니다.<br>\n이제 컨테이너의 상태를 살펴보고 어떤 이미지가 설치되어 있는지 확인하는 명령어를 알아봅니다.</p>\n<ul>\n<li>\n<p>컨테이너 목록 확인하기 <code class=\"language-text\">(ps)</code><br>\n컨테이너 목록을 확인하는 명령어는 다음과 같습니다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">$ docker ps <span class=\"token operator\">--</span><span class=\"token class-name\">help</span>\n\nUsage<span class=\"token punctuation\">:</span> docker ps <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES\n64e17595fca8        mysql<span class=\"token punctuation\">:</span><span class=\"token number\">5.7</span>           <span class=\"token string\">\"docker-entrypoint.s…\"</span>   <span class=\"token number\">7</span> minutes ago       Up <span class=\"token number\">7</span> minutes        <span class=\"token number\">0.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token punctuation\">:</span><span class=\"token number\">3306</span><span class=\"token operator\">-></span><span class=\"token number\">3306</span><span class=\"token operator\">/</span>tcp<span class=\"token punctuation\">,</span> <span class=\"token number\">33060</span><span class=\"token operator\">/</span>tcp   nasa<span class=\"token operator\">-</span>mysql\ne0a912150d3e        redis               <span class=\"token string\">\"docker-entrypoint.s…\"</span>   <span class=\"token number\">18</span> minutes ago      Up <span class=\"token number\">18</span> minutes       <span class=\"token number\">0.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token punctuation\">:</span><span class=\"token number\">1234</span><span class=\"token operator\">-></span><span class=\"token number\">6379</span><span class=\"token operator\">/</span>tcp              jovial_wing\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ </code></pre></div>\n<p>출력된 필드에 대한 설명은 다음과 같습니다. </p>\n<ul>\n<li><code class=\"language-text\">CONTAINER ID</code> : 컨테이너의 고유 ID</li>\n<li><code class=\"language-text\">IMAGE</code> : 컨테이너가 사용하는 이미지</li>\n<li><code class=\"language-text\">COMMAND</code> : 컨테이너에서 실행중인 애플리케이션</li>\n<li><code class=\"language-text\">CREATED</code> : 컨테이너가 생성된 날짜</li>\n<li><code class=\"language-text\">STATUS</code> : 컨테이너의 상태</li>\n<li><code class=\"language-text\">PORTS</code>: 컨테이너에서 사용 중인 포트</li>\n<li><code class=\"language-text\">NAMES</code> : 컨테이너의 이름</li>\n</ul>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">-a 옵션</code>을 넣어 실행해보겠습니다</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ docker ps <span class=\"token operator\">-</span>a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS                               NAMES\n64e17595fca8        mysql<span class=\"token punctuation\">:</span><span class=\"token number\">5.7</span>           <span class=\"token string\">\"docker-entrypoint.s…\"</span>   <span class=\"token number\">11</span> minutes ago      Up <span class=\"token number\">11</span> minutes               <span class=\"token number\">0.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token punctuation\">:</span><span class=\"token number\">3306</span><span class=\"token operator\">-></span><span class=\"token number\">3306</span><span class=\"token operator\">/</span>tcp<span class=\"token punctuation\">,</span> <span class=\"token number\">33060</span><span class=\"token operator\">/</span>tcp   nasa<span class=\"token operator\">-</span>mysql\ne0a912150d3e        redis               <span class=\"token string\">\"docker-entrypoint.s…\"</span>   <span class=\"token number\">21</span> minutes ago      Up <span class=\"token number\">21</span> minutes               <span class=\"token number\">0.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token punctuation\">:</span><span class=\"token number\">1234</span><span class=\"token operator\">-></span><span class=\"token number\">6379</span><span class=\"token operator\">/</span>tcp              jovial_wing\n<span class=\"token class-name\">f481493bd3b2</span>        ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">16.04</span>        <span class=\"token string\">\"/bin/bash\"</span>              <span class=\"token number\">46</span> minutes <span class=\"token return-type class-name\">ago</span>      Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">46</span> minutes ago                                       nifty_chatterjee\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ </code></pre></div>\n<p>이전에 실행했다가 종료된 컨테이너(Exited (0))가 추가로 보입니다. 컨테이너는 종료되어도 삭제되지 않고 남아있습니다.<br>\n종료된 건 다시 시작할 수 있고 컨테이너의 읽기/쓰기 레이어는 그대로 존재합니다.<br>\n명시적으로 삭제를 하면 깔끔하게 컨테이너가 제거됩니다.</p>\n<br/>\n</li>\n<li>\n<p>컨테이너 중지하기 <code class=\"language-text\">(stop)</code><br>\n실행중인 컨테이너를 중지하는 명령어는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">docker stop <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> CONTAINER <span class=\"token punctuation\">[</span>CONTAINER<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>옵션은 특별한게 없고 실행중인 컨테이너를 하나 또는 여러개 (띄어쓰기로 구분) 중지할 수 있습니다.</p>\n<p>앞에서 실행한 mysql 컨테이너는 더이상 필요가 없으니 중지해 보겠습니다.<br>\n중지하려면 컨테이너의 ID 또는 이름을 입력하면 됩니다. mysql 컨테이너의 ID를 ps명령을 통해 확인하고 중지해 봅니다.</p>\n<br/>\n</li>\n<li>\n<p>실행 중인 MYSQL 컨테이너 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ docker ps \nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES\n64e17595fca8        mysql<span class=\"token punctuation\">:</span><span class=\"token number\">5.7</span>           <span class=\"token string\">\"docker-entrypoint.s…\"</span>   <span class=\"token number\">15</span> minutes ago      Up <span class=\"token number\">15</span> minutes       <span class=\"token number\">0.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token punctuation\">:</span><span class=\"token number\">3306</span><span class=\"token operator\">-></span><span class=\"token number\">3306</span><span class=\"token operator\">/</span>tcp<span class=\"token punctuation\">,</span> <span class=\"token number\">33060</span><span class=\"token operator\">/</span>tcp   nasa<span class=\"token operator\">-</span>mysql\ne0a912150d3e        redis               <span class=\"token string\">\"docker-entrypoint.s…\"</span>   <span class=\"token number\">25</span> minutes ago      Up <span class=\"token number\">25</span> minutes       <span class=\"token number\">0.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token punctuation\">:</span><span class=\"token number\">1234</span><span class=\"token operator\">-></span><span class=\"token number\">6379</span><span class=\"token operator\">/</span>tcp              jovial_wing</code></pre></div>\n<br/>\n</li>\n<li>\n<p>중지 후 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ docker stop nasa<span class=\"token operator\">-</span>mysql\nnasa<span class=\"token operator\">-</span>mysql\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ \nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\ne0a912150d3e        redis               <span class=\"token string\">\"docker-entrypoint.s…\"</span>   <span class=\"token number\">26</span> minutes ago      Up <span class=\"token number\">26</span> minutes       <span class=\"token number\">0.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token punctuation\">:</span><span class=\"token number\">1234</span><span class=\"token operator\">-></span><span class=\"token number\">6379</span><span class=\"token operator\">/</span>tcp   jovial_wing</code></pre></div>\n<br/>\n</li>\n<li>\n<p>컨테이너 제거하기 <code class=\"language-text\">(rm)</code><br>\n종료된 컨테이너를 완전히 제거하는 명령어는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">docker rm <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> CONTAINER <span class=\"token punctuation\">[</span>CONTAINER<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>종료 명령어도 옵션은 특별한게 없습니다.<br>\n종료된 컨테이너를 하나 또는 여러개 삭제할 수 있습니다.<br>\n종료된 <code class=\"language-text\">ubuntu</code> 컨테이너와 <code class=\"language-text\">mysql</code> 컨테이너를 삭제해보겠습니다.</p>\n<br/>\n</li>\n<li>\n<p><code class=\"language-text\">-a</code> 옵션에서 보이는 것을 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ docker ps <span class=\"token operator\">-</span>a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS                    NAMES\n64e17595fca8        mysql<span class=\"token punctuation\">:</span><span class=\"token number\">5.7</span>           <span class=\"token string\">\"docker-entrypoint.s…\"</span>   <span class=\"token number\">18</span> minutes <span class=\"token return-type class-name\">ago</span>      Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">2</span> minutes ago                             nasa<span class=\"token operator\">-</span>mysql\ne0a912150d3e        redis               <span class=\"token string\">\"docker-entrypoint.s…\"</span>   <span class=\"token number\">28</span> minutes ago      Up <span class=\"token number\">28</span> minutes               <span class=\"token number\">0.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token punctuation\">:</span><span class=\"token number\">1234</span><span class=\"token operator\">-></span><span class=\"token number\">6379</span><span class=\"token operator\">/</span>tcp   jovial_wing\n<span class=\"token class-name\">f481493bd3b2</span>        ubuntu<span class=\"token punctuation\">:</span><span class=\"token number\">16.04</span>        <span class=\"token string\">\"/bin/bash\"</span>              <span class=\"token number\">53</span> minutes <span class=\"token return-type class-name\">ago</span>      Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">53</span> minutes ago                            nifty_chatterjee</code></pre></div>\n<br/>\n</li>\n<li>\n<p>삭제 후 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ docker rm nasa<span class=\"token operator\">-</span>mysql\nnasa<span class=\"token operator\">-</span>mysql\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ docker rm nifty_chatterjee\nnifty_chatterjee\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ \nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ docker ps <span class=\"token operator\">-</span>a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\ne0a912150d3e        redis               <span class=\"token string\">\"docker-entrypoint.s…\"</span>   <span class=\"token number\">29</span> minutes ago      Up <span class=\"token number\">29</span> minutes       <span class=\"token number\">0.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token punctuation\">:</span><span class=\"token number\">1234</span><span class=\"token operator\">-></span><span class=\"token number\">6379</span><span class=\"token operator\">/</span>tcp   jovial_wing\nnasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ </code></pre></div>\n<p>컨테이너가 말끔히 삭제되었습니다.<br>\n호스트 OS는 아무런 흔적도 남아있지 않고 컨테이너만 격리된 상태로 실행되었다가 삭제되었습니다.<br>\n시스템이 꼬일 걱정이 전혀 없습니다.</p>\n<p>중지된 컨테이너를 일일이 삭제 하는 건 귀찮은 일입니다.<br>\n<code class=\"language-text\">docker rm -v $(docker ps -a -q -f status=exited)</code> 명령어를 입력하면<br>\n중지된 컨테이너 ID를 가져와서 한번에 삭제합니다.</p>\n</li>\n</ul>\n<br/>\n<hr>\n<h2 id=\"-컨테이너-관리-명령어\" style=\"position:relative;\"><a href=\"#-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EA%B4%80%EB%A6%AC-%EB%AA%85%EB%A0%B9%EC%96%B4\" aria-label=\" 컨테이너 관리 명령어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👌 컨테이너 관리 명령어</h2>\n<p>위에서 도커에 대한 아주아주아주 기본적인 명령어를 살펴보았습니다.<br>\n사실 저 명령어들과 이번에 살펴볼 log, exec 명령어를 익히면<br>\n도커에서 사용하는 명령어는 거의 다 익혔다고 할 수 있습니다. 다른 명령어는 필요에 따라 하나하나 살펴보면 됩니다.</p>\n<ul>\n<li>\n<p>컨테이너 로그 보기 <code class=\"language-text\">(logs)</code><br>\n컨테이너가 정상적으로 동작하는지 확인하는 좋은 방법은 로그를 확인하는 것 입니다.<br>\n로그를 확인하는 방법은 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">docker logs <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> CONTAINER</code></pre></div>\n<p>기본 옵션과, <code class=\"language-text\">-f</code>, <code class=\"language-text\">--tail</code> 옵션을 살펴봅시다.</p>\n<p>기존에 생성해 놓은 <code class=\"language-text\">redis 컨테이너</code> 로그를 확인해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">docker ps\ndocker logs $<span class=\"token punctuation\">{</span>redis containerid<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>OUTPUT  </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ docker logs e0a912150d3e\n<span class=\"token number\">1</span><span class=\"token punctuation\">:</span>C <span class=\"token number\">17</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">09</span><span class=\"token punctuation\">:</span><span class=\"token number\">58.870</span> # oO0OoO0OoO0Oo Redis <span class=\"token keyword\">is</span> <span class=\"token class-name\">starting</span> oO0OoO0OoO0Oo\n<span class=\"token number\">1</span><span class=\"token punctuation\">:</span>C <span class=\"token number\">17</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">09</span><span class=\"token punctuation\">:</span><span class=\"token number\">58.870</span> # <span class=\"token class-name\">Redis</span> version<span class=\"token operator\">=</span><span class=\"token number\">6.0</span><span class=\"token number\">.6</span><span class=\"token punctuation\">,</span> bits<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> commit<span class=\"token operator\">=</span><span class=\"token number\">00000000</span><span class=\"token punctuation\">,</span> modified<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pid<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> just started\n<span class=\"token number\">1</span><span class=\"token punctuation\">:</span>C <span class=\"token number\">17</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">09</span><span class=\"token punctuation\">:</span><span class=\"token number\">58.870</span> # Warning<span class=\"token punctuation\">:</span> no config <span class=\"token class-name\">file</span> specified<span class=\"token punctuation\">,</span> <span class=\"token keyword\">using</span> the <span class=\"token keyword\">default</span> config<span class=\"token punctuation\">.</span> In order to specify a config file use redis<span class=\"token operator\">-</span>server <span class=\"token operator\">/</span>path<span class=\"token operator\">/</span>to<span class=\"token operator\">/</span>redis<span class=\"token punctuation\">.</span>conf\n<span class=\"token number\">1</span><span class=\"token punctuation\">:</span>M <span class=\"token number\">17</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">09</span><span class=\"token punctuation\">:</span><span class=\"token number\">58.872</span> <span class=\"token operator\">*</span> <span class=\"token class-name\">Running</span> mode<span class=\"token operator\">=</span>standalone<span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token number\">6379</span><span class=\"token punctuation\">.</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">:</span>M <span class=\"token number\">17</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">09</span><span class=\"token punctuation\">:</span><span class=\"token number\">58.872</span> # Server initialized\n<span class=\"token number\">1</span><span class=\"token punctuation\">:</span>M <span class=\"token number\">17</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">09</span><span class=\"token punctuation\">:</span><span class=\"token number\">58.872</span> # WARNING overcommit_memory <span class=\"token keyword\">is</span> <span class=\"token keyword\">set</span> to <span class=\"token number\">0</span><span class=\"token operator\">!</span> Background save may fail under low memory condition<span class=\"token punctuation\">.</span> To fix <span class=\"token keyword\">this</span> issue <span class=\"token keyword\">add</span> 'vm<span class=\"token punctuation\">.</span>overcommit_memory <span class=\"token operator\">=</span> <span class=\"token number\">1</span>' to <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>sysctl<span class=\"token punctuation\">.</span>conf <span class=\"token keyword\">and</span> then reboot <span class=\"token keyword\">or</span> run the command 'sysctl vm<span class=\"token punctuation\">.</span>overcommit_memory<span class=\"token operator\">=</span><span class=\"token number\">1</span>' <span class=\"token keyword\">for</span> <span class=\"token keyword\">this</span> to take effect<span class=\"token punctuation\">.</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">:</span>M <span class=\"token number\">17</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">09</span><span class=\"token punctuation\">:</span><span class=\"token number\">58.872</span> # WARNING you have Transparent <span class=\"token return-type class-name\">Huge</span> Pages <span class=\"token punctuation\">(</span>THP<span class=\"token punctuation\">)</span> <span class=\"token class-name\">support</span> enabled <span class=\"token keyword\">in</span> your kernel<span class=\"token punctuation\">.</span> This will create latency <span class=\"token keyword\">and</span> memory usage issues with Redis<span class=\"token punctuation\">.</span> To fix <span class=\"token keyword\">this</span> issue run the command 'echo never <span class=\"token operator\">></span> <span class=\"token operator\">/</span>sys<span class=\"token operator\">/</span>kernel<span class=\"token operator\">/</span>mm<span class=\"token operator\">/</span>transparent_hugepage<span class=\"token operator\">/</span>enabled' <span class=\"token keyword\">as</span> <span class=\"token class-name\">root</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">add</span> it to your <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>rc<span class=\"token punctuation\">.</span>local <span class=\"token keyword\">in</span> order to retain the setting after a reboot<span class=\"token punctuation\">.</span> Redis must be restarted after THP <span class=\"token keyword\">is</span> <span class=\"token class-name\">disabled</span><span class=\"token punctuation\">.</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">:</span>M <span class=\"token number\">17</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">09</span><span class=\"token punctuation\">:</span><span class=\"token number\">58.873</span> <span class=\"token operator\">*</span> Ready to accept connections</code></pre></div>\n<p>아무 옵션을 주지 않았을 때는 전체 로그를 무식하게 전부 다 출력합니다.<br>\n너무 많으니 <code class=\"language-text\">--tail옵션</code>으로 마지막 3줄만 출력해 보겠습니다.</p>\n</li>\n<li>\n<p>OUTPUT  </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ docker logs <span class=\"token operator\">--</span>tail <span class=\"token number\">3</span> e0a912150d3e\n<span class=\"token number\">1</span><span class=\"token punctuation\">:</span>M <span class=\"token number\">17</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">09</span><span class=\"token punctuation\">:</span><span class=\"token number\">58.872</span> # WARNING overcommit_memory <span class=\"token keyword\">is</span> <span class=\"token keyword\">set</span> to <span class=\"token number\">0</span><span class=\"token operator\">!</span> Background save may fail under low memory condition<span class=\"token punctuation\">.</span> To fix <span class=\"token keyword\">this</span> issue <span class=\"token keyword\">add</span> 'vm<span class=\"token punctuation\">.</span>overcommit_memory <span class=\"token operator\">=</span> <span class=\"token number\">1</span>' to <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>sysctl<span class=\"token punctuation\">.</span>conf <span class=\"token keyword\">and</span> then reboot <span class=\"token keyword\">or</span> run the command 'sysctl vm<span class=\"token punctuation\">.</span>overcommit_memory<span class=\"token operator\">=</span><span class=\"token number\">1</span>' <span class=\"token keyword\">for</span> <span class=\"token keyword\">this</span> to take effect<span class=\"token punctuation\">.</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">:</span>M <span class=\"token number\">17</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">09</span><span class=\"token punctuation\">:</span><span class=\"token number\">58.872</span> # WARNING you have Transparent <span class=\"token return-type class-name\">Huge</span> Pages <span class=\"token punctuation\">(</span>THP<span class=\"token punctuation\">)</span> <span class=\"token class-name\">support</span> enabled <span class=\"token keyword\">in</span> your kernel<span class=\"token punctuation\">.</span> This will create latency <span class=\"token keyword\">and</span> memory usage issues with Redis<span class=\"token punctuation\">.</span> To fix <span class=\"token keyword\">this</span> issue run the command 'echo never <span class=\"token operator\">></span> <span class=\"token operator\">/</span>sys<span class=\"token operator\">/</span>kernel<span class=\"token operator\">/</span>mm<span class=\"token operator\">/</span>transparent_hugepage<span class=\"token operator\">/</span>enabled' <span class=\"token keyword\">as</span> <span class=\"token class-name\">root</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">add</span> it to your <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>rc<span class=\"token punctuation\">.</span>local <span class=\"token keyword\">in</span> order to retain the setting after a reboot<span class=\"token punctuation\">.</span> Redis must be restarted after THP <span class=\"token keyword\">is</span> <span class=\"token class-name\">disabled</span><span class=\"token punctuation\">.</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">:</span>M <span class=\"token number\">17</span> Aug <span class=\"token number\">2020</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">09</span><span class=\"token punctuation\">:</span><span class=\"token number\">58.873</span> <span class=\"token operator\">*</span> Ready to accept connections</code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<ul>\n<li>\n<p>컨테이너 명령어 실행하기 <code class=\"language-text\">(exec)</code><br>\n컨테이너를 관리하다 보면 컨테이너에 접속하거나 파일을 실행하고 싶을 때가 있습니다.<br>\nSSH를 통해 연결하면 되지 않을까? 라고 생각할 수 있지만 SSH는 권장하지 않습니다.<br>\n예전에는 <code class=\"language-text\">nsenter</code>라는 프로그램을 이용하였는데 docker에 <code class=\"language-text\">exec</code>라는 명령어로 흡수되었습니다.</p>\n<p>컨테이너 명령어를 실행하는 방법은 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">docker exec <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> CONTAINER COMMAND <span class=\"token punctuation\">[</span>ARG<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>run 명령어와 유사해 보입니다.<br>\n차이는 run은 새로 컨테이너를 만들어서 실행하고<br>\nexec는 실행중인 컨테이너에 명령어를 내리는 정도입니다.</p>\n<p>가볍게 실행중인 centos 컨테이너에 root 디렉토리 목록을 뽑아보겠습니다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@cccr<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ docker exec  nasa<span class=\"token operator\">-</span>centos ls <span class=\"token operator\">-</span>lart <span class=\"token operator\">/</span>\ntotal <span class=\"token number\">56</span>\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x   <span class=\"token number\">2</span> root root <span class=\"token number\">4096</span> May <span class=\"token number\">11</span>  <span class=\"token number\">2019</span> srv\nlrwxrwxrwx   <span class=\"token number\">1</span> root root    <span class=\"token number\">8</span> May <span class=\"token number\">11</span>  <span class=\"token number\">2019</span> sbin <span class=\"token operator\">-></span> usr<span class=\"token operator\">/</span>sbin\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x   <span class=\"token number\">2</span> root root <span class=\"token number\">4096</span> May <span class=\"token number\">11</span>  <span class=\"token number\">2019</span> opt\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x   <span class=\"token number\">2</span> root root <span class=\"token number\">4096</span> May <span class=\"token number\">11</span>  <span class=\"token number\">2019</span> mnt\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x   <span class=\"token number\">2</span> root root <span class=\"token number\">4096</span> May <span class=\"token number\">11</span>  <span class=\"token number\">2019</span> media\nlrwxrwxrwx   <span class=\"token number\">1</span> root root    <span class=\"token number\">9</span> May <span class=\"token number\">11</span>  <span class=\"token number\">2019</span> lib64 <span class=\"token operator\">-></span> usr<span class=\"token operator\">/</span>lib64\nlrwxrwxrwx   <span class=\"token number\">1</span> root root    <span class=\"token number\">7</span> May <span class=\"token number\">11</span>  <span class=\"token number\">2019</span> lib <span class=\"token operator\">-></span> usr<span class=\"token operator\">/</span>lib\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x   <span class=\"token number\">2</span> root root <span class=\"token number\">4096</span> May <span class=\"token number\">11</span>  <span class=\"token number\">2019</span> home\nlrwxrwxrwx   <span class=\"token number\">1</span> root root    <span class=\"token number\">7</span> May <span class=\"token number\">11</span>  <span class=\"token number\">2019</span> bin <span class=\"token operator\">-></span> usr<span class=\"token operator\">/</span>bin\ndrwx<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>   <span class=\"token number\">2</span> root root <span class=\"token number\">4096</span> Aug  <span class=\"token number\">9</span> <span class=\"token number\">21</span><span class=\"token punctuation\">:</span><span class=\"token number\">40</span> lost<span class=\"token operator\">+</span>found\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x  <span class=\"token number\">12</span> root root <span class=\"token number\">4096</span> Aug  <span class=\"token number\">9</span> <span class=\"token number\">21</span><span class=\"token punctuation\">:</span><span class=\"token number\">40</span> usr\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x  <span class=\"token number\">20</span> root root <span class=\"token number\">4096</span> Aug  <span class=\"token number\">9</span> <span class=\"token number\">21</span><span class=\"token punctuation\">:</span><span class=\"token number\">40</span> <span class=\"token keyword\">var</span>\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x  <span class=\"token number\">11</span> root root <span class=\"token number\">4096</span> Aug  <span class=\"token number\">9</span> <span class=\"token number\">21</span><span class=\"token punctuation\">:</span><span class=\"token number\">40</span> run\ndrwxrwxrwt   <span class=\"token number\">7</span> root root <span class=\"token number\">4096</span> Aug  <span class=\"token number\">9</span> <span class=\"token number\">21</span><span class=\"token punctuation\">:</span><span class=\"token number\">40</span> tmp\ndr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x<span class=\"token operator\">--</span><span class=\"token operator\">-</span>   <span class=\"token number\">2</span> root root <span class=\"token number\">4096</span> Aug  <span class=\"token number\">9</span> <span class=\"token number\">21</span><span class=\"token punctuation\">:</span><span class=\"token number\">40</span> root\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x   <span class=\"token number\">1</span> root root <span class=\"token number\">4096</span> Aug <span class=\"token number\">17</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">51</span> etc\n<span class=\"token operator\">-</span>rwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x   <span class=\"token number\">1</span> root root    <span class=\"token number\">0</span> Aug <span class=\"token number\">17</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">51</span> <span class=\"token punctuation\">.</span>dockerenv\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x   <span class=\"token number\">1</span> root root <span class=\"token number\">4096</span> Aug <span class=\"token number\">17</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">51</span> <span class=\"token range operator\">..</span>\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x   <span class=\"token number\">1</span> root root <span class=\"token number\">4096</span> Aug <span class=\"token number\">17</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">51</span> <span class=\"token punctuation\">.</span>\ndr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x <span class=\"token number\">348</span> root root    <span class=\"token number\">0</span> Aug <span class=\"token number\">17</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">51</span> proc\ndr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x  <span class=\"token number\">13</span> root root    <span class=\"token number\">0</span> Aug <span class=\"token number\">17</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">51</span> sys\ndrwxr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x   <span class=\"token number\">5</span> root root  <span class=\"token number\">360</span> Aug <span class=\"token number\">17</span> <span class=\"token number\">05</span><span class=\"token punctuation\">:</span><span class=\"token number\">51</span> dev</code></pre></div>\n</li>\n</ul>\n<br/>\n<hr>\n<ul>\n<li>\n<p>컨테이너 명령어 실행하기 <code class=\"language-text\">(attach)</code><br>\n<code class=\"language-text\">attach</code> 옵션은 분리 모드로 실행중인 컨테이너에 접근하는 명령어이다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">nasa1515@nasa<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>$ docker attach nasa<span class=\"token operator\">-</span>memory\n<span class=\"token punctuation\">[</span>root@d387c47fa6b8 <span class=\"token operator\">/</span><span class=\"token punctuation\">]</span># \n<span class=\"token punctuation\">[</span>root@d387c47fa6b8 <span class=\"token operator\">/</span><span class=\"token punctuation\">]</span># ip a\n<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> lo<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>LOOPBACK<span class=\"token punctuation\">,</span>UP<span class=\"token punctuation\">,</span>LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">65536</span> qdisc noqueue state UNKNOWN <span class=\"token keyword\">group</span> <span class=\"token keyword\">default</span> qlen <span class=\"token number\">1000</span>\n    link<span class=\"token operator\">/</span>loopback <span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span> brd <span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span>\n    inet <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">/</span><span class=\"token number\">8</span> scope host lo\n    valid_lft forever preferred_lft forever\n<span class=\"token number\">31</span><span class=\"token punctuation\">:</span> eth0@if32<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>BROADCAST<span class=\"token punctuation\">,</span>MULTICAST<span class=\"token punctuation\">,</span>UP<span class=\"token punctuation\">,</span>LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">1500</span> qdisc noqueue state UP <span class=\"token keyword\">group</span> <span class=\"token keyword\">default</span> \n    link<span class=\"token operator\">/</span>ether <span class=\"token number\">02</span><span class=\"token punctuation\">:</span><span class=\"token number\">42</span><span class=\"token punctuation\">:</span>ac<span class=\"token punctuation\">:</span><span class=\"token number\">11</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">04</span> <span class=\"token class-name\">brd</span> ff<span class=\"token punctuation\">:</span>ff<span class=\"token punctuation\">:</span>ff<span class=\"token punctuation\">:</span>ff<span class=\"token punctuation\">:</span>ff<span class=\"token punctuation\">:</span>ff link<span class=\"token operator\">-</span>netnsid <span class=\"token number\">0</span>\n    inet <span class=\"token number\">172.17</span><span class=\"token number\">.0</span><span class=\"token number\">.4</span><span class=\"token operator\">/</span><span class=\"token number\">16</span> brd <span class=\"token number\">172.17</span><span class=\"token number\">.255</span><span class=\"token number\">.255</span> scope <span class=\"token keyword\">global</span> eth0\n    valid_lft forever preferred_lft forever</code></pre></div>\n<p>다음과 같이 백그라운드에서 실행중인 nasa-memory 컨테이너에 접속이 가능하다.</p>\n</li>\n</ul>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-%EB%8F%84%EC%BB%A4-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88\">✔ 도커 컨테이너</a></li>\n<li><a href=\"#-%EB%8F%84%EC%BB%A4-%EA%B8%B0%EB%B3%B8-%EB%AA%85%EB%A0%B9%EC%96%B4\">✌ 도커 기본 명령어</a></li>\n<li><a href=\"#-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EA%B4%80%EB%A6%AC-%EB%AA%85%EB%A0%B9%EC%96%B4\">👌 컨테이너 관리 명령어</a></li>\n</ul>\n</div>","frontmatter":{"date":"June 26, 2021","title":"[DOCKER] - CONTAINER","categories":"DevOps","author":"nasa1515","emoji":"🤦‍♂️"},"fields":{"slug":"/docker-container/"}},"site":{"siteMetadata":{"siteUrl":"https://nasa1515.com","comments":{"utterances":{"repo":"nasa1515/nasablog"}}}}},"pageContext":{"slug":"/docker/","nextSlug":"/docker-install/","prevSlug":"/docker-container/"}},"staticQueryHashes":["1073350324","2938748437"]}